// Array._getOwnerWithSemanticLabel_native()
sil public_external [serialized] [_semantics "array.owner"] @$SSa33_getOwnerWithSemanticLabel_nativeBoyF : $@convention(method) <Element> (@guaranteed Array<Element>) -> @owned Builtin.NativeObject {
// %0                                             // user: %1
bb0(%0 : $Array<Element>):
  %1 = struct_extract %0 : $Array<Element>, #Array._buffer // user: %2
  %2 = struct_extract %1 : $_ArrayBuffer<Element>, #_ArrayBuffer._storage // user: %3
  %3 = struct_extract %2 : $_BridgeStorage<_ContiguousArrayStorageBase, _NSArrayCore>, #_BridgeStorage.rawValue // users: %29, %27, %22, %18, %13
  %4 = metatype $@thick Element.Type              // users: %14, %5
  %5 = builtin "canBeClass"<Element>(%4 : $@thick Element.Type) : $Builtin.Int8 // users: %10, %7
  %6 = integer_literal $Builtin.Int8, 0           // user: %7
  %7 = builtin "cmp_eq_Int8"(%5 : $Builtin.Int8, %6 : $Builtin.Int8) : $Builtin.Int1 // user: %8
  cond_br %7, bb4, bb1                            // id: %8

bb1:                                              // Preds: bb0
  %9 = integer_literal $Builtin.Int8, 1           // user: %10
  %10 = builtin "cmp_eq_Int8"(%5 : $Builtin.Int8, %9 : $Builtin.Int8) : $Builtin.Int1 // user: %11
  cond_br %10, bb3, bb2                           // id: %11

bb2:                                              // Preds: bb1
  // function_ref _swift_isClassOrObjCExistentialType
  %12 = function_ref @_swift_isClassOrObjCExistentialType : $@convention(thin) <τ_0_0> (@thick τ_0_0.Type) -> Bool // user: %14
  strong_retain %3 : $Builtin.BridgeObject        // id: %13
  %14 = apply %12<Element>(%4) : $@convention(thin) <τ_0_0> (@thick τ_0_0.Type) -> Bool // user: %15
  br bb5(%14 : $Bool)                             // id: %15

bb3:                                              // Preds: bb1
  %16 = integer_literal $Builtin.Int1, -1         // user: %17
  %17 = struct $Bool (%16 : $Builtin.Int1)        // user: %19
  strong_retain %3 : $Builtin.BridgeObject        // id: %18
  br bb5(%17 : $Bool)                             // id: %19

bb4:                                              // Preds: bb0
  %20 = integer_literal $Builtin.Int1, 0          // user: %21
  %21 = struct $Bool (%20 : $Builtin.Int1)        // user: %23
  strong_retain %3 : $Builtin.BridgeObject        // id: %22
  br bb5(%21 : $Bool)                             // id: %23

// %24                                            // user: %25
bb5(%24 : $Bool):                                 // Preds: bb4 bb3 bb2
  %25 = struct_extract %24 : $Bool, #Bool._value  // user: %26
  cond_br %25, bb7, bb6                           // id: %26

bb6:                                              // Preds: bb5
  %27 = unchecked_ref_cast %3 : $Builtin.BridgeObject to $_ContiguousArrayStorageBase // user: %28
  br bb8(%27 : $_ContiguousArrayStorageBase)      // id: %28

bb7:                                              // Preds: bb5
  %29 = bridge_object_to_ref %3 : $Builtin.BridgeObject to $_ContiguousArrayStorageBase // user: %30
  br bb8(%29 : $_ContiguousArrayStorageBase)      // id: %30

// %31                                            // user: %32
bb8(%31 : $_ContiguousArrayStorageBase):          // Preds: bb7 bb6
  %32 = unchecked_ref_cast %31 : $_ContiguousArrayStorageBase to $Builtin.NativeObject // user: %33
  return %32 : $Builtin.NativeObject              // id: %33
} // end sil function '$SSa33_getOwnerWithSemanticLabel_nativeBoyF'

