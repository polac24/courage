// Array._makeMutableAndUniqueOrPinned()
sil public_external [serialized] [_semantics "array.make_mutable"] @$SSa29_makeMutableAndUniqueOrPinnedyyF : $@convention(method) <Element> (@inout Array<Element>) -> () {
// %0                                             // user: %1
bb0(%0 : $*Array<Element>):
  %1 = struct_element_addr %0 : $*Array<Element>, #Array._buffer // users: %80, %77, %67, %27, %22
  %2 = metatype $@thick Element.Type              // users: %38, %11, %3
  %3 = builtin "canBeClass"<Element>(%2 : $@thick Element.Type) : $Builtin.Int8 // users: %34, %8, %5
  %4 = integer_literal $Builtin.Int8, 0           // user: %5
  %5 = builtin "cmp_eq_Int8"(%3 : $Builtin.Int8, %4 : $Builtin.Int8) : $Builtin.Int1 // users: %32, %6
  cond_br %5, bb4, bb1                            // id: %6

bb1:                                              // Preds: bb0
  %7 = integer_literal $Builtin.Int8, 1           // user: %8
  %8 = builtin "cmp_eq_Int8"(%3 : $Builtin.Int8, %7 : $Builtin.Int8) : $Builtin.Int1 // user: %9
  cond_br %8, bb3, bb2                            // id: %9

bb2:                                              // Preds: bb1
  // function_ref _swift_isClassOrObjCExistentialType
  %10 = function_ref @_swift_isClassOrObjCExistentialType : $@convention(thin) <τ_0_0> (@thick τ_0_0.Type) -> Bool // user: %11
  %11 = apply %10<Element>(%2) : $@convention(thin) <τ_0_0> (@thick τ_0_0.Type) -> Bool // user: %12
  br bb5(%11 : $Bool)                             // id: %12

bb3:                                              // Preds: bb1
  %13 = integer_literal $Builtin.Int1, -1         // user: %14
  %14 = struct $Bool (%13 : $Builtin.Int1)        // user: %15
  br bb5(%14 : $Bool)                             // id: %15

bb4:                                              // Preds: bb0
  %16 = integer_literal $Builtin.Int1, 0          // user: %17
  %17 = struct $Bool (%16 : $Builtin.Int1)        // user: %18
  br bb5(%17 : $Bool)                             // id: %18

// %19                                            // user: %20
bb5(%19 : $Bool):                                 // Preds: bb4 bb3 bb2
  %20 = struct_extract %19 : $Bool, #Bool._value  // user: %21
  cond_br %20, bb7, bb6                           // id: %21

bb6:                                              // Preds: bb5
  %22 = struct_element_addr %1 : $*_ArrayBuffer<Element>, #_ArrayBuffer._storage // user: %23
  %23 = struct_element_addr %22 : $*_BridgeStorage<_ContiguousArrayStorageBase, _NSArrayCore>, #_BridgeStorage.rawValue // user: %24
  %24 = unchecked_addr_cast %23 : $*Builtin.BridgeObject to $*Builtin.NativeObject // user: %25
  %25 = is_unique_or_pinned %24 : $*Builtin.NativeObject // user: %26
  br bb16(%25 : $Builtin.Int1)                    // id: %26

bb7:                                              // Preds: bb5
  %27 = struct_element_addr %1 : $*_ArrayBuffer<Element>, #_ArrayBuffer._storage // user: %28
  %28 = struct_element_addr %27 : $*_BridgeStorage<_ContiguousArrayStorageBase, _NSArrayCore>, #_BridgeStorage.rawValue // users: %31, %29
  %29 = is_unique_or_pinned %28 : $*Builtin.BridgeObject // user: %30
  cond_br %29, bb8, bb17                          // id: %30

bb8:                                              // Preds: bb7
  %31 = load %28 : $*Builtin.BridgeObject         // users: %54, %53, %51, %46, %42, %37
  cond_br %5, bb12, bb9                           // id: %32

bb9:                                              // Preds: bb8
  %33 = integer_literal $Builtin.Int8, 1          // user: %34
  %34 = builtin "cmp_eq_Int8"(%3 : $Builtin.Int8, %33 : $Builtin.Int8) : $Builtin.Int1 // user: %35
  cond_br %34, bb11, bb10                         // id: %35

bb10:                                             // Preds: bb9
  // function_ref _swift_isClassOrObjCExistentialType
  %36 = function_ref @_swift_isClassOrObjCExistentialType : $@convention(thin) <τ_0_0> (@thick τ_0_0.Type) -> Bool // user: %38
  strong_retain %31 : $Builtin.BridgeObject       // id: %37
  %38 = apply %36<Element>(%2) : $@convention(thin) <τ_0_0> (@thick τ_0_0.Type) -> Bool // user: %39
  br bb13(%38 : $Bool)                            // id: %39

bb11:                                             // Preds: bb9
  %40 = integer_literal $Builtin.Int1, -1         // user: %41
  %41 = struct $Bool (%40 : $Builtin.Int1)        // user: %43
  strong_retain %31 : $Builtin.BridgeObject       // id: %42
  br bb13(%41 : $Bool)                            // id: %43

bb12:                                             // Preds: bb8
  %44 = integer_literal $Builtin.Int1, 0          // user: %45
  %45 = struct $Bool (%44 : $Builtin.Int1)        // user: %47
  strong_retain %31 : $Builtin.BridgeObject       // id: %46
  br bb13(%45 : $Bool)                            // id: %47

// %48                                            // user: %49
bb13(%48 : $Bool):                                // Preds: bb12 bb11 bb10
  %49 = struct_extract %48 : $Bool, #Bool._value  // user: %50
  cond_br %49, bb15, bb14                         // id: %50

bb14:                                             // Preds: bb13
  strong_release %31 : $Builtin.BridgeObject      // id: %51
  br bb18                                         // id: %52

bb15:                                             // Preds: bb13
  %53 = classify_bridge_object %31 : $Builtin.BridgeObject // users: %56, %55
  strong_release %31 : $Builtin.BridgeObject      // id: %54
  %55 = tuple_extract %53 : $(Builtin.Int1, Builtin.Int1), 0 // user: %57
  %56 = tuple_extract %53 : $(Builtin.Int1, Builtin.Int1), 1 // user: %57
  %57 = builtin "or_Int1"(%55 : $Builtin.Int1, %56 : $Builtin.Int1) : $Builtin.Int1 // user: %59
  %58 = integer_literal $Builtin.Int1, -1         // user: %59
  %59 = builtin "xor_Int1"(%57 : $Builtin.Int1, %58 : $Builtin.Int1) : $Builtin.Int1 // user: %60
  br bb16(%59 : $Builtin.Int1)                    // id: %60

// %61                                            // user: %63
bb16(%61 : $Builtin.Int1):                        // Preds: bb15 bb6
  %62 = integer_literal $Builtin.Int1, -1         // user: %63
  %63 = builtin "int_expect_Int1"(%61 : $Builtin.Int1, %62 : $Builtin.Int1) : $Builtin.Int1 // user: %64
  cond_br %63, bb18, bb17                         // id: %64

bb17:                                             // Preds: bb16 bb7
  %65 = alloc_stack $_ArrayBuffer<Element>        // users: %82, %76, %74
  %66 = metatype $@thick _ArrayBuffer<Element>.Type // user: %74
  %67 = load %1 : $*_ArrayBuffer<Element>         // users: %71, %69
  %68 = alloc_stack $_ArrayBuffer<Element>        // users: %75, %74, %69
  store %67 to %68 : $*_ArrayBuffer<Element>      // id: %69
  // function_ref _ArrayBufferProtocol<>.init(copying:)
  %70 = function_ref @$Ss20_ArrayBufferProtocolPss5RangeVySiG7IndicesRtzrlE7copyingxx_tcfC : $@convention(method) <τ_0_0 where τ_0_0 : _ArrayBufferProtocol, τ_0_0.Indices == Range<Int>> (@in τ_0_0, @thick τ_0_0.Type) -> @out τ_0_0 // user: %74
  %71 = struct_extract %67 : $_ArrayBuffer<Element>, #_ArrayBuffer._storage // user: %72
  %72 = struct_extract %71 : $_BridgeStorage<_ContiguousArrayStorageBase, _NSArrayCore>, #_BridgeStorage.rawValue // user: %73
  strong_retain %72 : $Builtin.BridgeObject       // id: %73
  %74 = apply %70<_ArrayBuffer<Element>>(%65, %68, %66) : $@convention(method) <τ_0_0 where τ_0_0 : _ArrayBufferProtocol, τ_0_0.Indices == Range<Int>> (@in τ_0_0, @thick τ_0_0.Type) -> @out τ_0_0
  dealloc_stack %68 : $*_ArrayBuffer<Element>     // id: %75
  %76 = load %65 : $*_ArrayBuffer<Element>        // user: %80
  %77 = struct_element_addr %1 : $*_ArrayBuffer<Element>, #_ArrayBuffer._storage // user: %78
  %78 = struct_element_addr %77 : $*_BridgeStorage<_ContiguousArrayStorageBase, _NSArrayCore>, #_BridgeStorage.rawValue // user: %79
  %79 = load %78 : $*Builtin.BridgeObject         // user: %81
  store %76 to %1 : $*_ArrayBuffer<Element>       // id: %80
  strong_release %79 : $Builtin.BridgeObject      // id: %81
  dealloc_stack %65 : $*_ArrayBuffer<Element>     // id: %82
  br bb18                                         // id: %83

bb18:                                             // Preds: bb17 bb16 bb14
  %84 = tuple ()                                  // user: %85
  return %84 : $()                                // id: %85
} // end sil function '$SSa29_makeMutableAndUniqueOrPinnedyyF'

