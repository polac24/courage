
// String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
sil public_external [serialized] [readonly] [_semantics "string.makeUTF8"] @$SSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String {
// %0                                             // users: %54, %13
// %1                                             // user: %4
// %2                                             // user: %9
bb0(%0 : $Builtin.RawPointer, %1 : $Builtin.Word, %2 : $Builtin.Int1, %3 : $@thin String.Type):
  %4 = builtin "zextOrBitCast_Word_Int64"(%1 : $Builtin.Word) : $Builtin.Int64 // users: %62, %15, %6
  %5 = integer_literal $Builtin.Int64, 0          // users: %71, %21, %6
  %6 = builtin "cmp_eq_Int64"(%4 : $Builtin.Int64, %5 : $Builtin.Int64) : $Builtin.Int1 // user: %7
  cond_br %6, bb7, bb1                            // id: %7

bb1:                                              // Preds: bb0
  %8 = integer_literal $Builtin.Int1, -1          // user: %9
  %9 = builtin "int_expect_Int1"(%2 : $Builtin.Int1, %8 : $Builtin.Int1) : $Builtin.Int1 // user: %10
  cond_br %9, bb6, bb2                            // id: %10

bb2:                                              // Preds: bb1
  %11 = metatype $@thick Unicode.UTF8.Type        // user: %23
  %12 = metatype $@thin UnsafeBufferPointer<UInt8>.Type // user: %17
  %13 = struct $UnsafePointer<UInt8> (%0 : $Builtin.RawPointer) // user: %14
  %14 = enum $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1, %13 : $UnsafePointer<UInt8> // user: %17
  %15 = struct $Int (%4 : $Builtin.Int64)         // user: %17
  // function_ref specialized UnsafeBufferPointer.init(start:count:)
  %16 = function_ref @$SSR5start5countSRyxGSPyxGSg_SitcfCs5UInt8V_Tgq5 : $@convention(method) (Optional<UnsafePointer<UInt8>>, Int, @thin UnsafeBufferPointer<UInt8>.Type) -> UnsafeBufferPointer<UInt8> // user: %17
  %17 = apply %16(%14, %15, %12) : $@convention(method) (Optional<UnsafePointer<UInt8>>, Int, @thin UnsafeBufferPointer<UInt8>.Type) -> UnsafeBufferPointer<UInt8> // user: %23
  %18 = metatype $@thin String.Type               // user: %23
  %19 = integer_literal $Builtin.Int1, 0          // user: %20
  %20 = struct $Bool (%19 : $Builtin.Int1)        // user: %23
  %21 = struct $Int (%5 : $Builtin.Int64)         // user: %23
  // function_ref specialized static String._fromCodeUnits<A, B>(_:encoding:repairIllFormedSequences:minimumCapacity:)
  %22 = function_ref @$SSS14_fromCodeUnits_8encoding24repairIllFormedSequences15minimumCapacitySSSg_Sb8hadErrortx_q_mSbSits10CollectionRzs16_UnicodeEncodingR_0B4UnitQy_7ElementRtzr0_lFZSRys5UInt8VG_s0N0O4UTF8OTgq5 : $@convention(method) (UnsafeBufferPointer<UInt8>, @thick Unicode.UTF8.Type, Bool, Int, @thin String.Type) -> (@owned Optional<String>, Bool) // user: %23
  %23 = apply %22(%17, %11, %20, %21, %18) : $@convention(method) (UnsafeBufferPointer<UInt8>, @thick Unicode.UTF8.Type, Bool, Int, @thin String.Type) -> (@owned Optional<String>, Bool) // user: %24
  %24 = tuple_extract %23 : $(Optional<String>, Bool), 0 // user: %25
  switch_enum %24 : $Optional<String>, case #Optional.some!enumelt.1: bb5, case #Optional.none!enumelt: bb3 // id: %25

bb3:                                              // Preds: bb2
  %26 = string_literal utf8 "/Users/buildnode/jenkins/workspace/oss-swift-package-osx/swift/stdlib/public/core/String.swift" // user: %33
  %27 = integer_literal $Builtin.Word, 94         // user: %34
  %28 = string_literal utf8 "Unexpectedly found nil while unwrapping an Optional value" // user: %30
  %29 = integer_literal $Builtin.Word, 57         // user: %32
  %30 = builtin "ptrtoint_Word"(%28 : $Builtin.RawPointer) : $Builtin.Word // user: %32
  %31 = integer_literal $Builtin.Int8, 2          // users: %42, %34, %32
  %32 = struct $StaticString (%30 : $Builtin.Word, %29 : $Builtin.Word, %31 : $Builtin.Int8) // user: %45
  %33 = builtin "ptrtoint_Word"(%26 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %27 : $Builtin.Word, %31 : $Builtin.Int8) // user: %45
  %35 = integer_literal $Builtin.Int64, 804       // user: %36
  %36 = struct $UInt (%35 : $Builtin.Int64)       // user: %45
  %37 = integer_literal $Builtin.Int32, 0         // user: %43
  br bb4                                          // id: %38

bb4:                                              // Preds: bb3
  %39 = string_literal utf8 "Fatal error"         // user: %41
  %40 = integer_literal $Builtin.Word, 11         // user: %42
  %41 = builtin "ptrtoint_Word"(%39 : $Builtin.RawPointer) : $Builtin.Word // user: %42
  %42 = struct $StaticString (%41 : $Builtin.Word, %40 : $Builtin.Word, %31 : $Builtin.Int8) // user: %45
  %43 = struct $UInt32 (%37 : $Builtin.Int32)     // user: %45
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %44 = function_ref @$Ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %45
  %45 = apply %44(%42, %32, %34, %36, %43) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %46

// %47                                            // user: %48
bb5(%47 : $String):                               // Preds: bb2
  %48 = struct_extract %47 : $String, #String._guts // users: %51, %49
  %49 = struct_extract %48 : $_StringGuts, #_StringGuts._object // user: %50
  %50 = struct_extract %49 : $_StringObject, #_StringObject._object // user: %53
  %51 = struct_extract %48 : $_StringGuts, #_StringGuts._otherBits // user: %52
  %52 = struct_extract %51 : $UInt, #UInt._value  // user: %53
  br bb8(%50 : $Builtin.BridgeObject, %52 : $Builtin.Int64) // id: %53

bb6:                                              // Preds: bb1
  %54 = builtin "ptrtoint_Word"(%0 : $Builtin.RawPointer) : $Builtin.Word // user: %55
  %55 = builtin "zextOrBitCast_Word_Int64"(%54 : $Builtin.Word) : $Builtin.Int64 // user: %57
  %56 = integer_literal $Builtin.Int64, 72057594037927935 // user: %57
  %57 = builtin "and_Int64"(%55 : $Builtin.Int64, %56 : $Builtin.Int64) : $Builtin.Int64 // user: %59
  %58 = integer_literal $Builtin.Int64, -9223372036854775808 // user: %59
  %59 = builtin "stringObjectOr_Int64"(%57 : $Builtin.Int64, %58 : $Builtin.Int64) : $Builtin.Int64 // user: %60
  %60 = struct $UInt (%59 : $Builtin.Int64)       // user: %61
  %61 = value_to_bridge_object %60 : $UInt        // user: %62
  br bb8(%61 : $Builtin.BridgeObject, %4 : $Builtin.Int64) // id: %62

bb7:                                              // Preds: bb0
  %63 = integer_literal $Builtin.Int64, -9223372036854775808 // user: %68
  // function_ref _emptyStringStorage.unsafeMutableAddressor
  %64 = function_ref @$Ss19_emptyStringStorages6UInt32Vvau : $@convention(thin) () -> Builtin.RawPointer // user: %65
  %65 = apply %64() : $@convention(thin) () -> Builtin.RawPointer // user: %66
  %66 = builtin "ptrtoint_Word"(%65 : $Builtin.RawPointer) : $Builtin.Word // user: %67
  %67 = builtin "zextOrBitCast_Word_Int64"(%66 : $Builtin.Word) : $Builtin.Int64 // user: %68
  %68 = builtin "stringObjectOr_Int64"(%63 : $Builtin.Int64, %67 : $Builtin.Int64) : $Builtin.Int64 // user: %69
  %69 = struct $UInt (%68 : $Builtin.Int64)       // user: %70
  %70 = value_to_bridge_object %69 : $UInt        // user: %71
  br bb8(%70 : $Builtin.BridgeObject, %5 : $Builtin.Int64) // id: %71

// %72                                            // user: %74
// %73                                            // user: %75
bb8(%72 : $Builtin.BridgeObject, %73 : $Builtin.Int64): // Preds: bb7 bb6 bb5
  %74 = struct $_StringObject (%72 : $Builtin.BridgeObject) // user: %76
  %75 = struct $UInt (%73 : $Builtin.Int64)       // user: %76
  %76 = struct $_StringGuts (%74 : $_StringObject, %75 : $UInt) // user: %77
  %77 = struct $String (%76 : $_StringGuts)       // user: %78
  return %77 : $String                            // id: %78
} // end sil function '$SSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC'
nsafeBufferPointer<UInt8>.Type):
  %3 = string_literal utf8 "UnsafeBufferPointer with negative coun
// IntManipulation.deinit
sil @$S15MutationProject15IntManipulationCfd : $@convention(method) (@guaranteed IntManipulation) -> @owned Builtin.NativeObject {
// %0                                             // users: %2, %1
bb0(%0 : $IntManipulation):
  debug_value %0 : $IntManipulation, let, name "self", argno 1 // id: %1
  %2 = unchecked_ref_cast %0 : $IntManipulation to $Builtin.NativeObject // user: %3
  return %2 : $Builtin.NativeObject               // id: %3
} // end sil function '$S15MutationProject15IntManipulationCfd'

// specialized UnsafeBufferPointer.init(start:count:)
sil shared_external [serializable] @$SSR5start5countSRyxGSPyxGSg_SitcfCs5UInt8V_Tgq5 : $@convention(method) (Optional<UnsafePointer<UInt8>>, Int, @thin UnsafeBufferPointer<UInt8>.Type) -> UnsafeBufferPointer<UInt8> {
// %0                                             // users: %57, %46, %44, %43, %33
// %1                                             // users: %48, %30, %17
bb0(%0 : $Optional<UnsafePointer<UInt8>>, %1 : $Int, %2 : $@thin Ut" // user: %5
  %4 = integer_literal $Builtin.Word, 39          // user: %7
  %5 = builtin "ptrtoint_Word"(%3 : $Builtin.RawPointer) : $Builtin.Word // user: %7
  %6 = integer_literal $Builtin.Int8, 2           // users: %62, %37, %25, %11, %7
  %7 = struct $StaticString (%5 : $Builtin.Word, %4 : $Builtin.Word, %6 : $Builtin.Int8) // user: %65
  %8 = string_literal utf8 "/Users/buildnode/jenkins/workspace/oss-swift-package-osx/build/buildbot_osx/swift-macosx-x86_64/stdlib/public/core/8/UnsafeBufferPointer.swift" // user: %10
  %9 = integer_literal $Builtin.Word, 142         // user: %11
  %10 = builtin "ptrtoint_Word"(%8 : $Builtin.RawPointer) : $Builtin.Word // user: %11
  %11 = struct $StaticString (%10 : $Builtin.Word, %9 : $Builtin.Word, %6 : $Builtin.Int8) // users: %65, %40
  %12 = integer_literal $Builtin.Int64, 815       // user: %13
  %13 = struct $UInt (%12 : $Builtin.Int64)       // user: %65
  %14 = integer_literal $Builtin.Int32, 0         // users: %63, %38
  br bb1                                          // id: %15

bb1:                                              // Preds: bb0
  %16 = integer_literal $Builtin.Int64, 0         // user: %18
  %17 = struct_extract %1 : $Int, #Int._value     // user: %18
  %18 = builtin "cmp_slt_Int64"(%17 : $Builtin.Int64, %16 : $Builtin.Int64) : $Builtin.Int1 // user: %20
  %19 = integer_literal $Builtin.Int1, 0          // user: %20
  %20 = builtin "int_expect_Int1"(%18 : $Builtin.Int1, %19 : $Builtin.Int1) : $Builtin.Int1 // user: %21
  cond_br %20, bb12, bb2                          // id: %21

bb2:                                              // Preds: bb1
  %22 = string_literal utf8 "UnsafeBufferPointer has a nil start and nonzero count" // user: %24
  %23 = integer_literal $Builtin.Word, 53         // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %6 : $Builtin.Int8) // user: %40
  %26 = integer_literal $Builtin.Int64, 817       // user: %27
  %27 = struct $UInt (%26 : $Builtin.Int64)       // user: %40
  br bb3                                          // id: %28

bb3:                                              // Preds: bb2
  %29 = integer_literal $Builtin.Int64, 0         // user: %31
  %30 = struct_extract %1 : $Int, #Int._value     // user: %31
  %31 = builtin "cmp_eq_Int64"(%30 : $Builtin.Int64, %29 : $Builtin.Int64) : $Builtin.Int1 // user: %32
  cond_br %31, bb7, bb4                           // id: %32

bb4:                                              // Preds: bb3
  switch_enum %0 : $Optional<UnsafePointer<UInt8>>, case #Optional.some!enumelt.1: bb6, case #Optional.none!enumelt: bb5 // id: %33

bb5:                                              // Preds: bb4
  %34 = string_literal utf8 "Fatal error"         // user: %36
  %35 = integer_literal $Builtin.Word, 11         // user: %37
  %36 = builtin "ptrtoint_Word"(%34 : $Builtin.RawPointer) : $Builtin.Word // user: %37
  %37 = struct $StaticString (%36 : $Builtin.Word, %35 : $Builtin.Word, %6 : $Builtin.Int8) // user: %40
  %38 = struct $UInt32 (%14 : $Builtin.Int32)     // user: %40
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %39 = function_ref @$Ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %40
  %40 = apply %39(%37, %25, %11, %27, %38) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %41

bb6:                                              // Preds: bb4
  br bb10                                         // id: %42

bb7:                                              // Preds: bb3
  switch_enum %0 : $Optional<UnsafePointer<UInt8>>, case #Optional.some!enumelt.1: bb9, case #Optional.none!enumelt: bb8 // id: %43

bb8:                                              // Preds: bb7
  br bb11(%0 : $Optional<UnsafePointer<UInt8>>)   // id: %44

bb9:                                              // Preds: bb7
  br bb10                                         // id: %45

bb10:                                             // Preds: bb9 bb6
  %46 = unchecked_enum_data %0 : $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1 // user: %47
  %47 = struct_extract %46 : $UnsafePointer<UInt8>, #UnsafePointer._rawValue // user: %50
  %48 = struct_extract %1 : $Int, #Int._value     // user: %49
  %49 = builtin "truncOrBitCast_Int64_Word"(%48 : $Builtin.Int64) : $Builtin.Word // user: %51
  %50 = pointer_to_address %47 : $Builtin.RawPointer to [strict] $*UInt8 // user: %51
  %51 = index_addr %50 : $*UInt8, %49 : $Builtin.Word // user: %52
  %52 = address_to_pointer %51 : $*UInt8 to $Builtin.RawPointer // user: %53
  %53 = struct $UnsafePointer<UInt8> (%52 : $Builtin.RawPointer) // user: %54
  %54 = enum $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1, %53 : $UnsafePointer<UInt8> // user: %55
  br bb11(%54 : $Optional<UnsafePointer<UInt8>>)  // id: %55

// %56                                            // user: %57
bb11(%56 : $Optional<UnsafePointer<UInt8>>):      // Preds: bb10 bb8
  %57 = struct $UnsafeBufferPointer<UInt8> (%0 : $Optional<UnsafePointer<UInt8>>, %56 : $Optional<UnsafePointer<UInt8>>) // user: %58
  return %57 : $UnsafeBufferPointer<UInt8>        // id: %58

bb12:                                             // Preds: bb1
  %59 = string_literal utf8 "Fatal error"         // user: %61
  %60 = integer_literal $Builtin.Word, 11         // user: %62
  %61 = builtin "ptrtoint_Word"(%59 : $Builtin.RawPointer) : $Builtin.Word // user: %62
  %62 = struct $StaticString (%61 : $Builtin.Word, %60 : $Builtin.Word, %6 : $Builtin.Int8) // user: %65
  %63 = struct $UInt32 (%14 : $Builtin.Int32)     // user: %65
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %64 = function_ref @$Ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %65
  %65 = apply %64(%62, %7, %11, %13, %63) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %66
} // end sil function '$SSR5start5countSRyxGSPyxGSg_SitcfCs5UInt8V_Tgq5'

// specialized static String._fromCodeUnits<A, B>(_:encoding:repairIllFormedSequences:minimumCapacity:)
sil shared_external [serializable] @$SSS14_fromCodeUnits_8encoding24repairIllFormedSequences15minimumCapacitySSSg_Sb8hadErrortx_q_mSbSits10CollectionRzs16_UnicodeEncodingR_0B4UnitQy_7ElementRtzr0_lFZSRys5UInt8VG_s0N0O4UTF8OTgq5 : $@convention(method) (UnsafeBufferPointer<UInt8>, @thick Unicode.UTF8.Type, Bool, Int, @thin String.Type) -> (@owned Optional<String>, Bool) {
// %0                                             // users: %6, %5
// %1                                             // user: %10
// %2                                             // users: %47, %10
// %3                                             // user: %19
bb0(%0 : $UnsafeBufferPointer<UInt8>, %1 : $@thick Unicode.UTF8.Type, %2 : $Bool, %3 : $Int, %4 : $@thin String.Type):
  %5 = struct_extract %0 : $UnsafeBufferPointer<UInt8>, #UnsafeBufferPointer._position // users: %863, %49, %9
  %6 = struct_extract %0 : $UnsafeBufferPointer<UInt8>, #UnsafeBufferPointer._end // users: %1030, %1028, %1006, %934, %932, %910, %216, %214, %192, %120, %118, %96, %9
  %7 = metatype $@thin Unicode.UTF16.Type         // user: %10
  // function_ref specialized static Unicode.UTF16.transcodedLength<A, B>(of:decodedAs:repairingIllFormedSequences:)
  %8 = function_ref @$Ss7UnicodeO5UTF16O16transcodedLength2of9decodedAs27repairingIllFormedSequencesSi5count_Sb7isASCIItSgx_q_mSbts16IteratorProtocolRzs01_A8EncodingR_8CodeUnitQy_7ElementRtzr0_lFZSR0O0Vys5UInt8V_G_AB4UTF8OTgq5 : $@convention(method) (UnsafeBufferPointer<UInt8>.Iterator, @thick Unicode.UTF8.Type, Bool, @thin Unicode.UTF16.Type) -> Optional<(count: Int, isASCII: Bool)> // user: %10
  %9 = struct $UnsafeBufferPointer<UInt8>.Iterator (%5 : $Optional<UnsafePointer<UInt8>>, %6 : $Optional<UnsafePointer<UInt8>>) // user: %10
  %10 = apply %8(%9, %1, %2, %7) : $@convention(method) (UnsafeBufferPointer<UInt8>.Iterator, @thick Unicode.UTF8.Type, Bool, @thin Unicode.UTF16.Type) -> Optional<(count: Int, isASCII: Bool)> // user: %11
  switch_enum %10 : $Optional<(count: Int, isASCII: Bool)>, case #Optional.some!enumelt.1: bb2, case #Optional.none!enumelt: bb1 // id: %11

bb1:                                              // Preds: bb0
  %12 = enum $Optional<String>, #Optional.none!enumelt // user: %14
  %13 = integer_literal $Builtin.Int1, -1         // user: %14
  br bb158(%12 : $Optional<String>, %13 : $Builtin.Int1) // id: %14

// %15                                            // users: %17, %16
bb2(%15 : $(count: Int, isASCII: Bool)):          // Preds: bb0
  %16 = tuple_extract %15 : $(count: Int, isASCII: Bool), 0 // users: %861, %46, %18
  %17 = tuple_extract %15 : $(count: Int, isASCII: Bool), 1 // user: %25
  %18 = struct_extract %16 : $Int, #Int._value    // users: %23, %20
  %19 = struct_extract %3 : $Int, #Int._value     // users: %22, %20
  %20 = builtin "cmp_slt_Int64"(%19 : $Builtin.Int64, %18 : $Builtin.Int64) : $Builtin.Int1 // user: %21
  cond_br %20, bb4, bb3                           // id: %21

bb3:                                              // Preds: bb2
  br bb5(%19 : $Builtin.Int64)                    // id: %22

bb4:                                              // Preds: bb2
  br bb5(%18 : $Builtin.Int64)                    // id: %23

// %24                                            // users: %842, %27
bb5(%24 : $Builtin.Int64):                        // Preds: bb4 bb3
  %25 = struct_extract %17 : $Bool, #Bool._value  // user: %26
  cond_br %25, bb102, bb6                         // id: %26

bb6:                                              // Preds: bb5
  %27 = builtin "truncOrBitCast_Int64_Word"(%24 : $Builtin.Int64) : $Builtin.Word // user: %28
  %28 = alloc_ref [tail_elems $UInt16 * %27 : $Builtin.Word] $_SwiftStringStorage<UInt16> // users: %513, %496, %38, %37, %29
  %29 = ref_to_raw_pointer %28 : $_SwiftStringStorage<UInt16> to $Builtin.RawPointer // users: %35, %30
  %30 = struct $UnsafeRawPointer (%29 : $Builtin.RawPointer) // user: %32
  // function_ref _stdlib_malloc_size
  %31 = function_ref @_stdlib_malloc_size : $@convention(c) (UnsafeRawPointer) -> Int // user: %32
  %32 = apply %31(%30) : $@convention(c) (UnsafeRawPointer) -> Int // user: %33
  %33 = struct_extract %32 : $Int, #Int._value    // user: %34
  %34 = builtin "truncOrBitCast_Int64_Word"(%33 : $Builtin.Int64) : $Builtin.Word // user: %35
  %35 = index_raw_pointer %29 : $Builtin.RawPointer, %34 : $Builtin.Word // user: %36
  %36 = struct $UnsafeMutablePointer<UInt16> (%35 : $Builtin.RawPointer) // user: %42
  %37 = upcast %28 : $_SwiftStringStorage<UInt16> to $_SwiftRawStringStorage // users: %45, %43
  %38 = ref_tail_addr %28 : $_SwiftStringStorage<UInt16>, $UInt16 // user: %39
  %39 = address_to_pointer %38 : $*UInt16 to $Builtin.RawPointer // users: %63, %40
  %40 = struct $UnsafeMutablePointer<UInt16> (%39 : $Builtin.RawPointer) // user: %42
  // function_ref specialized UnsafeMutablePointer.distance(to:)
  %41 = function_ref @$SSp8distance2toSiSpyxG_tFs6UInt16V_Tgq5 : $@convention(method) (UnsafeMutablePointer<UInt16>, UnsafeMutablePointer<UInt16>) -> Int // user: %42
  %42 = apply %41(%36, %40) : $@convention(method) (UnsafeMutablePointer<UInt16>, UnsafeMutablePointer<UInt16>) -> Int // user: %44
  %43 = ref_element_addr %37 : $_SwiftRawStringStorage, #_SwiftRawStringStorage.capacity // user: %44
  store %42 to %43 : $*Int                        // id: %44
  %45 = ref_element_addr %37 : $_SwiftRawStringStorage, #_SwiftRawStringStorage.count // users: %507, %46
  store %16 to %45 : $*Int                        // id: %46
  %47 = struct_extract %2 : $Bool, #Bool._value   // user: %467
  %48 = alloc_stack $Optional<UnsafePointer<UInt8>> // users: %495, %225, %190, %129, %94, %49
  store %5 to %48 : $*Optional<UnsafePointer<UInt8>> // id: %49
  %50 = alloc_stack $Unicode.UTF8.ForwardParser   // users: %494, %414, %298, %234, %142, %80, %59, %57
  %51 = integer_literal $Builtin.Int32, 0         // users: %401, %371, %361, %53
  %52 = integer_literal $Builtin.Int8, 0          // users: %835, %816, %488, %296, %140, %78, %68, %54
  %53 = struct $UInt32 (%51 : $Builtin.Int32)     // users: %705, %674, %449, %345, %293, %210, %114, %55
  %54 = struct $UInt8 (%52 : $Builtin.Int8)       // users: %82, %55
  %55 = struct $_UIntBuffer<UInt32, UInt8> (%53 : $UInt32, %54 : $UInt8) // user: %56
  %56 = struct $Unicode.UTF8.ForwardParser (%55 : $_UIntBuffer<UInt32, UInt8>) // user: %57
  store %56 to %50 : $*Unicode.UTF8.ForwardParser // id: %57
  %58 = integer_literal $Builtin.Int1, 0          // users: %828, %802, %740, %731, %722, %715, %712, %708, %607, %592, %572, %547, %536, %532, %481, %453, %418, %404, %401, %390, %386, %382, %380, %372, %365, %355, %338, %277, %260, %185, %168, %86, %63
  %59 = struct_element_addr %50 : $*Unicode.UTF8.ForwardParser, #Unicode.UTF8.ForwardParser._buffer // users: %414, %234, %142, %80, %71, %60
  %60 = struct_element_addr %59 : $*_UIntBuffer<UInt32, UInt8>, #_UIntBuffer._bitCount // user: %61
  %61 = struct_element_addr %60 : $*UInt8, #UInt8._value // users: %417, %295, %281, %67
  %62 = integer_literal $Builtin.Int1, -1         // users: %773, %763, %756, %754, %743, %734, %719, %698, %667, %636, %626, %619, %617, %529, %523, %491, %469, %467, %423, %375, %368, %358, %254, %162, %69
  br bb7(%58 : $Builtin.Int1, %39 : $Builtin.RawPointer) // id: %63

// %64                                            // users: %841, %492
// %65                                            // users: %839, %821, %474
bb7(%64 : $Builtin.Int1, %65 : $Builtin.RawPointer): // Preds: bb101 bb64 bb6
  %66 = alloc_stack $Unicode.ParseResult<_ValidUTF8Buffer<UInt32>> // users: %465, %464, %462, %459, %451, %442, %439, %435, %433, %425, %92, %84
  %67 = load %61 : $*Builtin.Int8                 // user: %68
  %68 = builtin "cmp_eq_Int8"(%67 : $Builtin.Int8, %52 : $Builtin.Int8) : $Builtin.Int1 // user: %69
  %69 = builtin "int_expect_Int1"(%68 : $Builtin.Int1, %62 : $Builtin.Int1) : $Builtin.Int1 // user: %70
  cond_br %69, bb10, bb8                          // id: %70

bb8:                                              // Preds: bb7
  %71 = struct_element_addr %59 : $*_UIntBuffer<UInt32, UInt8>, #_UIntBuffer._storage // user: %72
  %72 = struct_element_addr %71 : $*UInt32, #UInt32._value // user: %73
  %73 = load %72 : $*Builtin.Int32                // user: %74
  %74 = builtin "zextOrBitCast_Int32_Int64"(%73 : $Builtin.Int32) : $Builtin.Int64 // user: %75
  %75 = builtin "truncOrBitCast_Int64_Int8"(%74 : $Builtin.Int64) : $Builtin.Int8 // users: %86, %77
  %76 = integer_literal $Builtin.Int8, -128       // user: %77
  %77 = builtin "and_Int8"(%75 : $Builtin.Int8, %76 : $Builtin.Int8) : $Builtin.Int8 // user: %78
  %78 = builtin "cmp_eq_Int8"(%77 : $Builtin.Int8, %52 : $Builtin.Int8) : $Builtin.Int1 // user: %79
  cond_br %78, bb9, bb22                          // id: %79

bb9:                                              // Preds: bb8
  %80 = mark_dependence %59 : $*_UIntBuffer<UInt32, UInt8> on %50 : $*Unicode.UTF8.ForwardParser // user: %83
  // function_ref specialized RangeReplaceableCollection.remove(at:)
  %81 = function_ref @$Ss26RangeReplaceableCollectionPsE6remove2at7ElementQz5IndexQz_tFs11_UIntBufferVys6UInt32Vs5UInt8VG_Tgq5 : $@convention(method) (_UIntBuffer<UInt32, UInt8>.Index, @inout _UIntBuffer<UInt32, UInt8>) -> UInt8 // user: %83
  %82 = struct $_UIntBuffer<UInt32, UInt8>.Index (%54 : $UInt8) // user: %83
  %83 = apply %81(%82, %80) : $@convention(method) (_UIntBuffer<UInt32, UInt8>.Index, @inout _UIntBuffer<UInt32, UInt8>) -> UInt8
  %84 = init_enum_data_addr %66 : $*Unicode.ParseResult<_ValidUTF8Buffer<UInt32>>, #Unicode.ParseResult.valid!enumelt.1 // user: %91
  %85 = integer_literal $Builtin.Int8, 1          // user: %86
  %86 = builtin "uadd_with_overflow_Int8"(%75 : $Builtin.Int8, %85 : $Builtin.Int8, %58 : $Builtin.Int1) : $(Builtin.Int8, Builtin.Int1) // user: %87
  %87 = tuple_extract %86 : $(Builtin.Int8, Builtin.Int1), 0 // user: %88
  %88 = builtin "zextOrBitCast_Int8_Int32"(%87 : $Builtin.Int8) : $Builtin.Int32 // user: %89
  %89 = struct $UInt32 (%88 : $Builtin.Int32)     // user: %90
  %90 = struct $_ValidUTF8Buffer<UInt32> (%89 : $UInt32) // user: %91
  store %90 to %84 : $*_ValidUTF8Buffer<UInt32>   // id: %91
  inject_enum_addr %66 : $*Unicode.ParseResult<_ValidUTF8Buffer<UInt32>>, #Unicode.ParseResult.valid!enumelt.1 // id: %92
  br bb58                                         // id: %93

bb10:                                             // Preds: bb7
  %94 = load %48 : $*Optional<UnsafePointer<UInt8>> // users: %117, %95
  switch_enum %94 : $Optional<UnsafePointer<UInt8>>, case #Optional.some!enumelt.1: bb15, case #Optional.none!enumelt: bb11 // id: %95

bb11:                                             // Preds: bb10
  switch_enum %6 : $Optional<UnsafePointer<UInt8>>, case #Optional.none!enumelt: bb14, case #Optional.some!enumelt.1: bb12 // id: %96

bb12:                                             // Preds: bb11
  %97 = string_literal utf8 "/Users/buildnode/jenkins/workspace/oss-swift-package-osx/build/buildbot_osx/swift-macosx-x86_64/stdlib/public/core/8/UnsafeBufferPointer.swift" // user: %104
  %98 = integer_literal $Builtin.Word, 142        // user: %105
  %99 = string_literal utf8 "Unexpectedly found nil while unwrapping an Optional value" // user: %101
  %100 = integer_literal $Builtin.Word, 57        // user: %103
  %101 = builtin "ptrtoint_Word"(%99 : $Builtin.RawPointer) : $Builtin.Word // user: %103
  %102 = integer_literal $Builtin.Int8, 2         // users: %112, %105, %103
  %103 = struct $StaticString (%101 : $Builtin.Word, %100 : $Builtin.Word, %102 : $Builtin.Int8) // user: %114
  %104 = builtin "ptrtoint_Word"(%97 : $Builtin.RawPointer) : $Builtin.Word // user: %105
  %105 = struct $StaticString (%104 : $Builtin.Word, %98 : $Builtin.Word, %102 : $Builtin.Int8) // user: %114
  %106 = integer_literal $Builtin.Int64, 576      // user: %107
  %107 = struct $UInt (%106 : $Builtin.Int64)     // user: %114
  br bb13                                         // id: %108

bb13:                                             // Preds: bb12
  %109 = string_literal utf8 "Fatal error"        // user: %111
  %110 = integer_literal $Builtin.Word, 11        // user: %112
  %111 = builtin "ptrtoint_Word"(%109 : $Builtin.RawPointer) : $Builtin.Word // user: %112
  %112 = struct $StaticString (%111 : $Builtin.Word, %110 : $Builtin.Word, %102 : $Builtin.Int8) // user: %114
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %113 = function_ref @$Ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %114
  %114 = apply %113(%112, %103, %105, %107, %53) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %115

bb14:                                             // Preds: bb11
  br bb57                                         // id: %116

bb15:                                             // Preds: bb10
  %117 = unchecked_enum_data %94 : $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1 // users: %125, %121
  switch_enum %6 : $Optional<UnsafePointer<UInt8>>, case #Optional.some!enumelt.1: bb17, case #Optional.none!enumelt: bb16 // id: %118

bb16:                                             // Preds: bb15
  br bb18                                         // id: %119

bb17:                                             // Preds: bb15
  %120 = unchecked_enum_data %6 : $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1 // user: %122
  %121 = struct_extract %117 : $UnsafePointer<UInt8>, #UnsafePointer._rawValue // user: %123
  %122 = struct_extract %120 : $UnsafePointer<UInt8>, #UnsafePointer._rawValue // user: %123
  %123 = builtin "cmp_eq_RawPointer"(%121 : $Builtin.RawPointer, %122 : $Builtin.RawPointer) : $Builtin.Int1 // user: %124
  cond_br %123, bb57, bb18                        // id: %124

bb18:                                             // Preds: bb17 bb16
  %125 = struct_extract %117 : $UnsafePointer<UInt8>, #UnsafePointer._rawValue // user: %126
  %126 = pointer_to_address %125 : $Builtin.RawPointer to [strict] $*UInt8 // user: %127
  %127 = struct_element_addr %126 : $*UInt8, #UInt8._value // user: %128
  %128 = load %127 : $*Builtin.Int8               // users: %453, %170, %139
  %129 = unchecked_take_enum_data_addr %48 : $*Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1 // users: %137, %130
  %130 = struct_element_addr %129 : $*UnsafePointer<UInt8>, #UnsafePointer._rawValue // user: %131
  %131 = load %130 : $*Builtin.RawPointer         // user: %133
  %132 = integer_literal $Builtin.Word, 1         // user: %134
  %133 = pointer_to_address %131 : $Builtin.RawPointer to [strict] $*UInt8 // user: %134
  %134 = index_addr %133 : $*UInt8, %132 : $Builtin.Word // user: %135
  %135 = address_to_pointer %134 : $*UInt8 to $Builtin.RawPointer // user: %136
  %136 = struct $UnsafePointer<UInt8> (%135 : $Builtin.RawPointer) // user: %137
  store %136 to %129 : $*UnsafePointer<UInt8>     // id: %137
  %138 = integer_literal $Builtin.Int8, -128      // user: %139
  %139 = builtin "and_Int8"(%128 : $Builtin.Int8, %138 : $Builtin.Int8) : $Builtin.Int8 // user: %140
  %140 = builtin "cmp_eq_Int8"(%139 : $Builtin.Int8, %52 : $Builtin.Int8) : $Builtin.Int1 // user: %141
  cond_br %140, bb56, bb19                        // id: %141

bb19:                                             // Preds: bb18
  %142 = mark_dependence %59 : $*_UIntBuffer<UInt32, UInt8> on %50 : $*Unicode.UTF8.ForwardParser // users: %178, %171, %155
  %143 = string_literal utf8 ""                   // user: %145
  %144 = integer_literal $Builtin.Word, 0         // user: %147
  %145 = builtin "ptrtoint_Word"(%143 : $Builtin.RawPointer) : $Builtin.Word // user: %147
  %146 = integer_literal $Builtin.Int8, 2         // users: %447, %151, %147
  %147 = struct $StaticString (%145 : $Builtin.Word, %144 : $Builtin.Word, %146 : $Builtin.Int8) // user: %449
  %148 = string_literal utf8 "/Users/buildnode/jenkins/workspace/oss-swift-package-osx/swift/stdlib/public/core/UIntBuffer.swift" // user: %150
  %149 = integer_literal $Builtin.Word, 98        // user: %151
  %150 = builtin "ptrtoint_Word"(%148 : $Builtin.RawPointer) : $Builtin.Word // user: %151
  %151 = struct $StaticString (%150 : $Builtin.Word, %149 : $Builtin.Word, %146 : $Builtin.Int8) // user: %449
  %152 = integer_literal $Builtin.Int64, 194      // user: %153
  %153 = struct $UInt (%152 : $Builtin.Int64)     // user: %449
  br bb20                                         // id: %154

bb20:                                             // Preds: bb19
  %155 = struct_element_addr %142 : $*_UIntBuffer<UInt32, UInt8>, #_UIntBuffer._bitCount // user: %156
  %156 = struct_element_addr %155 : $*UInt8, #UInt8._value // user: %157
  %157 = load %156 : $*Builtin.Int8               // user: %158
  %158 = builtin "zextOrBitCast_Int8_Int64"(%157 : $Builtin.Int8) : $Builtin.Int64 // user: %160
  %159 = integer_literal $Builtin.Int64, 8        // user: %160
  %160 = builtin "sdiv_Int64"(%158 : $Builtin.Int64, %159 : $Builtin.Int64) : $Builtin.Int64 // user: %162
  %161 = integer_literal $Builtin.Int64, 1        // user: %162
  %162 = builtin "sadd_with_overflow_Int64"(%160 : $Builtin.Int64, %161 : $Builtin.Int64, %62 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %164, %163
  %163 = tuple_extract %162 : $(Builtin.Int64, Builtin.Int1), 0 // user: %167
  %164 = tuple_extract %162 : $(Builtin.Int64, Builtin.Int1), 1 // user: %165
  cond_fail %164 : $Builtin.Int1                  // id: %165
  %166 = integer_literal $Builtin.Int64, 4        // user: %167
  %167 = builtin "cmp_slt_Int64"(%166 : $Builtin.Int64, %163 : $Builtin.Int64) : $Builtin.Int1 // user: %168
  %168 = builtin "int_expect_Int1"(%167 : $Builtin.Int1, %58 : $Builtin.Int1) : $Builtin.Int1 // user: %169
  cond_br %168, bb55, bb21                        // id: %169

bb21:                                             // Preds: bb20
  %170 = builtin "zextOrBitCast_Int8_Int32"(%128 : $Builtin.Int8) : $Builtin.Int32 // user: %177
  %171 = struct_element_addr %142 : $*_UIntBuffer<UInt32, UInt8>, #_UIntBuffer._bitCount // users: %188, %172
  %172 = struct_element_addr %171 : $*UInt8, #UInt8._value // user: %173
  %173 = load %172 : $*Builtin.Int8               // users: %185, %174
  %174 = builtin "zextOrBitCast_Int8_Int32"(%173 : $Builtin.Int8) : $Builtin.Int32 // user: %176
  %175 = integer_literal $Builtin.Int32, 31       // user: %176
  %176 = builtin "and_Int32"(%174 : $Builtin.Int32, %175 : $Builtin.Int32) : $Builtin.Int32 // user: %177
  %177 = builtin "shl_Int32"(%170 : $Builtin.Int32, %176 : $Builtin.Int32) : $Builtin.Int32 // user: %181
  %178 = struct_element_addr %142 : $*_UIntBuffer<UInt32, UInt8>, #_UIntBuffer._storage // users: %183, %179
  %179 = struct_element_addr %178 : $*UInt32, #UInt32._value // user: %180
  %180 = load %179 : $*Builtin.Int32              // user: %181
  %181 = builtin "or_Int32"(%180 : $Builtin.Int32, %177 : $Builtin.Int32) : $Builtin.Int32 // user: %182
  %182 = struct $UInt32 (%181 : $Builtin.Int32)   // user: %183
  store %182 to %178 : $*UInt32                   // id: %183
  %184 = integer_literal $Builtin.Int8, 8         // user: %185
  %185 = builtin "uadd_with_overflow_Int8"(%173 : $Builtin.Int8, %184 : $Builtin.Int8, %58 : $Builtin.Int1) : $(Builtin.Int8, Builtin.Int1) // user: %186
  %186 = tuple_extract %185 : $(Builtin.Int8, Builtin.Int1), 0 // user: %187
  %187 = struct $UInt8 (%186 : $Builtin.Int8)     // user: %188
  store %187 to %171 : $*UInt8                    // id: %188
  br bb22                                         // id: %189

bb22:                                             // Preds: bb32 bb21 bb8
  %190 = load %48 : $*Optional<UnsafePointer<UInt8>> // users: %213, %191
  switch_enum %190 : $Optional<UnsafePointer<UInt8>>, case #Optional.some!enumelt.1: bb27, case #Optional.none!enumelt: bb23 // id: %191

bb23:                                             // Preds: bb22
  switch_enum %6 : $Optional<UnsafePointer<UInt8>>, case #Optional.none!enumelt: bb26, case #Optional.some!enumelt.1: bb24 // id: %192

bb24:                                             // Preds: bb23
  %193 = string_literal utf8 "/Users/buildnode/jenkins/workspace/oss-swift-package-osx/build/buildbot_osx/swift-macosx-x86_64/stdlib/public/core/8/UnsafeBufferPointer.swift" // user: %200
  %194 = integer_literal $Builtin.Word, 142       // user: %201
  %195 = string_literal utf8 "Unexpectedly found nil while unwrapping an Optional value" // user: %197
  %196 = integer_literal $Builtin.Word, 57        // user: %199
  %197 = builtin "ptrtoint_Word"(%195 : $Builtin.RawPointer) : $Builtin.Word // user: %199
  %198 = integer_literal $Builtin.Int8, 2         // users: %208, %201, %199
  %199 = struct $StaticString (%197 : $Builtin.Word, %196 : $Builtin.Word, %198 : $Builtin.Int8) // user: %210
  %200 = builtin "ptrtoint_Word"(%193 : $Builtin.RawPointer) : $Builtin.Word // user: %201
  %201 = struct $StaticString (%200 : $Builtin.Word, %194 : $Builtin.Word, %198 : $Builtin.Int8) // user: %210
  %202 = integer_literal $Builtin.Int64, 576      // user: %203
  %203 = struct $UInt (%202 : $Builtin.Int64)     // user: %210
  br bb25                                         // id: %204

bb25:                                             // Preds: bb24
  %205 = string_literal utf8 "Fatal error"        // user: %207
  %206 = integer_literal $Builtin.Word, 11        // user: %208
  %207 = builtin "ptrtoint_Word"(%205 : $Builtin.RawPointer) : $Builtin.Word // user: %208
  %208 = struct $StaticString (%207 : $Builtin.Word, %206 : $Builtin.Word, %198 : $Builtin.Int8) // user: %210
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %209 = function_ref @$Ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %210
  %210 = apply %209(%208, %199, %201, %203, %53) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %211

bb26:                                             // Preds: bb23
  br bb34                                         // id: %212

bb27:                                             // Preds: bb22
  %213 = unchecked_enum_data %190 : $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1 // users: %221, %217
  switch_enum %6 : $Optional<UnsafePointer<UInt8>>, case #Optional.some!enumelt.1: bb29, case #Optional.none!enumelt: bb28 // id: %214

bb28:                                             // Preds: bb27
  br bb30                                         // id: %215

bb29:                                             // Preds: bb27
  %216 = unchecked_enum_data %6 : $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1 // user: %218
  %217 = struct_extract %213 : $UnsafePointer<UInt8>, #UnsafePointer._rawValue // user: %219
  %218 = struct_extract %216 : $UnsafePointer<UInt8>, #UnsafePointer._rawValue // user: %219
  %219 = builtin "cmp_eq_RawPointer"(%217 : $Builtin.RawPointer, %218 : $Builtin.RawPointer) : $Builtin.Int1 // user: %220
  cond_br %219, bb34, bb30                        // id: %220

bb30:                                             // Preds: bb29 bb28
  %221 = struct_extract %213 : $UnsafePointer<UInt8>, #UnsafePointer._rawValue // user: %222
  %222 = pointer_to_address %221 : $Builtin.RawPointer to [strict] $*UInt8 // user: %223
  %223 = struct_element_addr %222 : $*UInt8, #UInt8._value // user: %224
  %224 = load %223 : $*Builtin.Int8               // user: %262
  %225 = unchecked_take_enum_data_addr %48 : $*Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1 // users: %233, %226
  %226 = struct_element_addr %225 : $*UnsafePointer<UInt8>, #UnsafePointer._rawValue // user: %227
  %227 = load %226 : $*Builtin.RawPointer         // user: %229
  %228 = integer_literal $Builtin.Word, 1         // user: %230
  %229 = pointer_to_address %227 : $Builtin.RawPointer to [strict] $*UInt8 // user: %230
  %230 = index_addr %229 : $*UInt8, %228 : $Builtin.Word // user: %231
  %231 = address_to_pointer %230 : $*UInt8 to $Builtin.RawPointer // user: %232
  %232 = struct $UnsafePointer<UInt8> (%231 : $Builtin.RawPointer) // user: %233
  store %232 to %225 : $*UnsafePointer<UInt8>     // id: %233
  %234 = mark_dependence %59 : $*_UIntBuffer<UInt32, UInt8> on %50 : $*Unicode.UTF8.ForwardParser // users: %270, %263, %247
  %235 = string_literal utf8 ""                   // user: %237
  %236 = integer_literal $Builtin.Word, 0         // user: %239
  %237 = builtin "ptrtoint_Word"(%235 : $Builtin.RawPointer) : $Builtin.Word // user: %239
  %238 = integer_literal $Builtin.Int8, 2         // users: %291, %243, %239
  %239 = struct $StaticString (%237 : $Builtin.Word, %236 : $Builtin.Word, %238 : $Builtin.Int8) // user: %293
  %240 = string_literal utf8 "/Users/buildnode/jenkins/workspace/oss-swift-package-osx/swift/stdlib/public/core/UIntBuffer.swift" // user: %242
  %241 = integer_literal $Builtin.Word, 98        // user: %243
  %242 = builtin "ptrtoint_Word"(%240 : $Builtin.RawPointer) : $Builtin.Word // user: %243
  %243 = struct $StaticString (%242 : $Builtin.Word, %241 : $Builtin.Word, %238 : $Builtin.Int8) // user: %293
  %244 = integer_literal $Builtin.Int64, 194      // user: %245
  %245 = struct $UInt (%244 : $Builtin.Int64)     // user: %293
  br bb31                                         // id: %246

bb31:                                             // Preds: bb30
  %247 = struct_element_addr %234 : $*_UIntBuffer<UInt32, UInt8>, #_UIntBuffer._bitCount // user: %248
  %248 = struct_element_addr %247 : $*UInt8, #UInt8._value // user: %249
  %249 = load %248 : $*Builtin.Int8               // user: %250
  %250 = builtin "zextOrBitCast_Int8_Int64"(%249 : $Builtin.Int8) : $Builtin.Int64 // user: %252
  %251 = integer_literal $Builtin.Int64, 8        // user: %252
  %252 = builtin "sdiv_Int64"(%250 : $Builtin.Int64, %251 : $Builtin.Int64) : $Builtin.Int64 // user: %254
  %253 = integer_literal $Builtin.Int64, 1        // user: %254
  %254 = builtin "sadd_with_overflow_Int64"(%252 : $Builtin.Int64, %253 : $Builtin.Int64, %62 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %256, %255
  %255 = tuple_extract %254 : $(Builtin.Int64, Builtin.Int1), 0 // user: %259
  %256 = tuple_extract %254 : $(Builtin.Int64, Builtin.Int1), 1 // user: %257
  cond_fail %256 : $Builtin.Int1                  // id: %257
  %258 = integer_literal $Builtin.Int64, 4        // user: %259
  %259 = builtin "cmp_slt_Int64"(%258 : $Builtin.Int64, %255 : $Builtin.Int64) : $Builtin.Int1 // user: %260
  %260 = builtin "int_expect_Int1"(%259 : $Builtin.Int1, %58 : $Builtin.Int1) : $Builtin.Int1 // user: %261
  cond_br %260, bb33, bb32                        // id: %261

bb32:                                             // Preds: bb31
  %262 = builtin "zextOrBitCast_Int8_Int32"(%224 : $Builtin.Int8) : $Builtin.Int32 // user: %269
  %263 = struct_element_addr %234 : $*_UIntBuffer<UInt32, UInt8>, #_UIntBuffer._bitCount // users: %280, %264
  %264 = struct_element_addr %263 : $*UInt8, #UInt8._value // user: %265
  %265 = load %264 : $*Builtin.Int8               // users: %277, %266
  %266 = builtin "zextOrBitCast_Int8_Int32"(%265 : $Builtin.Int8) : $Builtin.Int32 // user: %268
  %267 = integer_literal $Builtin.Int32, 31       // user: %268
  %268 = builtin "and_Int32"(%266 : $Builtin.Int32, %267 : $Builtin.Int32) : $Builtin.Int32 // user: %269
  %269 = builtin "shl_Int32"(%262 : $Builtin.Int32, %268 : $Builtin.Int32) : $Builtin.Int32 // user: %273
  %270 = struct_element_addr %234 : $*_UIntBuffer<UInt32, UInt8>, #_UIntBuffer._storage // users: %275, %271
  %271 = struct_element_addr %270 : $*UInt32, #UInt32._value // user: %272
  %272 = load %271 : $*Builtin.Int32              // user: %273
  %273 = builtin "or_Int32"(%272 : $Builtin.Int32, %269 : $Builtin.Int32) : $Builtin.Int32 // user: %274
  %274 = struct $UInt32 (%273 : $Builtin.Int32)   // user: %275
  store %274 to %270 : $*UInt32                   // id: %275
  %276 = integer_literal $Builtin.Int8, 8         // user: %277
  %277 = builtin "uadd_with_overflow_Int8"(%265 : $Builtin.Int8, %276 : $Builtin.Int8, %58 : $Builtin.Int1) : $(Builtin.Int8, Builtin.Int1) // user: %278
  %278 = tuple_extract %277 : $(Builtin.Int8, Builtin.Int1), 0 // user: %279
  %279 = struct $UInt8 (%278 : $Builtin.Int8)     // user: %280
  store %279 to %263 : $*UInt8                    // id: %280
  %281 = load %61 : $*Builtin.Int8                // user: %282
  %282 = builtin "zextOrBitCast_Int8_Int64"(%281 : $Builtin.Int8) : $Builtin.Int64 // user: %284
  %283 = integer_literal $Builtin.Int64, 8        // user: %284
  %284 = builtin "sdiv_Int64"(%282 : $Builtin.Int64, %283 : $Builtin.Int64) : $Builtin.Int64 // user: %286
  %285 = integer_literal $Builtin.Int64, 4        // user: %286
  %286 = builtin "cmp_slt_Int64"(%284 : $Builtin.Int64, %285 : $Builtin.Int64) : $Builtin.Int1 // user: %287
  cond_br %286, bb22, bb35                        // id: %287

bb33:                                             // Preds: bb31
  %288 = string_literal utf8 "Fatal error"        // user: %290
  %289 = integer_literal $Builtin.Word, 11        // user: %291
  %290 = builtin "ptrtoint_Word"(%288 : $Builtin.RawPointer) : $Builtin.Word // user: %291
  %291 = struct $StaticString (%290 : $Builtin.Word, %289 : $Builtin.Word, %238 : $Builtin.Int8) // user: %293
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %292 = function_ref @$Ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %293
  %293 = apply %292(%291, %239, %243, %245, %53) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %294

bb34:                                             // Preds: bb29 bb26
  %295 = load %61 : $*Builtin.Int8                // user: %296
  %296 = builtin "cmp_eq_Int8"(%295 : $Builtin.Int8, %52 : $Builtin.Int8) : $Builtin.Int1 // user: %297
  cond_br %296, bb54, bb35                        // id: %297

bb35:                                             // Preds: bb34 bb32
  %298 = load %50 : $*Unicode.UTF8.ForwardParser  // users: %377, %299
  %299 = struct_extract %298 : $Unicode.UTF8.ForwardParser, #Unicode.UTF8.ForwardParser._buffer // user: %300
  %300 = struct_extract %299 : $_UIntBuffer<UInt32, UInt8>, #_UIntBuffer._storage // user: %302
  %301 = integer_literal $Builtin.Int32, 49376    // user: %303
  %302 = struct_extract %300 : $UInt32, #UInt32._value // users: %407, %386, %370, %360, %318, %313, %308, %303
  %303 = builtin "and_Int32"(%302 : $Builtin.Int32, %301 : $Builtin.Int32) : $Builtin.Int32 // user: %305
  %304 = integer_literal $Builtin.Int32, 32960    // user: %305
  %305 = builtin "cmp_eq_Int32"(%303 : $Builtin.Int32, %304 : $Builtin.Int32) : $Builtin.Int1 // user: %306
  cond_br %305, bb48, bb36                        // id: %306

bb36:                                             // Preds: bb35
  %307 = integer_literal $Builtin.Int32, 12632304 // user: %308
  %308 = builtin "and_Int32"(%302 : $Builtin.Int32, %307 : $Builtin.Int32) : $Builtin.Int32 // user: %310
  %309 = integer_literal $Builtin.Int32, 8421600  // user: %310
  %310 = builtin "cmp_eq_Int32"(%308 : $Builtin.Int32, %309 : $Builtin.Int32) : $Builtin.Int1 // user: %311
  cond_br %310, bb45, bb37                        // id: %311

bb37:                                             // Preds: bb36
  %312 = integer_literal $Builtin.Int32, -1061109512 // user: %313
  %313 = builtin "and_Int32"(%302 : $Builtin.Int32, %312 : $Builtin.Int32) : $Builtin.Int32 // user: %315
  %314 = integer_literal $Builtin.Int32, -2139062032 // user: %315
  %315 = builtin "cmp_eq_Int32"(%313 : $Builtin.Int32, %314 : $Builtin.Int32) : $Builtin.Int1 // user: %316
  cond_br %315, bb38, bb50                        // id: %316

bb38:                                             // Preds: bb37
  %317 = integer_literal $Builtin.Int32, 12295    // user: %318
  %318 = builtin "and_Int32"(%302 : $Builtin.Int32, %317 : $Builtin.Int32) : $Builtin.Int32 // users: %347, %337, %334, %331
  %319 = string_literal utf8 "Not enough bits to represent a signed value" // user: %321
  %320 = integer_literal $Builtin.Word, 43        // user: %323
  %321 = builtin "ptrtoint_Word"(%319 : $Builtin.RawPointer) : $Builtin.Word // user: %323
  %322 = integer_literal $Builtin.Int8, 2         // users: %343, %327, %323
  %323 = struct $StaticString (%321 : $Builtin.Word, %320 : $Builtin.Word, %322 : $Builtin.Int8) // user: %345
  %324 = string_literal utf8 "/Users/buildnode/jenkins/workspace/oss-swift-package-osx/build/buildbot_osx/swift-macosx-x86_64/stdlib/public/core/8/Integers.swift" // user: %326
  %325 = integer_literal $Builtin.Word, 131       // user: %327
  %326 = builtin "ptrtoint_Word"(%324 : $Builtin.RawPointer) : $Builtin.Word // user: %327
  %327 = struct $StaticString (%326 : $Builtin.Word, %325 : $Builtin.Word, %322 : $Builtin.Int8) // user: %345
  %328 = integer_literal $Builtin.Int64, 3445     // user: %329
  %329 = struct $UInt (%328 : $Builtin.Int64)     // user: %345
  br bb39                                         // id: %330

bb39:                                             // Preds: bb38
  %331 = builtin "zextOrBitCast_Int32_Int64"(%318 : $Builtin.Int32) : $Builtin.Int64 // user: %332
  %332 = builtin "truncOrBitCast_Int64_Int16"(%331 : $Builtin.Int64) : $Builtin.Int16 // user: %333
  %333 = builtin "zextOrBitCast_Int16_Int32"(%332 : $Builtin.Int16) : $Builtin.Int32 // user: %334
  %334 = builtin "cmp_eq_Int32"(%333 : $Builtin.Int32, %318 : $Builtin.Int32) : $Builtin.Int1 // user: %335
  cond_br %334, bb42, bb40                        // id: %335

bb40:                                             // Preds: bb39
  %336 = integer_literal $Builtin.Int32, 65535    // user: %337
  %337 = builtin "cmp_ult_Int32"(%336 : $Builtin.Int32, %318 : $Builtin.Int32) : $Builtin.Int1 // user: %338
  %338 = builtin "int_expect_Int1"(%337 : $Builtin.Int1, %58 : $Builtin.Int1) : $Builtin.Int1 // user: %339
  cond_br %338, bb41, bb42                        // id: %339

bb41:                                             // Preds: bb40
  %340 = string_literal utf8 "Fatal error"        // user: %342
  %341 = integer_literal $Builtin.Word, 11        // user: %343
  %342 = builtin "ptrtoint_Word"(%340 : $Builtin.RawPointer) : $Builtin.Word // user: %343
  %343 = struct $StaticString (%342 : $Builtin.Word, %341 : $Builtin.Word, %322 : $Builtin.Int8) // user: %345
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %344 = function_ref @$Ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %345
  %345 = apply %344(%343, %323, %327, %329, %53) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %346

bb42:                                             // Preds: bb40 bb39
  %347 = builtin "zextOrBitCast_Int32_Int64"(%318 : $Builtin.Int32) : $Builtin.Int64 // user: %348
  %348 = builtin "truncOrBitCast_Int64_Int16"(%347 : $Builtin.Int64) : $Builtin.Int16 // users: %352, %350
  %349 = integer_literal $Builtin.Int16, 0        // user: %350
  %350 = builtin "cmp_eq_Int16"(%348 : $Builtin.Int16, %349 : $Builtin.Int16) : $Builtin.Int1 // user: %351
  cond_br %350, bb50, bb43                        // id: %351

bb43:                                             // Preds: bb42
  %352 = builtin "int_bswap_Int16"(%348 : $Builtin.Int16) : $Builtin.Int16 // user: %354
  %353 = integer_literal $Builtin.Int16, 1024     // user: %354
  %354 = builtin "cmp_ult_Int16"(%353 : $Builtin.Int16, %352 : $Builtin.Int16) : $Builtin.Int1 // user: %355
  %355 = builtin "int_expect_Int1"(%354 : $Builtin.Int1, %58 : $Builtin.Int1) : $Builtin.Int1 // user: %356
  cond_br %355, bb50, bb44                        // id: %356

bb44:                                             // Preds: bb43
  %357 = integer_literal $Builtin.Int8, 32        // user: %358
  br bb51(%62 : $Builtin.Int1, %357 : $Builtin.Int8) // id: %358

bb45:                                             // Preds: bb36
  %359 = integer_literal $Builtin.Int32, 8207     // user: %360
  %360 = builtin "and_Int32"(%302 : $Builtin.Int32, %359 : $Builtin.Int32) : $Builtin.Int32 // users: %364, %361
  %361 = builtin "cmp_eq_Int32"(%360 : $Builtin.Int32, %51 : $Builtin.Int32) : $Builtin.Int1 // user: %362
  cond_br %361, bb50, bb46                        // id: %362

bb46:                                             // Preds: bb45
  %363 = integer_literal $Builtin.Int32, 8205     // user: %364
  %364 = builtin "cmp_eq_Int32"(%360 : $Builtin.Int32, %363 : $Builtin.Int32) : $Builtin.Int1 // user: %365
  %365 = builtin "int_expect_Int1"(%364 : $Builtin.Int1, %58 : $Builtin.Int1) : $Builtin.Int1 // user: %366
  cond_br %365, bb50, bb47                        // id: %366

bb47:                                             // Preds: bb46
  %367 = integer_literal $Builtin.Int8, 24        // user: %368
  br bb51(%62 : $Builtin.Int1, %367 : $Builtin.Int8) // id: %368

bb48:                                             // Preds: bb35
  %369 = integer_literal $Builtin.Int32, 30       // user: %370
  %370 = builtin "and_Int32"(%302 : $Builtin.Int32, %369 : $Builtin.Int32) : $Builtin.Int32 // user: %371
  %371 = builtin "cmp_eq_Int32"(%370 : $Builtin.Int32, %51 : $Builtin.Int32) : $Builtin.Int1 // user: %372
  %372 = builtin "int_expect_Int1"(%371 : $Builtin.Int1, %58 : $Builtin.Int1) : $Builtin.Int1 // user: %373
  cond_br %372, bb50, bb49                        // id: %373

bb49:                                             // Preds: bb48
  %374 = integer_literal $Builtin.Int8, 16        // user: %375
  br bb51(%62 : $Builtin.Int1, %374 : $Builtin.Int8) // id: %375

bb50:                                             // Preds: bb48 bb46 bb45 bb43 bb42 bb37
  // function_ref Unicode.UTF8.ForwardParser._invalidLength()
  %376 = function_ref @$Ss7UnicodeO4UTF8O13ForwardParserV14_invalidLengths5UInt8VyF : $@convention(method) (Unicode.UTF8.ForwardParser) -> UInt8 // user: %377
  %377 = apply %376(%298) : $@convention(method) (Unicode.UTF8.ForwardParser) -> UInt8 // user: %379
  %378 = integer_literal $Builtin.Int8, 8         // user: %380
  %379 = struct_extract %377 : $UInt8, #UInt8._value // user: %380
  %380 = builtin "umul_with_overflow_Int8"(%379 : $Builtin.Int8, %378 : $Builtin.Int8, %58 : $Builtin.Int1) : $(Builtin.Int8, Builtin.Int1) // user: %381
  %381 = tuple_extract %380 : $(Builtin.Int8, Builtin.Int1), 0 // user: %382
  br bb51(%58 : $Builtin.Int1, %381 : $Builtin.Int8) // id: %382

// %383                                           // user: %423
// %384                                           // users: %428, %418, %408, %397, %390
bb51(%383 : $Builtin.Int1, %384 : $Builtin.Int8): // Preds: bb50 bb49 bb47 bb44
  %385 = integer_literal $Builtin.Int32, 16843009 // user: %386
  %386 = builtin "uadd_with_overflow_Int32"(%302 : $Builtin.Int32, %385 : $Builtin.Int32, %58 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // user: %387
  %387 = tuple_extract %386 : $(Builtin.Int32, Builtin.Int1), 0 // user: %406
  %388 = integer_literal $Builtin.Int32, -1       // user: %396
  %389 = integer_literal $Builtin.Int8, 1         // users: %397, %392, %390
  %390 = builtin "uadd_with_overflow_Int8"(%384 : $Builtin.Int8, %389 : $Builtin.Int8, %58 : $Builtin.Int1) : $(Builtin.Int8, Builtin.Int1) // user: %391
  %391 = tuple_extract %390 : $(Builtin.Int8, Builtin.Int1), 0 // user: %392
  %392 = builtin "lshr_Int8"(%391 : $Builtin.Int8, %389 : $Builtin.Int8) : $Builtin.Int8 // user: %393
  %393 = builtin "zextOrBitCast_Int8_Int32"(%392 : $Builtin.Int8) : $Builtin.Int32 // user: %395
  %394 = integer_literal $Builtin.Int32, 31       // users: %399, %395
  %395 = builtin "and_Int32"(%393 : $Builtin.Int32, %394 : $Builtin.Int32) : $Builtin.Int32 // user: %396
  %396 = builtin "shl_Int32"(%388 : $Builtin.Int32, %395 : $Builtin.Int32) : $Builtin.Int32 // user: %400
  %397 = builtin "lshr_Int8"(%384 : $Builtin.Int8, %389 : $Builtin.Int8) : $Builtin.Int8 // user: %398
  %398 = builtin "zextOrBitCast_Int8_Int32"(%397 : $Builtin.Int8) : $Builtin.Int32 // user: %399
  %399 = builtin "and_Int32"(%398 : $Builtin.Int32, %394 : $Builtin.Int32) : $Builtin.Int32 // user: %400
  %400 = builtin "shl_Int32"(%396 : $Builtin.Int32, %399 : $Builtin.Int32) : $Builtin.Int32 // user: %401
  %401 = builtin "usub_with_overflow_Int32"(%51 : $Builtin.Int32, %400 : $Builtin.Int32, %58 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // user: %402
  %402 = tuple_extract %401 : $(Builtin.Int32, Builtin.Int1), 0 // user: %404
  %403 = integer_literal $Builtin.Int32, 1        // user: %404
  %404 = builtin "usub_with_overflow_Int32"(%402 : $Builtin.Int32, %403 : $Builtin.Int32, %58 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // user: %405
  %405 = tuple_extract %404 : $(Builtin.Int32, Builtin.Int1), 0 // user: %406
  %406 = builtin "and_Int32"(%387 : $Builtin.Int32, %405 : $Builtin.Int32) : $Builtin.Int32 // user: %436
  %407 = builtin "zextOrBitCast_Int32_Int64"(%302 : $Builtin.Int32) : $Builtin.Int64 // user: %411
  %408 = builtin "zextOrBitCast_Int8_Int64"(%384 : $Builtin.Int8) : $Builtin.Int64 // user: %410
  %409 = integer_literal $Builtin.Int64, 63       // user: %410
  %410 = builtin "and_Int64"(%408 : $Builtin.Int64, %409 : $Builtin.Int64) : $Builtin.Int64 // user: %411
  %411 = builtin "lshr_Int64"(%407 : $Builtin.Int64, %410 : $Builtin.Int64) : $Builtin.Int64 // user: %412
  %412 = builtin "truncOrBitCast_Int64_Int32"(%411 : $Builtin.Int64) : $Builtin.Int32 // user: %413
  %413 = struct $UInt32 (%412 : $Builtin.Int32)   // user: %416
  %414 = mark_dependence %59 : $*_UIntBuffer<UInt32, UInt8> on %50 : $*Unicode.UTF8.ForwardParser // users: %421, %415
  %415 = struct_element_addr %414 : $*_UIntBuffer<UInt32, UInt8>, #_UIntBuffer._storage // user: %416
  store %413 to %415 : $*UInt32                   // id: %416
  %417 = load %61 : $*Builtin.Int8                // user: %418
  %418 = builtin "usub_with_overflow_Int8"(%417 : $Builtin.Int8, %384 : $Builtin.Int8, %58 : $Builtin.Int1) : $(Builtin.Int8, Builtin.Int1) // user: %419
  %419 = tuple_extract %418 : $(Builtin.Int8, Builtin.Int1), 0 // user: %420
  %420 = struct $UInt8 (%419 : $Builtin.Int8)     // user: %422
  %421 = struct_element_addr %414 : $*_UIntBuffer<UInt32, UInt8>, #_UIntBuffer._bitCount // user: %422
  store %420 to %421 : $*UInt8                    // id: %422
  %423 = builtin "int_expect_Int1"(%383 : $Builtin.Int1, %62 : $Builtin.Int1) : $Builtin.Int1 // user: %424
  cond_br %423, bb53, bb52                        // id: %424

bb52:                                             // Preds: bb51
  %425 = init_enum_data_addr %66 : $*Unicode.ParseResult<_ValidUTF8Buffer<UInt32>>, #Unicode.ParseResult.error!enumelt.1 // user: %426
  %426 = tuple_element_addr %425 : $*(length: Int), 0 // user: %432
  %427 = integer_literal $Builtin.Int8, 8         // user: %428
  %428 = builtin "udiv_Int8"(%384 : $Builtin.Int8, %427 : $Builtin.Int8) : $Builtin.Int8 // user: %429
  %429 = builtin "zextOrBitCast_Int8_Int64"(%428 : $Builtin.Int8) : $Builtin.Int64 // user: %430
  %430 = struct $Int (%429 : $Builtin.Int64)      // users: %432, %431
  %431 = tuple $(length: Int) (%430)
  store %430 to %426 : $*Int                      // id: %432
  inject_enum_addr %66 : $*Unicode.ParseResult<_ValidUTF8Buffer<UInt32>>, #Unicode.ParseResult.error!enumelt.1 // id: %433
  br bb58                                         // id: %434

bb53:                                             // Preds: bb51
  %435 = init_enum_data_addr %66 : $*Unicode.ParseResult<_ValidUTF8Buffer<UInt32>>, #Unicode.ParseResult.valid!enumelt.1 // user: %438
  %436 = struct $UInt32 (%406 : $Builtin.Int32)   // user: %437
  %437 = struct $_ValidUTF8Buffer<UInt32> (%436 : $UInt32) // user: %438
  store %437 to %435 : $*_ValidUTF8Buffer<UInt32> // id: %438
  inject_enum_addr %66 : $*Unicode.ParseResult<_ValidUTF8Buffer<UInt32>>, #Unicode.ParseResult.valid!enumelt.1 // id: %439
  br bb58                                         // id: %440

bb54:                                             // Preds: bb34
  %441 = enum $Unicode.ParseResult<_ValidUTF8Buffer<UInt32>>, #Unicode.ParseResult.emptyInput!enumelt // user: %442
  store %441 to %66 : $*Unicode.ParseResult<_ValidUTF8Buffer<UInt32>> // id: %442
  br bb58                                         // id: %443

bb55:                                             // Preds: bb20
  %444 = string_literal utf8 "Fatal error"        // user: %446
  %445 = integer_literal $Builtin.Word, 11        // user: %447
  %446 = builtin "ptrtoint_Word"(%444 : $Builtin.RawPointer) : $Builtin.Word // user: %447
  %447 = struct $StaticString (%446 : $Builtin.Word, %445 : $Builtin.Word, %146 : $Builtin.Int8) // user: %449
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %448 = function_ref @$Ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %449
  %449 = apply %448(%447, %147, %151, %153, %53) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %450

bb56:                                             // Preds: bb18
  %451 = init_enum_data_addr %66 : $*Unicode.ParseResult<_ValidUTF8Buffer<UInt32>>, #Unicode.ParseResult.valid!enumelt.1 // user: %458
  %452 = integer_literal $Builtin.Int8, 1         // user: %453
  %453 = builtin "uadd_with_overflow_Int8"(%128 : $Builtin.Int8, %452 : $Builtin.Int8, %58 : $Builtin.Int1) : $(Builtin.Int8, Builtin.Int1) // user: %454
  %454 = tuple_extract %453 : $(Builtin.Int8, Builtin.Int1), 0 // user: %455
  %455 = builtin "zextOrBitCast_Int8_Int32"(%454 : $Builtin.Int8) : $Builtin.Int32 // user: %456
  %456 = struct $UInt32 (%455 : $Builtin.Int32)   // user: %457
  %457 = struct $_ValidUTF8Buffer<UInt32> (%456 : $UInt32) // user: %458
  store %457 to %451 : $*_ValidUTF8Buffer<UInt32> // id: %458
  inject_enum_addr %66 : $*Unicode.ParseResult<_ValidUTF8Buffer<UInt32>>, #Unicode.ParseResult.valid!enumelt.1 // id: %459
  br bb58                                         // id: %460

bb57:                                             // Preds: bb17 bb14
  %461 = enum $Unicode.ParseResult<_ValidUTF8Buffer<UInt32>>, #Unicode.ParseResult.emptyInput!enumelt // user: %462
  store %461 to %66 : $*Unicode.ParseResult<_ValidUTF8Buffer<UInt32>> // id: %462
  br bb58                                         // id: %463

bb58:                                             // Preds: bb57 bb56 bb54 bb53 bb52 bb9
  %464 = load %66 : $*Unicode.ParseResult<_ValidUTF8Buffer<UInt32>> // users: %516, %466
  dealloc_stack %66 : $*Unicode.ParseResult<_ValidUTF8Buffer<UInt32>> // id: %465
  switch_enum %464 : $Unicode.ParseResult<_ValidUTF8Buffer<UInt32>>, case #Unicode.ParseResult.valid!enumelt.1: bb67, case #Unicode.ParseResult.emptyInput!enumelt: bb65, case #Unicode.ParseResult.error!enumelt.1: bb59 // id: %466

bb59:                                             // Preds: bb58
  %467 = builtin "int_expect_Int1"(%47 : $Builtin.Int1, %62 : $Builtin.Int1) : $Builtin.Int1 // user: %468
  cond_br %467, bb61, bb60                        // id: %468

bb60:                                             // Preds: bb59
  br bb66(%62 : $Builtin.Int1)                    // id: %469

bb61:                                             // Preds: bb59
  %470 = integer_literal $Builtin.Int32, 16       // user: %480
  %471 = integer_literal $Builtin.Int8, 16        // users: %481, %474
  %472 = integer_literal $Builtin.Int32, 65533    // user: %474
  %473 = integer_literal $Builtin.Word, 1         // user: %486
  br bb62(%472 : $Builtin.Int32, %471 : $Builtin.Int8, %65 : $Builtin.RawPointer) // id: %474

// %475                                           // users: %480, %478
// %476                                           // user: %481
// %477                                           // user: %484
bb62(%475 : $Builtin.Int32, %476 : $Builtin.Int8, %477 : $Builtin.RawPointer): // Preds: bb63 bb61
  %478 = builtin "zextOrBitCast_Int32_Int64"(%475 : $Builtin.Int32) : $Builtin.Int64 // user: %479
  %479 = builtin "truncOrBitCast_Int64_Int16"(%478 : $Builtin.Int64) : $Builtin.Int16 // user: %483
  %480 = builtin "lshr_Int32"(%475 : $Builtin.Int32, %470 : $Builtin.Int32) : $Builtin.Int32 // user: %490
  %481 = builtin "usub_with_overflow_Int8"(%476 : $Builtin.Int8, %471 : $Builtin.Int8, %58 : $Builtin.Int1) : $(Builtin.Int8, Builtin.Int1) // user: %482
  %482 = tuple_extract %481 : $(Builtin.Int8, Builtin.Int1), 0 // users: %490, %488
  %483 = struct $UInt16 (%479 : $Builtin.Int16)   // user: %485
  %484 = pointer_to_address %477 : $Builtin.RawPointer to [strict] $*UInt16 // users: %486, %485
  store %483 to %484 : $*UInt16                   // id: %485
  %486 = index_addr %484 : $*UInt16, %473 : $Builtin.Word // user: %487
  %487 = address_to_pointer %486 : $*UInt16 to $Builtin.RawPointer // users: %491, %490
  %488 = builtin "cmp_eq_Int8"(%482 : $Builtin.Int8, %52 : $Builtin.Int8) : $Builtin.Int1 // user: %489
  cond_br %488, bb64, bb63                        // id: %489

bb63:                                             // Preds: bb62
  br bb62(%480 : $Builtin.Int32, %482 : $Builtin.Int8, %487 : $Builtin.RawPointer) // id: %490

bb64:                                             // Preds: bb62
  br bb7(%62 : $Builtin.Int1, %487 : $Builtin.RawPointer) // id: %491

bb65:                                             // Preds: bb58
  br bb66(%64 : $Builtin.Int1)                    // id: %492

// %493                                           // user: %515
bb66(%493 : $Builtin.Int1):                       // Preds: bb65 bb60
  dealloc_stack %50 : $*Unicode.UTF8.ForwardParser // id: %494
  dealloc_stack %48 : $*Optional<UnsafePointer<UInt8>> // id: %495
  %496 = init_existential_ref %28 : $_SwiftStringStorage<UInt16> : $_SwiftStringStorage<UInt16>, $AnyObject // users: %505, %497
  %497 = unchecked_trivial_bit_cast %496 : $AnyObject to $UInt // user: %499
  %498 = integer_literal $Builtin.Int64, 72057594037927935 // user: %500
  %499 = struct_extract %497 : $UInt, #UInt._value // user: %500
  %500 = builtin "and_Int64"(%499 : $Builtin.Int64, %498 : $Builtin.Int64) : $Builtin.Int64 // user: %502
  %501 = integer_literal $Builtin.Int64, 1152921504606846976 // user: %502
  %502 = builtin "or_Int64"(%500 : $Builtin.Int64, %501 : $Builtin.Int64) : $Builtin.Int64 // user: %503
  %503 = struct $UInt (%502 : $Builtin.Int64)     // user: %504
  %504 = unchecked_bitwise_cast %503 : $UInt to $Builtin.BridgeObject // users: %512, %506
  fix_lifetime %496 : $AnyObject                  // id: %505
  %506 = struct $_StringObject (%504 : $Builtin.BridgeObject) // user: %510
  %507 = struct_element_addr %45 : $*Int, #Int._value // user: %508
  %508 = load %507 : $*Builtin.Int64              // user: %509
  %509 = struct $UInt (%508 : $Builtin.Int64)     // user: %510
  %510 = struct $_StringGuts (%506 : $_StringObject, %509 : $UInt) // user: %511
  %511 = struct $String (%510 : $_StringGuts)     // user: %514
  strong_retain %504 : $Builtin.BridgeObject      // id: %512
  strong_release %28 : $_SwiftStringStorage<UInt16> // id: %513
  %514 = enum $Optional<String>, #Optional.some!enumelt.1, %511 : $String // user: %515
  br bb158(%514 : $Optional<String>, %493 : $Builtin.Int1) // id: %515

bb67:                                             // Preds: bb58
  %516 = unchecked_enum_data %464 : $Unicode.ParseResult<_ValidUTF8Buffer<UInt32>>, #Unicode.ParseResult.valid!enumelt.1 // users: %677, %517
  %517 = struct_extract %516 : $_ValidUTF8Buffer<UInt32>, #_ValidUTF8Buffer._biasedBits // user: %518
  %518 = struct_extract %517 : $UInt32, #UInt32._value // users: %802, %722, %708, %607, %592, %572, %547, %532
  %519 = metatype $@thick Unicode.UTF8.Type       // users: %525, %521, %520
  %520 = init_existential_metatype %519 : $@thick Unicode.UTF8.Type, $@thick Any.Type // user: %522
  %521 = init_existential_metatype %519 : $@thick Unicode.UTF8.Type, $@thick Any.Type // user: %522
  %522 = builtin "is_same_metatype"(%520 : $@thick Any.Type, %521 : $@thick Any.Type) : $Builtin.Int1 // user: %523
  %523 = builtin "int_expect_Int1"(%522 : $Builtin.Int1, %62 : $Builtin.Int1) : $Builtin.Int1 // user: %524
  cond_br %523, bb83, bb68                        // id: %524

bb68:                                             // Preds: bb67
  %525 = init_existential_metatype %519 : $@thick Unicode.UTF8.Type, $@thick Any.Type // user: %528
  %526 = metatype $@thick Unicode.UTF16.Type      // user: %527
  %527 = init_existential_metatype %526 : $@thick Unicode.UTF16.Type, $@thick Any.Type // user: %528
  %528 = builtin "is_same_metatype"(%525 : $@thick Any.Type, %527 : $@thick Any.Type) : $Builtin.Int1 // user: %529
  %529 = builtin "int_expect_Int1"(%528 : $Builtin.Int1, %62 : $Builtin.Int1) : $Builtin.Int1 // user: %530
  cond_br %529, bb79, bb69                        // id: %530

bb69:                                             // Preds: bb68
  %531 = integer_literal $Builtin.Int64, 4        // user: %536
  %532 = builtin "int_ctlz_Int32"(%518 : $Builtin.Int32, %58 : $Builtin.Int1) : $Builtin.Int32 // user: %533
  %533 = builtin "zextOrBitCast_Int32_Int64"(%532 : $Builtin.Int32) : $Builtin.Int64 // user: %535
  %534 = integer_literal $Builtin.Int64, 3        // users: %544, %535
  %535 = builtin "ashr_Int64"(%533 : $Builtin.Int64, %534 : $Builtin.Int64) : $Builtin.Int64 // user: %536
  %536 = builtin "ssub_with_overflow_Int64"(%531 : $Builtin.Int64, %535 : $Builtin.Int64, %58 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %537
  %537 = tuple_extract %536 : $(Builtin.Int64, Builtin.Int1), 0 // users: %544, %542, %539
  %538 = integer_literal $Builtin.Int64, 1        // user: %539
  %539 = builtin "cmp_eq_Int64"(%537 : $Builtin.Int64, %538 : $Builtin.Int64) : $Builtin.Int1 // user: %540
  cond_br %539, bb75, bb70                        // id: %540

bb70:                                             // Preds: bb69
  %541 = integer_literal $Builtin.Int64, 2        // user: %542
  %542 = builtin "cmp_eq_Int64"(%537 : $Builtin.Int64, %541 : $Builtin.Int64) : $Builtin.Int1 // user: %543
  cond_br %542, bb74, bb71                        // id: %543

bb71:                                             // Preds: bb70
  %544 = builtin "cmp_eq_Int64"(%537 : $Builtin.Int64, %534 : $Builtin.Int64) : $Builtin.Int1 // user: %545
  cond_br %544, bb73, bb72                        // id: %545

bb72:                                             // Preds: bb71
  %546 = integer_literal $Builtin.Int32, 16843009 // user: %547
  %547 = builtin "usub_with_overflow_Int32"(%518 : $Builtin.Int32, %546 : $Builtin.Int32, %58 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // user: %548
  %548 = tuple_extract %547 : $(Builtin.Int32, Builtin.Int1), 0 // users: %564, %559, %554, %550
  %549 = integer_literal $Builtin.Int32, 1056964608 // user: %550
  %550 = builtin "and_Int32"(%548 : $Builtin.Int32, %549 : $Builtin.Int32) : $Builtin.Int32 // user: %552
  %551 = integer_literal $Builtin.Int32, 24       // user: %552
  %552 = builtin "lshr_Int32"(%550 : $Builtin.Int32, %551 : $Builtin.Int32) : $Builtin.Int32 // user: %557
  %553 = integer_literal $Builtin.Int32, 4128768  // user: %554
  %554 = builtin "and_Int32"(%548 : $Builtin.Int32, %553 : $Builtin.Int32) : $Builtin.Int32 // user: %556
  %555 = integer_literal $Builtin.Int32, 10       // user: %556
  %556 = builtin "lshr_Int32"(%554 : $Builtin.Int32, %555 : $Builtin.Int32) : $Builtin.Int32 // user: %557
  %557 = builtin "or_Int32"(%552 : $Builtin.Int32, %556 : $Builtin.Int32) : $Builtin.Int32 // user: %562
  %558 = integer_literal $Builtin.Int32, 16128    // user: %559
  %559 = builtin "and_Int32"(%548 : $Builtin.Int32, %558 : $Builtin.Int32) : $Builtin.Int32 // user: %561
  %560 = integer_literal $Builtin.Int32, 4        // user: %561
  %561 = builtin "shl_Int32"(%559 : $Builtin.Int32, %560 : $Builtin.Int32) : $Builtin.Int32 // user: %562
  %562 = builtin "or_Int32"(%557 : $Builtin.Int32, %561 : $Builtin.Int32) : $Builtin.Int32 // user: %567
  %563 = integer_literal $Builtin.Int32, 7        // user: %564
  %564 = builtin "and_Int32"(%548 : $Builtin.Int32, %563 : $Builtin.Int32) : $Builtin.Int32 // user: %566
  %565 = integer_literal $Builtin.Int32, 18       // user: %566
  %566 = builtin "shl_Int32"(%564 : $Builtin.Int32, %565 : $Builtin.Int32) : $Builtin.Int32 // user: %567
  %567 = builtin "or_Int32"(%562 : $Builtin.Int32, %566 : $Builtin.Int32) : $Builtin.Int32 // user: %568
  %568 = struct $UInt32 (%567 : $Builtin.Int32)   // user: %569
  %569 = struct $Unicode.Scalar (%568 : $UInt32)  // user: %570
  br bb76(%569 : $Unicode.Scalar)                 // id: %570

bb73:                                             // Preds: bb71
  %571 = integer_literal $Builtin.Int32, 65793    // user: %572
  %572 = builtin "usub_with_overflow_Int32"(%518 : $Builtin.Int32, %571 : $Builtin.Int32, %58 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // user: %573
  %573 = tuple_extract %572 : $(Builtin.Int32, Builtin.Int1), 0 // users: %584, %579, %575
  %574 = integer_literal $Builtin.Int32, 4128768  // user: %575
  %575 = builtin "and_Int32"(%573 : $Builtin.Int32, %574 : $Builtin.Int32) : $Builtin.Int32 // user: %577
  %576 = integer_literal $Builtin.Int32, 16       // user: %577
  %577 = builtin "lshr_Int32"(%575 : $Builtin.Int32, %576 : $Builtin.Int32) : $Builtin.Int32 // user: %582
  %578 = integer_literal $Builtin.Int32, 16128    // user: %579
  %579 = builtin "and_Int32"(%573 : $Builtin.Int32, %578 : $Builtin.Int32) : $Builtin.Int32 // user: %581
  %580 = integer_literal $Builtin.Int32, 2        // user: %581
  %581 = builtin "lshr_Int32"(%579 : $Builtin.Int32, %580 : $Builtin.Int32) : $Builtin.Int32 // user: %582
  %582 = builtin "or_Int32"(%577 : $Builtin.Int32, %581 : $Builtin.Int32) : $Builtin.Int32 // user: %587
  %583 = integer_literal $Builtin.Int32, 15       // user: %584
  %584 = builtin "and_Int32"(%573 : $Builtin.Int32, %583 : $Builtin.Int32) : $Builtin.Int32 // user: %586
  %585 = integer_literal $Builtin.Int32, 12       // user: %586
  %586 = builtin "shl_Int32"(%584 : $Builtin.Int32, %585 : $Builtin.Int32) : $Builtin.Int32 // user: %587
  %587 = builtin "or_Int32"(%582 : $Builtin.Int32, %586 : $Builtin.Int32) : $Builtin.Int32 // user: %588
  %588 = struct $UInt32 (%587 : $Builtin.Int32)   // user: %589
  %589 = struct $Unicode.Scalar (%588 : $UInt32)  // user: %590
  br bb76(%589 : $Unicode.Scalar)                 // id: %590

bb74:                                             // Preds: bb70
  %591 = integer_literal $Builtin.Int32, 257      // user: %592
  %592 = builtin "usub_with_overflow_Int32"(%518 : $Builtin.Int32, %591 : $Builtin.Int32, %58 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // user: %593
  %593 = tuple_extract %592 : $(Builtin.Int32, Builtin.Int1), 0 // users: %599, %595
  %594 = integer_literal $Builtin.Int32, 16128    // user: %595
  %595 = builtin "and_Int32"(%593 : $Builtin.Int32, %594 : $Builtin.Int32) : $Builtin.Int32 // user: %597
  %596 = integer_literal $Builtin.Int32, 8        // user: %597
  %597 = builtin "lshr_Int32"(%595 : $Builtin.Int32, %596 : $Builtin.Int32) : $Builtin.Int32 // user: %602
  %598 = integer_literal $Builtin.Int32, 31       // user: %599
  %599 = builtin "and_Int32"(%593 : $Builtin.Int32, %598 : $Builtin.Int32) : $Builtin.Int32 // user: %601
  %600 = integer_literal $Builtin.Int32, 6        // user: %601
  %601 = builtin "shl_Int32"(%599 : $Builtin.Int32, %600 : $Builtin.Int32) : $Builtin.Int32 // user: %602
  %602 = builtin "or_Int32"(%597 : $Builtin.Int32, %601 : $Builtin.Int32) : $Builtin.Int32 // user: %603
  %603 = struct $UInt32 (%602 : $Builtin.Int32)   // user: %604
  %604 = struct $Unicode.Scalar (%603 : $UInt32)  // user: %605
  br bb76(%604 : $Unicode.Scalar)                 // id: %605

bb75:                                             // Preds: bb69
  %606 = integer_literal $Builtin.Int32, 1        // user: %607
  %607 = builtin "usub_with_overflow_Int32"(%518 : $Builtin.Int32, %606 : $Builtin.Int32, %58 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // user: %608
  %608 = tuple_extract %607 : $(Builtin.Int32, Builtin.Int1), 0 // user: %609
  %609 = struct $UInt32 (%608 : $Builtin.Int32)   // user: %610
  %610 = struct $Unicode.Scalar (%609 : $UInt32)  // user: %611
  br bb76(%610 : $Unicode.Scalar)                 // id: %611

// %612                                           // user: %613
bb76(%612 : $Unicode.Scalar):                     // Preds: bb75 bb74 bb73 bb72
  %613 = struct_extract %612 : $Unicode.Scalar, #Unicode.Scalar._value // users: %648, %615
  %614 = integer_literal $Builtin.Int32, 65536    // users: %619, %616
  %615 = struct_extract %613 : $UInt32, #UInt32._value // users: %619, %616
  %616 = builtin "cmp_ult_Int32"(%615 : $Builtin.Int32, %614 : $Builtin.Int32) : $Builtin.Int1 // user: %617
  %617 = builtin "int_expect_Int1"(%616 : $Builtin.Int1, %62 : $Builtin.Int1) : $Builtin.Int1 // user: %618
  cond_br %617, bb78, bb77                        // id: %618

bb77:                                             // Preds: bb76
  %619 = builtin "usub_with_overflow_Int32"(%615 : $Builtin.Int32, %614 : $Builtin.Int32, %62 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // users: %621, %620
  %620 = tuple_extract %619 : $(Builtin.Int32, Builtin.Int1), 0 // users: %634, %625
  %621 = tuple_extract %619 : $(Builtin.Int32, Builtin.Int1), 1 // user: %622
  cond_fail %621 : $Builtin.Int1                  // id: %622
  %623 = integer_literal $Builtin.Int32, 56320    // user: %626
  %624 = integer_literal $Builtin.Int32, 1023     // users: %635, %625
  %625 = builtin "and_Int32"(%620 : $Builtin.Int32, %624 : $Builtin.Int32) : $Builtin.Int32 // user: %626
  %626 = builtin "uadd_with_overflow_Int32"(%623 : $Builtin.Int32, %625 : $Builtin.Int32, %62 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // users: %628, %627
  %627 = tuple_extract %626 : $(Builtin.Int32, Builtin.Int1), 0 // user: %631
  %628 = tuple_extract %626 : $(Builtin.Int32, Builtin.Int1), 1 // user: %629
  cond_fail %628 : $Builtin.Int1                  // id: %629
  %630 = integer_literal $Builtin.Int32, 16       // user: %631
  %631 = builtin "shl_Int32"(%627 : $Builtin.Int32, %630 : $Builtin.Int32) : $Builtin.Int32 // user: %640
  %632 = integer_literal $Builtin.Int32, 55296    // user: %636
  %633 = integer_literal $Builtin.Int32, 10       // user: %634
  %634 = builtin "lshr_Int32"(%620 : $Builtin.Int32, %633 : $Builtin.Int32) : $Builtin.Int32 // user: %635
  %635 = builtin "and_Int32"(%634 : $Builtin.Int32, %624 : $Builtin.Int32) : $Builtin.Int32 // user: %636
  %636 = builtin "uadd_with_overflow_Int32"(%632 : $Builtin.Int32, %635 : $Builtin.Int32, %62 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // users: %638, %637
  %637 = tuple_extract %636 : $(Builtin.Int32, Builtin.Int1), 0 // user: %640
  %638 = tuple_extract %636 : $(Builtin.Int32, Builtin.Int1), 1 // user: %639
  cond_fail %638 : $Builtin.Int1                  // id: %639
  %640 = builtin "or_Int32"(%631 : $Builtin.Int32, %637 : $Builtin.Int32) : $Builtin.Int32 // user: %642
  %641 = integer_literal $Builtin.Int8, 32        // user: %643
  %642 = struct $UInt32 (%640 : $Builtin.Int32)   // user: %644
  %643 = struct $UInt8 (%641 : $Builtin.Int8)     // user: %644
  %644 = struct $_UIntBuffer<UInt32, UInt16> (%642 : $UInt32, %643 : $UInt8) // user: %645
  br bb95(%644 : $_UIntBuffer<UInt32, UInt16>)    // id: %645

bb78:                                             // Preds: bb76
  %646 = integer_literal $Builtin.Int8, 16        // user: %647
  %647 = struct $UInt8 (%646 : $Builtin.Int8)     // user: %648
  %648 = struct $_UIntBuffer<UInt32, UInt16> (%613 : $UInt32, %647 : $UInt8) // user: %649
  br bb95(%648 : $_UIntBuffer<UInt32, UInt16>)    // id: %649

bb79:                                             // Preds: bb68
  %650 = string_literal utf8 "Can't unsafeBitCast between types of different sizes" // user: %652
  %651 = integer_literal $Builtin.Word, 52        // user: %654
  %652 = builtin "ptrtoint_Word"(%650 : $Builtin.RawPointer) : $Builtin.Word // user: %654
  %653 = integer_literal $Builtin.Int8, 2         // users: %672, %658, %654
  %654 = struct $StaticString (%652 : $Builtin.Word, %651 : $Builtin.Word, %653 : $Builtin.Int8) // user: %674
  %655 = string_literal utf8 "/Users/buildnode/jenkins/workspace/oss-swift-package-osx/swift/stdlib/public/core/Builtin.swift" // user: %657
  %656 = integer_literal $Builtin.Word, 95        // user: %658
  %657 = builtin "ptrtoint_Word"(%655 : $Builtin.RawPointer) : $Builtin.Word // user: %658
  %658 = struct $StaticString (%657 : $Builtin.Word, %656 : $Builtin.Word, %653 : $Builtin.Int8) // user: %674
  %659 = integer_literal $Builtin.Int64, 87       // user: %660
  %660 = struct $UInt (%659 : $Builtin.Int64)     // user: %674
  br bb80                                         // id: %661

bb80:                                             // Preds: bb79
  %662 = metatype $@thick _ValidUTF8Buffer<UInt32>.Type // user: %663
  %663 = builtin "sizeof"<_ValidUTF8Buffer<UInt32>>(%662 : $@thick _ValidUTF8Buffer<UInt32>.Type) : $Builtin.Word // user: %666
  %664 = metatype $@thick _UIntBuffer<UInt32, UInt16>.Type // user: %665
  %665 = builtin "sizeof"<_UIntBuffer<UInt32, UInt16>>(%664 : $@thick _UIntBuffer<UInt32, UInt16>.Type) : $Builtin.Word // user: %666
  %666 = builtin "cmp_eq_Word"(%663 : $Builtin.Word, %665 : $Builtin.Word) : $Builtin.Int1 // user: %667
  %667 = builtin "int_expect_Int1"(%666 : $Builtin.Int1, %62 : $Builtin.Int1) : $Builtin.Int1 // user: %668
  cond_br %667, bb82, bb81                        // id: %668

bb81:                                             // Preds: bb80
  %669 = string_literal utf8 "Fatal error"        // user: %671
  %670 = integer_literal $Builtin.Word, 11        // user: %672
  %671 = builtin "ptrtoint_Word"(%669 : $Builtin.RawPointer) : $Builtin.Word // user: %672
  %672 = struct $StaticString (%671 : $Builtin.Word, %670 : $Builtin.Word, %653 : $Builtin.Int8) // user: %674
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %673 = function_ref @$Ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %674
  %674 = apply %673(%672, %654, %658, %660, %53) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %675

bb82:                                             // Preds: bb80
  %676 = alloc_stack $_ValidUTF8Buffer<UInt32>    // users: %680, %678, %677
  store %516 to %676 : $*_ValidUTF8Buffer<UInt32> // id: %677
  %678 = unchecked_addr_cast %676 : $*_ValidUTF8Buffer<UInt32> to $*_UIntBuffer<UInt32, UInt16> // user: %679
  %679 = load %678 : $*_UIntBuffer<UInt32, UInt16> // user: %681
  dealloc_stack %676 : $*_ValidUTF8Buffer<UInt32> // id: %680
  br bb95(%679 : $_UIntBuffer<UInt32, UInt16>)    // id: %681

bb83:                                             // Preds: bb67
  %682 = metatype $@thick _ValidUTF8Buffer<UInt32>.Type // users: %696, %695
  %683 = string_literal utf8 "_identityCast to wrong type" // user: %685
  %684 = integer_literal $Builtin.Word, 27        // user: %687
  %685 = builtin "ptrtoint_Word"(%683 : $Builtin.RawPointer) : $Builtin.Word // user: %687
  %686 = integer_literal $Builtin.Int8, 2         // users: %703, %691, %687
  %687 = struct $StaticString (%685 : $Builtin.Word, %684 : $Builtin.Word, %686 : $Builtin.Int8) // user: %705
  %688 = string_literal utf8 "/Users/buildnode/jenkins/workspace/oss-swift-package-osx/swift/stdlib/public/core/Builtin.swift" // user: %690
  %689 = integer_literal $Builtin.Word, 95        // user: %691
  %690 = builtin "ptrtoint_Word"(%688 : $Builtin.RawPointer) : $Builtin.Word // user: %691
  %691 = struct $StaticString (%690 : $Builtin.Word, %689 : $Builtin.Word, %686 : $Builtin.Int8) // user: %705
  %692 = integer_literal $Builtin.Int64, 101      // user: %693
  %693 = struct $UInt (%692 : $Builtin.Int64)     // user: %705
  br bb84                                         // id: %694

bb84:                                             // Preds: bb83
  %695 = init_existential_metatype %682 : $@thick _ValidUTF8Buffer<UInt32>.Type, $@thick Any.Type // user: %697
  %696 = init_existential_metatype %682 : $@thick _ValidUTF8Buffer<UInt32>.Type, $@thick Any.Type // user: %697
  %697 = builtin "is_same_metatype"(%695 : $@thick Any.Type, %696 : $@thick Any.Type) : $Builtin.Int1 // user: %698
  %698 = builtin "int_expect_Int1"(%697 : $Builtin.Int1, %62 : $Builtin.Int1) : $Builtin.Int1 // user: %699
  cond_br %698, bb86, bb85                        // id: %699

bb85:                                             // Preds: bb84
  %700 = string_literal utf8 "Fatal error"        // user: %702
  %701 = integer_literal $Builtin.Word, 11        // user: %703
  %702 = builtin "ptrtoint_Word"(%700 : $Builtin.RawPointer) : $Builtin.Word // user: %703
  %703 = struct $StaticString (%702 : $Builtin.Word, %701 : $Builtin.Word, %686 : $Builtin.Int8) // user: %705
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %704 = function_ref @$Ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %705
  %705 = apply %704(%703, %687, %691, %693, %53) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %706

bb86:                                             // Preds: bb84
  %707 = integer_literal $Builtin.Int64, 4        // user: %712
  %708 = builtin "int_ctlz_Int32"(%518 : $Builtin.Int32, %58 : $Builtin.Int1) : $Builtin.Int32 // user: %709
  %709 = builtin "zextOrBitCast_Int32_Int64"(%708 : $Builtin.Int32) : $Builtin.Int64 // user: %711
  %710 = integer_literal $Builtin.Int64, 3        // user: %711
  %711 = builtin "ashr_Int64"(%709 : $Builtin.Int64, %710 : $Builtin.Int64) : $Builtin.Int64 // user: %712
  %712 = builtin "ssub_with_overflow_Int64"(%707 : $Builtin.Int64, %711 : $Builtin.Int64, %58 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %713
  %713 = tuple_extract %712 : $(Builtin.Int64, Builtin.Int1), 0 // user: %715
  %714 = integer_literal $Builtin.Int64, 1        // users: %740, %731, %715
  %715 = builtin "ssub_with_overflow_Int64"(%713 : $Builtin.Int64, %714 : $Builtin.Int64, %58 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %716
  %716 = tuple_extract %715 : $(Builtin.Int64, Builtin.Int1), 0 // users: %731, %718
  %717 = integer_literal $Builtin.Int64, 0        // users: %742, %733, %718
  %718 = builtin "cmp_eq_Int64"(%716 : $Builtin.Int64, %717 : $Builtin.Int64) : $Builtin.Int1 // user: %719
  %719 = builtin "int_expect_Int1"(%718 : $Builtin.Int1, %62 : $Builtin.Int1) : $Builtin.Int1 // user: %720
  cond_br %719, bb94, bb87                        // id: %720

bb87:                                             // Preds: bb86
  %721 = integer_literal $Builtin.Int32, 16843009 // user: %722
  %722 = builtin "usub_with_overflow_Int32"(%518 : $Builtin.Int32, %721 : $Builtin.Int32, %58 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // user: %723
  %723 = tuple_extract %722 : $(Builtin.Int32, Builtin.Int1), 0 // users: %727, %725
  %724 = integer_literal $Builtin.Int32, 6        // users: %745, %736, %725
  %725 = builtin "shl_Int32"(%723 : $Builtin.Int32, %724 : $Builtin.Int32) : $Builtin.Int32 // user: %730
  %726 = integer_literal $Builtin.Int32, 8        // users: %746, %737, %727
  %727 = builtin "lshr_Int32"(%723 : $Builtin.Int32, %726 : $Builtin.Int32) : $Builtin.Int32 // users: %737, %729
  %728 = integer_literal $Builtin.Int32, 63       // users: %747, %738, %729
  %729 = builtin "and_Int32"(%727 : $Builtin.Int32, %728 : $Builtin.Int32) : $Builtin.Int32 // user: %730
  %730 = builtin "or_Int32"(%725 : $Builtin.Int32, %729 : $Builtin.Int32) : $Builtin.Int32 // users: %795, %736
  %731 = builtin "ssub_with_overflow_Int64"(%716 : $Builtin.Int64, %714 : $Builtin.Int64, %58 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %732
  %732 = tuple_extract %731 : $(Builtin.Int64, Builtin.Int1), 0 // users: %740, %733
  %733 = builtin "cmp_eq_Int64"(%732 : $Builtin.Int64, %717 : $Builtin.Int64) : $Builtin.Int1 // user: %734
  %734 = builtin "int_expect_Int1"(%733 : $Builtin.Int1, %62 : $Builtin.Int1) : $Builtin.Int1 // user: %735
  cond_br %734, bb93, bb88                        // id: %735

bb88:                                             // Preds: bb87
  %736 = builtin "shl_Int32"(%730 : $Builtin.Int32, %724 : $Builtin.Int32) : $Builtin.Int32 // user: %739
  %737 = builtin "lshr_Int32"(%727 : $Builtin.Int32, %726 : $Builtin.Int32) : $Builtin.Int32 // users: %746, %738
  %738 = builtin "and_Int32"(%737 : $Builtin.Int32, %728 : $Builtin.Int32) : $Builtin.Int32 // user: %739
  %739 = builtin "or_Int32"(%736 : $Builtin.Int32, %738 : $Builtin.Int32) : $Builtin.Int32 // users: %788, %745
  %740 = builtin "ssub_with_overflow_Int64"(%732 : $Builtin.Int64, %714 : $Builtin.Int64, %58 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %741
  %741 = tuple_extract %740 : $(Builtin.Int64, Builtin.Int1), 0 // user: %742
  %742 = builtin "cmp_eq_Int64"(%741 : $Builtin.Int64, %717 : $Builtin.Int64) : $Builtin.Int1 // user: %743
  %743 = builtin "int_expect_Int1"(%742 : $Builtin.Int1, %62 : $Builtin.Int1) : $Builtin.Int1 // user: %744
  cond_br %743, bb92, bb89                        // id: %744

bb89:                                             // Preds: bb88
  %745 = builtin "shl_Int32"(%739 : $Builtin.Int32, %724 : $Builtin.Int32) : $Builtin.Int32 // user: %748
  %746 = builtin "lshr_Int32"(%737 : $Builtin.Int32, %726 : $Builtin.Int32) : $Builtin.Int32 // user: %747
  %747 = builtin "and_Int32"(%746 : $Builtin.Int32, %728 : $Builtin.Int32) : $Builtin.Int32 // user: %748
  %748 = builtin "or_Int32"(%745 : $Builtin.Int32, %747 : $Builtin.Int32) : $Builtin.Int32 // user: %750
  %749 = integer_literal $Builtin.Int32, 2097151  // user: %750
  %750 = builtin "and_Int32"(%748 : $Builtin.Int32, %749 : $Builtin.Int32) : $Builtin.Int32 // users: %756, %753, %751
  %751 = struct $UInt32 (%750 : $Builtin.Int32)   // user: %785
  %752 = integer_literal $Builtin.Int32, 65536    // users: %756, %753
  %753 = builtin "cmp_ult_Int32"(%750 : $Builtin.Int32, %752 : $Builtin.Int32) : $Builtin.Int1 // user: %754
  %754 = builtin "int_expect_Int1"(%753 : $Builtin.Int1, %62 : $Builtin.Int1) : $Builtin.Int1 // user: %755
  cond_br %754, bb91, bb90                        // id: %755

bb90:                                             // Preds: bb89
  %756 = builtin "usub_with_overflow_Int32"(%750 : $Builtin.Int32, %752 : $Builtin.Int32, %62 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // users: %758, %757
  %757 = tuple_extract %756 : $(Builtin.Int32, Builtin.Int1), 0 // users: %771, %762
  %758 = tuple_extract %756 : $(Builtin.Int32, Builtin.Int1), 1 // user: %759
  cond_fail %758 : $Builtin.Int1                  // id: %759
  %760 = integer_literal $Builtin.Int32, 56320    // user: %763
  %761 = integer_literal $Builtin.Int32, 1023     // users: %772, %762
  %762 = builtin "and_Int32"(%757 : $Builtin.Int32, %761 : $Builtin.Int32) : $Builtin.Int32 // user: %763
  %763 = builtin "uadd_with_overflow_Int32"(%760 : $Builtin.Int32, %762 : $Builtin.Int32, %62 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // users: %765, %764
  %764 = tuple_extract %763 : $(Builtin.Int32, Builtin.Int1), 0 // user: %768
  %765 = tuple_extract %763 : $(Builtin.Int32, Builtin.Int1), 1 // user: %766
  cond_fail %765 : $Builtin.Int1                  // id: %766
  %767 = integer_literal $Builtin.Int32, 16       // user: %768
  %768 = builtin "shl_Int32"(%764 : $Builtin.Int32, %767 : $Builtin.Int32) : $Builtin.Int32 // user: %777
  %769 = integer_literal $Builtin.Int32, 55296    // user: %773
  %770 = integer_literal $Builtin.Int32, 10       // user: %771
  %771 = builtin "lshr_Int32"(%757 : $Builtin.Int32, %770 : $Builtin.Int32) : $Builtin.Int32 // user: %772
  %772 = builtin "and_Int32"(%771 : $Builtin.Int32, %761 : $Builtin.Int32) : $Builtin.Int32 // user: %773
  %773 = builtin "uadd_with_overflow_Int32"(%769 : $Builtin.Int32, %772 : $Builtin.Int32, %62 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // users: %775, %774
  %774 = tuple_extract %773 : $(Builtin.Int32, Builtin.Int1), 0 // user: %777
  %775 = tuple_extract %773 : $(Builtin.Int32, Builtin.Int1), 1 // user: %776
  cond_fail %775 : $Builtin.Int1                  // id: %776
  %777 = builtin "or_Int32"(%768 : $Builtin.Int32, %774 : $Builtin.Int32) : $Builtin.Int32 // user: %779
  %778 = integer_literal $Builtin.Int8, 32        // user: %780
  %779 = struct $UInt32 (%777 : $Builtin.Int32)   // user: %781
  %780 = struct $UInt8 (%778 : $Builtin.Int8)     // user: %781
  %781 = struct $_UIntBuffer<UInt32, UInt16> (%779 : $UInt32, %780 : $UInt8) // user: %782
  br bb95(%781 : $_UIntBuffer<UInt32, UInt16>)    // id: %782

bb91:                                             // Preds: bb89
  %783 = integer_literal $Builtin.Int8, 16        // user: %784
  %784 = struct $UInt8 (%783 : $Builtin.Int8)     // user: %785
  %785 = struct $_UIntBuffer<UInt32, UInt16> (%751 : $UInt32, %784 : $UInt8) // user: %786
  br bb95(%785 : $_UIntBuffer<UInt32, UInt16>)    // id: %786

bb92:                                             // Preds: bb88
  %787 = integer_literal $Builtin.Int32, 65535    // user: %788
  %788 = builtin "and_Int32"(%739 : $Builtin.Int32, %787 : $Builtin.Int32) : $Builtin.Int32 // user: %790
  %789 = integer_literal $Builtin.Int8, 16        // user: %791
  %790 = struct $UInt32 (%788 : $Builtin.Int32)   // user: %792
  %791 = struct $UInt8 (%789 : $Builtin.Int8)     // user: %792
  %792 = struct $_UIntBuffer<UInt32, UInt16> (%790 : $UInt32, %791 : $UInt8) // user: %793
  br bb95(%792 : $_UIntBuffer<UInt32, UInt16>)    // id: %793

bb93:                                             // Preds: bb87
  %794 = integer_literal $Builtin.Int32, 2047     // user: %795
  %795 = builtin "and_Int32"(%730 : $Builtin.Int32, %794 : $Builtin.Int32) : $Builtin.Int32 // user: %797
  %796 = integer_literal $Builtin.Int8, 16        // user: %798
  %797 = struct $UInt32 (%795 : $Builtin.Int32)   // user: %799
  %798 = struct $UInt8 (%796 : $Builtin.Int8)     // user: %799
  %799 = struct $_UIntBuffer<UInt32, UInt16> (%797 : $UInt32, %798 : $UInt8) // user: %800
  br bb95(%799 : $_UIntBuffer<UInt32, UInt16>)    // id: %800

bb94:                                             // Preds: bb86
  %801 = integer_literal $Builtin.Int32, 1        // user: %802
  %802 = builtin "usub_with_overflow_Int32"(%518 : $Builtin.Int32, %801 : $Builtin.Int32, %58 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // user: %803
  %803 = tuple_extract %802 : $(Builtin.Int32, Builtin.Int1), 0 // user: %805
  %804 = integer_literal $Builtin.Int32, 127      // user: %805
  %805 = builtin "and_Int32"(%803 : $Builtin.Int32, %804 : $Builtin.Int32) : $Builtin.Int32 // user: %807
  %806 = integer_literal $Builtin.Int8, 16        // user: %808
  %807 = struct $UInt32 (%805 : $Builtin.Int32)   // user: %809
  %808 = struct $UInt8 (%806 : $Builtin.Int8)     // user: %809
  %809 = struct $_UIntBuffer<UInt32, UInt16> (%807 : $UInt32, %808 : $UInt8) // user: %810
  br bb95(%809 : $_UIntBuffer<UInt32, UInt16>)    // id: %810

// %811                                           // users: %814, %812
bb95(%811 : $_UIntBuffer<UInt32, UInt16>):        // Preds: bb94 bb93 bb92 bb91 bb90 bb82 bb78 bb77
  %812 = struct_extract %811 : $_UIntBuffer<UInt32, UInt16>, #_UIntBuffer._storage // user: %813
  %813 = struct_extract %812 : $UInt32, #UInt32._value // user: %821
  %814 = struct_extract %811 : $_UIntBuffer<UInt32, UInt16>, #_UIntBuffer._bitCount // user: %815
  %815 = struct_extract %814 : $UInt8, #UInt8._value // users: %821, %816
  %816 = builtin "cmp_eq_Int8"(%815 : $Builtin.Int8, %52 : $Builtin.Int8) : $Builtin.Int1 // user: %817
  cond_br %816, bb100, bb96                       // id: %817

bb96:                                             // Preds: bb95
  %818 = integer_literal $Builtin.Int32, 16       // user: %827
  %819 = integer_literal $Builtin.Int8, 16        // user: %828
  %820 = integer_literal $Builtin.Word, 1         // user: %833
  br bb97(%813 : $Builtin.Int32, %815 : $Builtin.Int8, %65 : $Builtin.RawPointer) // id: %821

// %822                                           // users: %827, %825
// %823                                           // user: %828
// %824                                           // user: %831
bb97(%822 : $Builtin.Int32, %823 : $Builtin.Int8, %824 : $Builtin.RawPointer): // Preds: bb98 bb96
  %825 = builtin "zextOrBitCast_Int32_Int64"(%822 : $Builtin.Int32) : $Builtin.Int64 // user: %826
  %826 = builtin "truncOrBitCast_Int64_Int16"(%825 : $Builtin.Int64) : $Builtin.Int16 // user: %830
  %827 = builtin "lshr_Int32"(%822 : $Builtin.Int32, %818 : $Builtin.Int32) : $Builtin.Int32 // user: %837
  %828 = builtin "usub_with_overflow_Int8"(%823 : $Builtin.Int8, %819 : $Builtin.Int8, %58 : $Builtin.Int1) : $(Builtin.Int8, Builtin.Int1) // user: %829
  %829 = tuple_extract %828 : $(Builtin.Int8, Builtin.Int1), 0 // users: %837, %835
  %830 = struct $UInt16 (%826 : $Builtin.Int16)   // user: %832
  %831 = pointer_to_address %824 : $Builtin.RawPointer to [strict] $*UInt16 // users: %833, %832
  store %830 to %831 : $*UInt16                   // id: %832
  %833 = index_addr %831 : $*UInt16, %820 : $Builtin.Word // user: %834
  %834 = address_to_pointer %833 : $*UInt16 to $Builtin.RawPointer // users: %838, %837
  %835 = builtin "cmp_eq_Int8"(%829 : $Builtin.Int8, %52 : $Builtin.Int8) : $Builtin.Int1 // user: %836
  cond_br %835, bb99, bb98                        // id: %836

bb98:                                             // Preds: bb97
  br bb97(%827 : $Builtin.Int32, %829 : $Builtin.Int8, %834 : $Builtin.RawPointer) // id: %837

bb99:                                             // Preds: bb97
  br bb101(%834 : $Builtin.RawPointer)            // id: %838

bb100:                                            // Preds: bb95
  br bb101(%65 : $Builtin.RawPointer)             // id: %839

// %840                                           // user: %841
bb101(%840 : $Builtin.RawPointer):                // Preds: bb100 bb99
  br bb7(%64 : $Builtin.Int1, %840 : $Builtin.RawPointer) // id: %841

bb102:                                            // Preds: bb5
  %842 = builtin "truncOrBitCast_Int64_Word"(%24 : $Builtin.Int64) : $Builtin.Word // user: %843
  %843 = alloc_ref [tail_elems $UInt8 * %842 : $Builtin.Word] $_SwiftStringStorage<UInt8> // users: %1301, %1286, %853, %852, %844
  %844 = ref_to_raw_pointer %843 : $_SwiftStringStorage<UInt8> to $Builtin.RawPointer // users: %850, %845
  %845 = struct $UnsafeRawPointer (%844 : $Builtin.RawPointer) // user: %847
  // function_ref _stdlib_malloc_size
  %846 = function_ref @_stdlib_malloc_size : $@convention(c) (UnsafeRawPointer) -> Int // user: %847
  %847 = apply %846(%845) : $@convention(c) (UnsafeRawPointer) -> Int // user: %848
  %848 = struct_extract %847 : $Int, #Int._value  // user: %849
  %849 = builtin "truncOrBitCast_Int64_Word"(%848 : $Builtin.Int64) : $Builtin.Word // user: %850
  %850 = index_raw_pointer %844 : $Builtin.RawPointer, %849 : $Builtin.Word // user: %851
  %851 = struct $UnsafeMutablePointer<UInt8> (%850 : $Builtin.RawPointer) // user: %857
  %852 = upcast %843 : $_SwiftStringStorage<UInt8> to $_SwiftRawStringStorage // users: %860, %858
  %853 = ref_tail_addr %843 : $_SwiftStringStorage<UInt8>, $UInt8 // user: %854
  %854 = address_to_pointer %853 : $*UInt8 to $Builtin.RawPointer // users: %877, %855
  %855 = struct $UnsafeMutablePointer<UInt8> (%854 : $Builtin.RawPointer) // user: %857
  // function_ref specialized UnsafeMutablePointer.distance(to:)
  %856 = function_ref @$SSp8distance2toSiSpyxG_tFs5UInt8V_Tgq5 : $@convention(method) (UnsafeMutablePointer<UInt8>, UnsafeMutablePointer<UInt8>) -> Int // user: %857
  %857 = apply %856(%851, %855) : $@convention(method) (UnsafeMutablePointer<UInt8>, UnsafeMutablePointer<UInt8>) -> Int // user: %859
  %858 = ref_element_addr %852 : $_SwiftRawStringStorage, #_SwiftRawStringStorage.capacity // user: %859
  store %857 to %858 : $*Int                      // id: %859
  %860 = ref_element_addr %852 : $_SwiftRawStringStorage, #_SwiftRawStringStorage.count // users: %1295, %861
  store %16 to %860 : $*Int                       // id: %861
  %862 = alloc_stack $Optional<UnsafePointer<UInt8>> // users: %1285, %1039, %1004, %943, %908, %863
  store %5 to %862 : $*Optional<UnsafePointer<UInt8>> // id: %863
  %864 = alloc_stack $Unicode.UTF8.ForwardParser  // users: %1284, %1228, %1112, %1048, %956, %894, %873, %871
  %865 = integer_literal $Builtin.Int32, 0        // users: %1215, %1185, %1175, %867
  %866 = integer_literal $Builtin.Int8, 0         // users: %1110, %954, %892, %882, %868
  %867 = struct $UInt32 (%865 : $Builtin.Int32)   // users: %1422, %1263, %1159, %1107, %1024, %928, %869
  %868 = struct $UInt8 (%866 : $Builtin.Int8)     // users: %896, %869
  %869 = struct $_UIntBuffer<UInt32, UInt8> (%867 : $UInt32, %868 : $UInt8) // user: %870
  %870 = struct $Unicode.UTF8.ForwardParser (%869 : $_UIntBuffer<UInt32, UInt8>) // user: %871
  store %870 to %864 : $*Unicode.UTF8.ForwardParser // id: %871
  %872 = integer_literal $Builtin.Int1, 0         // users: %1415, %1388, %1373, %1353, %1328, %1317, %1313, %1267, %1232, %1218, %1215, %1204, %1200, %1196, %1194, %1186, %1179, %1169, %1152, %1091, %1074, %999, %982, %900, %877
  %873 = struct_element_addr %864 : $*Unicode.UTF8.ForwardParser, #Unicode.UTF8.ForwardParser._buffer // users: %1228, %1048, %956, %894, %885, %874
  %874 = struct_element_addr %873 : $*_UIntBuffer<UInt32, UInt8>, #_UIntBuffer._bitCount // user: %875
  %875 = struct_element_addr %874 : $*UInt8, #UInt8._value // users: %1231, %1109, %1095, %881
  %876 = integer_literal $Builtin.Int1, -1        // users: %1281, %1237, %1189, %1182, %1172, %1068, %976, %883
  br bb103(%872 : $Builtin.Int1, %854 : $Builtin.RawPointer) // id: %877

// %878                                           // users: %1433, %1282
// %879                                           // user: %1428
bb103(%878 : $Builtin.Int1, %879 : $Builtin.RawPointer): // Preds: bb170 bb102
  %880 = alloc_stack $Unicode.ParseResult<_ValidUTF8Buffer<UInt32>> // users: %1279, %1278, %1276, %1273, %1265, %1256, %1253, %1249, %1247, %1239, %906, %898
  %881 = load %875 : $*Builtin.Int8               // user: %882
  %882 = builtin "cmp_eq_Int8"(%881 : $Builtin.Int8, %866 : $Builtin.Int8) : $Builtin.Int1 // user: %883
  %883 = builtin "int_expect_Int1"(%882 : $Builtin.Int1, %876 : $Builtin.Int1) : $Builtin.Int1 // user: %884
  cond_br %883, bb106, bb104                      // id: %884

bb104:                                            // Preds: bb103
  %885 = struct_element_addr %873 : $*_UIntBuffer<UInt32, UInt8>, #_UIntBuffer._storage // user: %886
  %886 = struct_element_addr %885 : $*UInt32, #UInt32._value // user: %887
  %887 = load %886 : $*Builtin.Int32              // user: %888
  %888 = builtin "zextOrBitCast_Int32_Int64"(%887 : $Builtin.Int32) : $Builtin.Int64 // user: %889
  %889 = builtin "truncOrBitCast_Int64_Int8"(%888 : $Builtin.Int64) : $Builtin.Int8 // users: %900, %891
  %890 = integer_literal $Builtin.Int8, -128      // user: %891
  %891 = builtin "and_Int8"(%889 : $Builtin.Int8, %890 : $Builtin.Int8) : $Builtin.Int8 // user: %892
  %892 = builtin "cmp_eq_Int8"(%891 : $Builtin.Int8, %866 : $Builtin.Int8) : $Builtin.Int1 // user: %893
  cond_br %892, bb105, bb118                      // id: %893

bb105:                                            // Preds: bb104
  %894 = mark_dependence %873 : $*_UIntBuffer<UInt32, UInt8> on %864 : $*Unicode.UTF8.ForwardParser // user: %897
  // function_ref specialized RangeReplaceableCollection.remove(at:)
  %895 = function_ref @$Ss26RangeReplaceableCollectionPsE6remove2at7ElementQz5IndexQz_tFs11_UIntBufferVys6UInt32Vs5UInt8VG_Tgq5 : $@convention(method) (_UIntBuffer<UInt32, UInt8>.Index, @inout _UIntBuffer<UInt32, UInt8>) -> UInt8 // user: %897
  %896 = struct $_UIntBuffer<UInt32, UInt8>.Index (%868 : $UInt8) // user: %897
  %897 = apply %895(%896, %894) : $@convention(method) (_UIntBuffer<UInt32, UInt8>.Index, @inout _UIntBuffer<UInt32, UInt8>) -> UInt8
  %898 = init_enum_data_addr %880 : $*Unicode.ParseResult<_ValidUTF8Buffer<UInt32>>, #Unicode.ParseResult.valid!enumelt.1 // user: %905
  %899 = integer_literal $Builtin.Int8, 1         // user: %900
  %900 = builtin "uadd_with_overflow_Int8"(%889 : $Builtin.Int8, %899 : $Builtin.Int8, %872 : $Builtin.Int1) : $(Builtin.Int8, Builtin.Int1) // user: %901
  %901 = tuple_extract %900 : $(Builtin.Int8, Builtin.Int1), 0 // user: %902
  %902 = builtin "zextOrBitCast_Int8_Int32"(%901 : $Builtin.Int8) : $Builtin.Int32 // user: %903
  %903 = struct $UInt32 (%902 : $Builtin.Int32)   // user: %904
  %904 = struct $_ValidUTF8Buffer<UInt32> (%903 : $UInt32) // user: %905
  store %904 to %898 : $*_ValidUTF8Buffer<UInt32> // id: %905
  inject_enum_addr %880 : $*Unicode.ParseResult<_ValidUTF8Buffer<UInt32>>, #Unicode.ParseResult.valid!enumelt.1 // id: %906
  br bb154                                        // id: %907

bb106:                                            // Preds: bb103
  %908 = load %862 : $*Optional<UnsafePointer<UInt8>> // users: %931, %909
  switch_enum %908 : $Optional<UnsafePointer<UInt8>>, case #Optional.some!enumelt.1: bb111, case #Optional.none!enumelt: bb107 // id: %909

bb107:                                            // Preds: bb106
  switch_enum %6 : $Optional<UnsafePointer<UInt8>>, case #Optional.none!enumelt: bb110, case #Optional.some!enumelt.1: bb108 // id: %910

bb108:                                            // Preds: bb107
  %911 = string_literal utf8 "/Users/buildnode/jenkins/workspace/oss-swift-package-osx/build/buildbot_osx/swift-macosx-x86_64/stdlib/public/core/8/UnsafeBufferPointer.swift" // user: %918
  %912 = integer_literal $Builtin.Word, 142       // user: %919
  %913 = string_literal utf8 "Unexpectedly found nil while unwrapping an Optional value" // user: %915
  %914 = integer_literal $Builtin.Word, 57        // user: %917
  %915 = builtin "ptrtoint_Word"(%913 : $Builtin.RawPointer) : $Builtin.Word // user: %917
  %916 = integer_literal $Builtin.Int8, 2         // users: %926, %919, %917
  %917 = struct $StaticString (%915 : $Builtin.Word, %914 : $Builtin.Word, %916 : $Builtin.Int8) // user: %928
  %918 = builtin "ptrtoint_Word"(%911 : $Builtin.RawPointer) : $Builtin.Word // user: %919
  %919 = struct $StaticString (%918 : $Builtin.Word, %912 : $Builtin.Word, %916 : $Builtin.Int8) // user: %928
  %920 = integer_literal $Builtin.Int64, 576      // user: %921
  %921 = struct $UInt (%920 : $Builtin.Int64)     // user: %928
  br bb109                                        // id: %922

bb109:                                            // Preds: bb108
  %923 = string_literal utf8 "Fatal error"        // user: %925
  %924 = integer_literal $Builtin.Word, 11        // user: %926
  %925 = builtin "ptrtoint_Word"(%923 : $Builtin.RawPointer) : $Builtin.Word // user: %926
  %926 = struct $StaticString (%925 : $Builtin.Word, %924 : $Builtin.Word, %916 : $Builtin.Int8) // user: %928
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %927 = function_ref @$Ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %928
  %928 = apply %927(%926, %917, %919, %921, %867) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %929

bb110:                                            // Preds: bb107
  br bb153                                        // id: %930

bb111:                                            // Preds: bb106
  %931 = unchecked_enum_data %908 : $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1 // users: %939, %935
  switch_enum %6 : $Optional<UnsafePointer<UInt8>>, case #Optional.some!enumelt.1: bb113, case #Optional.none!enumelt: bb112 // id: %932

bb112:                                            // Preds: bb111
  br bb114                                        // id: %933

bb113:                                            // Preds: bb111
  %934 = unchecked_enum_data %6 : $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1 // user: %936
  %935 = struct_extract %931 : $UnsafePointer<UInt8>, #UnsafePointer._rawValue // user: %937
  %936 = struct_extract %934 : $UnsafePointer<UInt8>, #UnsafePointer._rawValue // user: %937
  %937 = builtin "cmp_eq_RawPointer"(%935 : $Builtin.RawPointer, %936 : $Builtin.RawPointer) : $Builtin.Int1 // user: %938
  cond_br %937, bb153, bb114                      // id: %938

bb114:                                            // Preds: bb113 bb112
  %939 = struct_extract %931 : $UnsafePointer<UInt8>, #UnsafePointer._rawValue // user: %940
  %940 = pointer_to_address %939 : $Builtin.RawPointer to [strict] $*UInt8 // user: %941
  %941 = struct_element_addr %940 : $*UInt8, #UInt8._value // user: %942
  %942 = load %941 : $*Builtin.Int8               // users: %1267, %984, %953
  %943 = unchecked_take_enum_data_addr %862 : $*Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1 // users: %951, %944
  %944 = struct_element_addr %943 : $*UnsafePointer<UInt8>, #UnsafePointer._rawValue // user: %945
  %945 = load %944 : $*Builtin.RawPointer         // user: %947
  %946 = integer_literal $Builtin.Word, 1         // user: %948
  %947 = pointer_to_address %945 : $Builtin.RawPointer to [strict] $*UInt8 // user: %948
  %948 = index_addr %947 : $*UInt8, %946 : $Builtin.Word // user: %949
  %949 = address_to_pointer %948 : $*UInt8 to $Builtin.RawPointer // user: %950
  %950 = struct $UnsafePointer<UInt8> (%949 : $Builtin.RawPointer) // user: %951
  store %950 to %943 : $*UnsafePointer<UInt8>     // id: %951
  %952 = integer_literal $Builtin.Int8, -128      // user: %953
  %953 = builtin "and_Int8"(%942 : $Builtin.Int8, %952 : $Builtin.Int8) : $Builtin.Int8 // user: %954
  %954 = builtin "cmp_eq_Int8"(%953 : $Builtin.Int8, %866 : $Builtin.Int8) : $Builtin.Int1 // user: %955
  cond_br %954, bb152, bb115                      // id: %955

bb115:                                            // Preds: bb114
  %956 = mark_dependence %873 : $*_UIntBuffer<UInt32, UInt8> on %864 : $*Unicode.UTF8.ForwardParser // users: %992, %985, %969
  %957 = string_literal utf8 ""                   // user: %959
  %958 = integer_literal $Builtin.Word, 0         // user: %961
  %959 = builtin "ptrtoint_Word"(%957 : $Builtin.RawPointer) : $Builtin.Word // user: %961
  %960 = integer_literal $Builtin.Int8, 2         // users: %1261, %965, %961
  %961 = struct $StaticString (%959 : $Builtin.Word, %958 : $Builtin.Word, %960 : $Builtin.Int8) // user: %1263
  %962 = string_literal utf8 "/Users/buildnode/jenkins/workspace/oss-swift-package-osx/swift/stdlib/public/core/UIntBuffer.swift" // user: %964
  %963 = integer_literal $Builtin.Word, 98        // user: %965
  %964 = builtin "ptrtoint_Word"(%962 : $Builtin.RawPointer) : $Builtin.Word // user: %965
  %965 = struct $StaticString (%964 : $Builtin.Word, %963 : $Builtin.Word, %960 : $Builtin.Int8) // user: %1263
  %966 = integer_literal $Builtin.Int64, 194      // user: %967
  %967 = struct $UInt (%966 : $Builtin.Int64)     // user: %1263
  br bb116                                        // id: %968

bb116:                                            // Preds: bb115
  %969 = struct_element_addr %956 : $*_UIntBuffer<UInt32, UInt8>, #_UIntBuffer._bitCount // user: %970
  %970 = struct_element_addr %969 : $*UInt8, #UInt8._value // user: %971
  %971 = load %970 : $*Builtin.Int8               // user: %972
  %972 = builtin "zextOrBitCast_Int8_Int64"(%971 : $Builtin.Int8) : $Builtin.Int64 // user: %974
  %973 = integer_literal $Builtin.Int64, 8        // user: %974
  %974 = builtin "sdiv_Int64"(%972 : $Builtin.Int64, %973 : $Builtin.Int64) : $Builtin.Int64 // user: %976
  %975 = integer_literal $Builtin.Int64, 1        // user: %976
  %976 = builtin "sadd_with_overflow_Int64"(%974 : $Builtin.Int64, %975 : $Builtin.Int64, %876 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %978, %977
  %977 = tuple_extract %976 : $(Builtin.Int64, Builtin.Int1), 0 // user: %981
  %978 = tuple_extract %976 : $(Builtin.Int64, Builtin.Int1), 1 // user: %979
  cond_fail %978 : $Builtin.Int1                  // id: %979
  %980 = integer_literal $Builtin.Int64, 4        // user: %981
  %981 = builtin "cmp_slt_Int64"(%980 : $Builtin.Int64, %977 : $Builtin.Int64) : $Builtin.Int1 // user: %982
  %982 = builtin "int_expect_Int1"(%981 : $Builtin.Int1, %872 : $Builtin.Int1) : $Builtin.Int1 // user: %983
  cond_br %982, bb151, bb117                      // id: %983

bb117:                                            // Preds: bb116
  %984 = builtin "zextOrBitCast_Int8_Int32"(%942 : $Builtin.Int8) : $Builtin.Int32 // user: %991
  %985 = struct_element_addr %956 : $*_UIntBuffer<UInt32, UInt8>, #_UIntBuffer._bitCount // users: %1002, %986
  %986 = struct_element_addr %985 : $*UInt8, #UInt8._value // user: %987
  %987 = load %986 : $*Builtin.Int8               // users: %999, %988
  %988 = builtin "zextOrBitCast_Int8_Int32"(%987 : $Builtin.Int8) : $Builtin.Int32 // user: %990
  %989 = integer_literal $Builtin.Int32, 31       // user: %990
  %990 = builtin "and_Int32"(%988 : $Builtin.Int32, %989 : $Builtin.Int32) : $Builtin.Int32 // user: %991
  %991 = builtin "shl_Int32"(%984 : $Builtin.Int32, %990 : $Builtin.Int32) : $Builtin.Int32 // user: %995
  %992 = struct_element_addr %956 : $*_UIntBuffer<UInt32, UInt8>, #_UIntBuffer._storage // users: %997, %993
  %993 = struct_element_addr %992 : $*UInt32, #UInt32._value // user: %994
  %994 = load %993 : $*Builtin.Int32              // user: %995
  %995 = builtin "or_Int32"(%994 : $Builtin.Int32, %991 : $Builtin.Int32) : $Builtin.Int32 // user: %996
  %996 = struct $UInt32 (%995 : $Builtin.Int32)   // user: %997
  store %996 to %992 : $*UInt32                   // id: %997
  %998 = integer_literal $Builtin.Int8, 8         // user: %999
  %999 = builtin "uadd_with_overflow_Int8"(%987 : $Builtin.Int8, %998 : $Builtin.Int8, %872 : $Builtin.Int1) : $(Builtin.Int8, Builtin.Int1) // user: %1000
  %1000 = tuple_extract %999 : $(Builtin.Int8, Builtin.Int1), 0 // user: %1001
  %1001 = struct $UInt8 (%1000 : $Builtin.Int8)   // user: %1002
  store %1001 to %985 : $*UInt8                   // id: %1002
  br bb118                                        // id: %1003

bb118:                                            // Preds: bb128 bb117 bb104
  %1004 = load %862 : $*Optional<UnsafePointer<UInt8>> // users: %1027, %1005
  switch_enum %1004 : $Optional<UnsafePointer<UInt8>>, case #Optional.some!enumelt.1: bb123, case #Optional.none!enumelt: bb119 // id: %1005

bb119:                                            // Preds: bb118
  switch_enum %6 : $Optional<UnsafePointer<UInt8>>, case #Optional.none!enumelt: bb122, case #Optional.some!enumelt.1: bb120 // id: %1006

bb120:                                            // Preds: bb119
  %1007 = string_literal utf8 "/Users/buildnode/jenkins/workspace/oss-swift-package-osx/build/buildbot_osx/swift-macosx-x86_64/stdlib/public/core/8/UnsafeBufferPointer.swift" // user: %1014
  %1008 = integer_literal $Builtin.Word, 142      // user: %1015
  %1009 = string_literal utf8 "Unexpectedly found nil while unwrapping an Optional value" // user: %1011
  %1010 = integer_literal $Builtin.Word, 57       // user: %1013
  %1011 = builtin "ptrtoint_Word"(%1009 : $Builtin.RawPointer) : $Builtin.Word // user: %1013
  %1012 = integer_literal $Builtin.Int8, 2        // users: %1022, %1015, %1013
  %1013 = struct $StaticString (%1011 : $Builtin.Word, %1010 : $Builtin.Word, %1012 : $Builtin.Int8) // user: %1024
  %1014 = builtin "ptrtoint_Word"(%1007 : $Builtin.RawPointer) : $Builtin.Word // user: %1015
  %1015 = struct $StaticString (%1014 : $Builtin.Word, %1008 : $Builtin.Word, %1012 : $Builtin.Int8) // user: %1024
  %1016 = integer_literal $Builtin.Int64, 576     // user: %1017
  %1017 = struct $UInt (%1016 : $Builtin.Int64)   // user: %1024
  br bb121                                        // id: %1018

bb121:                                            // Preds: bb120
  %1019 = string_literal utf8 "Fatal error"       // user: %1021
  %1020 = integer_literal $Builtin.Word, 11       // user: %1022
  %1021 = builtin "ptrtoint_Word"(%1019 : $Builtin.RawPointer) : $Builtin.Word // user: %1022
  %1022 = struct $StaticString (%1021 : $Builtin.Word, %1020 : $Builtin.Word, %1012 : $Builtin.Int8) // user: %1024
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %1023 = function_ref @$Ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %1024
  %1024 = apply %1023(%1022, %1013, %1015, %1017, %867) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %1025

bb122:                                            // Preds: bb119
  br bb130                                        // id: %1026

bb123:                                            // Preds: bb118
  %1027 = unchecked_enum_data %1004 : $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1 // users: %1035, %1031
  switch_enum %6 : $Optional<UnsafePointer<UInt8>>, case #Optional.some!enumelt.1: bb125, case #Optional.none!enumelt: bb124 // id: %1028

bb124:                                            // Preds: bb123
  br bb126                                        // id: %1029

bb125:                                            // Preds: bb123
  %1030 = unchecked_enum_data %6 : $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1 // user: %1032
  %1031 = struct_extract %1027 : $UnsafePointer<UInt8>, #UnsafePointer._rawValue // user: %1033
  %1032 = struct_extract %1030 : $UnsafePointer<UInt8>, #UnsafePointer._rawValue // user: %1033
  %1033 = builtin "cmp_eq_RawPointer"(%1031 : $Builtin.RawPointer, %1032 : $Builtin.RawPointer) : $Builtin.Int1 // user: %1034
  cond_br %1033, bb130, bb126                     // id: %1034

bb126:                                            // Preds: bb125 bb124
  %1035 = struct_extract %1027 : $UnsafePointer<UInt8>, #UnsafePointer._rawValue // user: %1036
  %1036 = pointer_to_address %1035 : $Builtin.RawPointer to [strict] $*UInt8 // user: %1037
  %1037 = struct_element_addr %1036 : $*UInt8, #UInt8._value // user: %1038
  %1038 = load %1037 : $*Builtin.Int8             // user: %1076
  %1039 = unchecked_take_enum_data_addr %862 : $*Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1 // users: %1047, %1040
  %1040 = struct_element_addr %1039 : $*UnsafePointer<UInt8>, #UnsafePointer._rawValue // user: %1041
  %1041 = load %1040 : $*Builtin.RawPointer       // user: %1043
  %1042 = integer_literal $Builtin.Word, 1        // user: %1044
  %1043 = pointer_to_address %1041 : $Builtin.RawPointer to [strict] $*UInt8 // user: %1044
  %1044 = index_addr %1043 : $*UInt8, %1042 : $Builtin.Word // user: %1045
  %1045 = address_to_pointer %1044 : $*UInt8 to $Builtin.RawPointer // user: %1046
  %1046 = struct $UnsafePointer<UInt8> (%1045 : $Builtin.RawPointer) // user: %1047
  store %1046 to %1039 : $*UnsafePointer<UInt8>   // id: %1047
  %1048 = mark_dependence %873 : $*_UIntBuffer<UInt32, UInt8> on %864 : $*Unicode.UTF8.ForwardParser // users: %1084, %1077, %1061
  %1049 = string_literal utf8 ""                  // user: %1051
  %1050 = integer_literal $Builtin.Word, 0        // user: %1053
  %1051 = builtin "ptrtoint_Word"(%1049 : $Builtin.RawPointer) : $Builtin.Word // user: %1053
  %1052 = integer_literal $Builtin.Int8, 2        // users: %1105, %1057, %1053
  %1053 = struct $StaticString (%1051 : $Builtin.Word, %1050 : $Builtin.Word, %1052 : $Builtin.Int8) // user: %1107
  %1054 = string_literal utf8 "/Users/buildnode/jenkins/workspace/oss-swift-package-osx/swift/stdlib/public/core/UIntBuffer.swift" // user: %1056
  %1055 = integer_literal $Builtin.Word, 98       // user: %1057
  %1056 = builtin "ptrtoint_Word"(%1054 : $Builtin.RawPointer) : $Builtin.Word // user: %1057
  %1057 = struct $StaticString (%1056 : $Builtin.Word, %1055 : $Builtin.Word, %1052 : $Builtin.Int8) // user: %1107
  %1058 = integer_literal $Builtin.Int64, 194     // user: %1059
  %1059 = struct $UInt (%1058 : $Builtin.Int64)   // user: %1107
  br bb127                                        // id: %1060

bb127:                                            // Preds: bb126
  %1061 = struct_element_addr %1048 : $*_UIntBuffer<UInt32, UInt8>, #_UIntBuffer._bitCount // user: %1062
  %1062 = struct_element_addr %1061 : $*UInt8, #UInt8._value // user: %1063
  %1063 = load %1062 : $*Builtin.Int8             // user: %1064
  %1064 = builtin "zextOrBitCast_Int8_Int64"(%1063 : $Builtin.Int8) : $Builtin.Int64 // user: %1066
  %1065 = integer_literal $Builtin.Int64, 8       // user: %1066
  %1066 = builtin "sdiv_Int64"(%1064 : $Builtin.Int64, %1065 : $Builtin.Int64) : $Builtin.Int64 // user: %1068
  %1067 = integer_literal $Builtin.Int64, 1       // user: %1068
  %1068 = builtin "sadd_with_overflow_Int64"(%1066 : $Builtin.Int64, %1067 : $Builtin.Int64, %876 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %1070, %1069
  %1069 = tuple_extract %1068 : $(Builtin.Int64, Builtin.Int1), 0 // user: %1073
  %1070 = tuple_extract %1068 : $(Builtin.Int64, Builtin.Int1), 1 // user: %1071
  cond_fail %1070 : $Builtin.Int1                 // id: %1071
  %1072 = integer_literal $Builtin.Int64, 4       // user: %1073
  %1073 = builtin "cmp_slt_Int64"(%1072 : $Builtin.Int64, %1069 : $Builtin.Int64) : $Builtin.Int1 // user: %1074
  %1074 = builtin "int_expect_Int1"(%1073 : $Builtin.Int1, %872 : $Builtin.Int1) : $Builtin.Int1 // user: %1075
  cond_br %1074, bb129, bb128                     // id: %1075

bb128:                                            // Preds: bb127
  %1076 = builtin "zextOrBitCast_Int8_Int32"(%1038 : $Builtin.Int8) : $Builtin.Int32 // user: %1083
  %1077 = struct_element_addr %1048 : $*_UIntBuffer<UInt32, UInt8>, #_UIntBuffer._bitCount // users: %1094, %1078
  %1078 = struct_element_addr %1077 : $*UInt8, #UInt8._value // user: %1079
  %1079 = load %1078 : $*Builtin.Int8             // users: %1091, %1080
  %1080 = builtin "zextOrBitCast_Int8_Int32"(%1079 : $Builtin.Int8) : $Builtin.Int32 // user: %1082
  %1081 = integer_literal $Builtin.Int32, 31      // user: %1082
  %1082 = builtin "and_Int32"(%1080 : $Builtin.Int32, %1081 : $Builtin.Int32) : $Builtin.Int32 // user: %1083
  %1083 = builtin "shl_Int32"(%1076 : $Builtin.Int32, %1082 : $Builtin.Int32) : $Builtin.Int32 // user: %1087
  %1084 = struct_element_addr %1048 : $*_UIntBuffer<UInt32, UInt8>, #_UIntBuffer._storage // users: %1089, %1085
  %1085 = struct_element_addr %1084 : $*UInt32, #UInt32._value // user: %1086
  %1086 = load %1085 : $*Builtin.Int32            // user: %1087
  %1087 = builtin "or_Int32"(%1086 : $Builtin.Int32, %1083 : $Builtin.Int32) : $Builtin.Int32 // user: %1088
  %1088 = struct $UInt32 (%1087 : $Builtin.Int32) // user: %1089
  store %1088 to %1084 : $*UInt32                 // id: %1089
  %1090 = integer_literal $Builtin.Int8, 8        // user: %1091
  %1091 = builtin "uadd_with_overflow_Int8"(%1079 : $Builtin.Int8, %1090 : $Builtin.Int8, %872 : $Builtin.Int1) : $(Builtin.Int8, Builtin.Int1) // user: %1092
  %1092 = tuple_extract %1091 : $(Builtin.Int8, Builtin.Int1), 0 // user: %1093
  %1093 = struct $UInt8 (%1092 : $Builtin.Int8)   // user: %1094
  store %1093 to %1077 : $*UInt8                  // id: %1094
  %1095 = load %875 : $*Builtin.Int8              // user: %1096
  %1096 = builtin "zextOrBitCast_Int8_Int64"(%1095 : $Builtin.Int8) : $Builtin.Int64 // user: %1098
  %1097 = integer_literal $Builtin.Int64, 8       // user: %1098
  %1098 = builtin "sdiv_Int64"(%1096 : $Builtin.Int64, %1097 : $Builtin.Int64) : $Builtin.Int64 // user: %1100
  %1099 = integer_literal $Builtin.Int64, 4       // user: %1100
  %1100 = builtin "cmp_slt_Int64"(%1098 : $Builtin.Int64, %1099 : $Builtin.Int64) : $Builtin.Int1 // user: %1101
  cond_br %1100, bb118, bb131                     // id: %1101

bb129:                                            // Preds: bb127
  %1102 = string_literal utf8 "Fatal error"       // user: %1104
  %1103 = integer_literal $Builtin.Word, 11       // user: %1105
  %1104 = builtin "ptrtoint_Word"(%1102 : $Builtin.RawPointer) : $Builtin.Word // user: %1105
  %1105 = struct $StaticString (%1104 : $Builtin.Word, %1103 : $Builtin.Word, %1052 : $Builtin.Int8) // user: %1107
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %1106 = function_ref @$Ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %1107
  %1107 = apply %1106(%1105, %1053, %1057, %1059, %867) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %1108

bb130:                                            // Preds: bb125 bb122
  %1109 = load %875 : $*Builtin.Int8              // user: %1110
  %1110 = builtin "cmp_eq_Int8"(%1109 : $Builtin.Int8, %866 : $Builtin.Int8) : $Builtin.Int1 // user: %1111
  cond_br %1110, bb150, bb131                     // id: %1111

bb131:                                            // Preds: bb130 bb128
  %1112 = load %864 : $*Unicode.UTF8.ForwardParser // users: %1191, %1113
  %1113 = struct_extract %1112 : $Unicode.UTF8.ForwardParser, #Unicode.UTF8.ForwardParser._buffer // user: %1114
  %1114 = struct_extract %1113 : $_UIntBuffer<UInt32, UInt8>, #_UIntBuffer._storage // user: %1116
  %1115 = integer_literal $Builtin.Int32, 49376   // user: %1117
  %1116 = struct_extract %1114 : $UInt32, #UInt32._value // users: %1221, %1200, %1184, %1174, %1132, %1127, %1122, %1117
  %1117 = builtin "and_Int32"(%1116 : $Builtin.Int32, %1115 : $Builtin.Int32) : $Builtin.Int32 // user: %1119
  %1118 = integer_literal $Builtin.Int32, 32960   // user: %1119
  %1119 = builtin "cmp_eq_Int32"(%1117 : $Builtin.Int32, %1118 : $Builtin.Int32) : $Builtin.Int1 // user: %1120
  cond_br %1119, bb144, bb132                     // id: %1120

bb132:                                            // Preds: bb131
  %1121 = integer_literal $Builtin.Int32, 12632304 // user: %1122
  %1122 = builtin "and_Int32"(%1116 : $Builtin.Int32, %1121 : $Builtin.Int32) : $Builtin.Int32 // user: %1124
  %1123 = integer_literal $Builtin.Int32, 8421600 // user: %1124
  %1124 = builtin "cmp_eq_Int32"(%1122 : $Builtin.Int32, %1123 : $Builtin.Int32) : $Builtin.Int1 // user: %1125
  cond_br %1124, bb141, bb133                     // id: %1125

bb133:                                            // Preds: bb132
  %1126 = integer_literal $Builtin.Int32, -1061109512 // user: %1127
  %1127 = builtin "and_Int32"(%1116 : $Builtin.Int32, %1126 : $Builtin.Int32) : $Builtin.Int32 // user: %1129
  %1128 = integer_literal $Builtin.Int32, -2139062032 // user: %1129
  %1129 = builtin "cmp_eq_Int32"(%1127 : $Builtin.Int32, %1128 : $Builtin.Int32) : $Builtin.Int1 // user: %1130
  cond_br %1129, bb134, bb146                     // id: %1130

bb134:                                            // Preds: bb133
  %1131 = integer_literal $Builtin.Int32, 12295   // user: %1132
  %1132 = builtin "and_Int32"(%1116 : $Builtin.Int32, %1131 : $Builtin.Int32) : $Builtin.Int32 // users: %1161, %1151, %1148, %1145
  %1133 = string_literal utf8 "Not enough bits to represent a signed value" // user: %1135
  %1134 = integer_literal $Builtin.Word, 43       // user: %1137
  %1135 = builtin "ptrtoint_Word"(%1133 : $Builtin.RawPointer) : $Builtin.Word // user: %1137
  %1136 = integer_literal $Builtin.Int8, 2        // users: %1157, %1141, %1137
  %1137 = struct $StaticString (%1135 : $Builtin.Word, %1134 : $Builtin.Word, %1136 : $Builtin.Int8) // user: %1159
  %1138 = string_literal utf8 "/Users/buildnode/jenkins/workspace/oss-swift-package-osx/build/buildbot_osx/swift-macosx-x86_64/stdlib/public/core/8/Integers.swift" // user: %1140
  %1139 = integer_literal $Builtin.Word, 131      // user: %1141
  %1140 = builtin "ptrtoint_Word"(%1138 : $Builtin.RawPointer) : $Builtin.Word // user: %1141
  %1141 = struct $StaticString (%1140 : $Builtin.Word, %1139 : $Builtin.Word, %1136 : $Builtin.Int8) // user: %1159
  %1142 = integer_literal $Builtin.Int64, 3445    // user: %1143
  %1143 = struct $UInt (%1142 : $Builtin.Int64)   // user: %1159
  br bb135                                        // id: %1144

bb135:                                            // Preds: bb134
  %1145 = builtin "zextOrBitCast_Int32_Int64"(%1132 : $Builtin.Int32) : $Builtin.Int64 // user: %1146
  %1146 = builtin "truncOrBitCast_Int64_Int16"(%1145 : $Builtin.Int64) : $Builtin.Int16 // user: %1147
  %1147 = builtin "zextOrBitCast_Int16_Int32"(%1146 : $Builtin.Int16) : $Builtin.Int32 // user: %1148
  %1148 = builtin "cmp_eq_Int32"(%1147 : $Builtin.Int32, %1132 : $Builtin.Int32) : $Builtin.Int1 // user: %1149
  cond_br %1148, bb138, bb136                     // id: %1149

bb136:                                            // Preds: bb135
  %1150 = integer_literal $Builtin.Int32, 65535   // user: %1151
  %1151 = builtin "cmp_ult_Int32"(%1150 : $Builtin.Int32, %1132 : $Builtin.Int32) : $Builtin.Int1 // user: %1152
  %1152 = builtin "int_expect_Int1"(%1151 : $Builtin.Int1, %872 : $Builtin.Int1) : $Builtin.Int1 // user: %1153
  cond_br %1152, bb137, bb138                     // id: %1153

bb137:                                            // Preds: bb136
  %1154 = string_literal utf8 "Fatal error"       // user: %1156
  %1155 = integer_literal $Builtin.Word, 11       // user: %1157
  %1156 = builtin "ptrtoint_Word"(%1154 : $Builtin.RawPointer) : $Builtin.Word // user: %1157
  %1157 = struct $StaticString (%1156 : $Builtin.Word, %1155 : $Builtin.Word, %1136 : $Builtin.Int8) // user: %1159
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %1158 = function_ref @$Ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %1159
  %1159 = apply %1158(%1157, %1137, %1141, %1143, %867) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %1160

bb138:                                            // Preds: bb136 bb135
  %1161 = builtin "zextOrBitCast_Int32_Int64"(%1132 : $Builtin.Int32) : $Builtin.Int64 // user: %1162
  %1162 = builtin "truncOrBitCast_Int64_Int16"(%1161 : $Builtin.Int64) : $Builtin.Int16 // users: %1166, %1164
  %1163 = integer_literal $Builtin.Int16, 0       // user: %1164
  %1164 = builtin "cmp_eq_Int16"(%1162 : $Builtin.Int16, %1163 : $Builtin.Int16) : $Builtin.Int1 // user: %1165
  cond_br %1164, bb146, bb139                     // id: %1165

bb139:                                            // Preds: bb138
  %1166 = builtin "int_bswap_Int16"(%1162 : $Builtin.Int16) : $Builtin.Int16 // user: %1168
  %1167 = integer_literal $Builtin.Int16, 1024    // user: %1168
  %1168 = builtin "cmp_ult_Int16"(%1167 : $Builtin.Int16, %1166 : $Builtin.Int16) : $Builtin.Int1 // user: %1169
  %1169 = builtin "int_expect_Int1"(%1168 : $Builtin.Int1, %872 : $Builtin.Int1) : $Builtin.Int1 // user: %1170
  cond_br %1169, bb146, bb140                     // id: %1170

bb140:                                            // Preds: bb139
  %1171 = integer_literal $Builtin.Int8, 32       // user: %1172
  br bb147(%876 : $Builtin.Int1, %1171 : $Builtin.Int8) // id: %1172

bb141:                                            // Preds: bb132
  %1173 = integer_literal $Builtin.Int32, 8207    // user: %1174
  %1174 = builtin "and_Int32"(%1116 : $Builtin.Int32, %1173 : $Builtin.Int32) : $Builtin.Int32 // users: %1178, %1175
  %1175 = builtin "cmp_eq_Int32"(%1174 : $Builtin.Int32, %865 : $Builtin.Int32) : $Builtin.Int1 // user: %1176
  cond_br %1175, bb146, bb142                     // id: %1176

bb142:                                            // Preds: bb141
  %1177 = integer_literal $Builtin.Int32, 8205    // user: %1178
  %1178 = builtin "cmp_eq_Int32"(%1174 : $Builtin.Int32, %1177 : $Builtin.Int32) : $Builtin.Int1 // user: %1179
  %1179 = builtin "int_expect_Int1"(%1178 : $Builtin.Int1, %872 : $Builtin.Int1) : $Builtin.Int1 // user: %1180
  cond_br %1179, bb146, bb143                     // id: %1180

bb143:                                            // Preds: bb142
  %1181 = integer_literal $Builtin.Int8, 24       // user: %1182
  br bb147(%876 : $Builtin.Int1, %1181 : $Builtin.Int8) // id: %1182

bb144:                                            // Preds: bb131
  %1183 = integer_literal $Builtin.Int32, 30      // user: %1184
  %1184 = builtin "and_Int32"(%1116 : $Builtin.Int32, %1183 : $Builtin.Int32) : $Builtin.Int32 // user: %1185
  %1185 = builtin "cmp_eq_Int32"(%1184 : $Builtin.Int32, %865 : $Builtin.Int32) : $Builtin.Int1 // user: %1186
  %1186 = builtin "int_expect_Int1"(%1185 : $Builtin.Int1, %872 : $Builtin.Int1) : $Builtin.Int1 // user: %1187
  cond_br %1186, bb146, bb145                     // id: %1187

bb145:                                            // Preds: bb144
  %1188 = integer_literal $Builtin.Int8, 16       // user: %1189
  br bb147(%876 : $Builtin.Int1, %1188 : $Builtin.Int8) // id: %1189

bb146:                                            // Preds: bb144 bb142 bb141 bb139 bb138 bb133
  // function_ref Unicode.UTF8.ForwardParser._invalidLength()
  %1190 = function_ref @$Ss7UnicodeO4UTF8O13ForwardParserV14_invalidLengths5UInt8VyF : $@convention(method) (Unicode.UTF8.ForwardParser) -> UInt8 // user: %1191
  %1191 = apply %1190(%1112) : $@convention(method) (Unicode.UTF8.ForwardParser) -> UInt8 // user: %1193
  %1192 = integer_literal $Builtin.Int8, 8        // user: %1194
  %1193 = struct_extract %1191 : $UInt8, #UInt8._value // user: %1194
  %1194 = builtin "umul_with_overflow_Int8"(%1193 : $Builtin.Int8, %1192 : $Builtin.Int8, %872 : $Builtin.Int1) : $(Builtin.Int8, Builtin.Int1) // user: %1195
  %1195 = tuple_extract %1194 : $(Builtin.Int8, Builtin.Int1), 0 // user: %1196
  br bb147(%872 : $Builtin.Int1, %1195 : $Builtin.Int8) // id: %1196

// %1197                                          // user: %1237
// %1198                                          // users: %1242, %1232, %1222, %1211, %1204
bb147(%1197 : $Builtin.Int1, %1198 : $Builtin.Int8): // Preds: bb146 bb145 bb143 bb140
  %1199 = integer_literal $Builtin.Int32, 16843009 // user: %1200
  %1200 = builtin "uadd_with_overflow_Int32"(%1116 : $Builtin.Int32, %1199 : $Builtin.Int32, %872 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // user: %1201
  %1201 = tuple_extract %1200 : $(Builtin.Int32, Builtin.Int1), 0 // user: %1220
  %1202 = integer_literal $Builtin.Int32, -1      // user: %1210
  %1203 = integer_literal $Builtin.Int8, 1        // users: %1211, %1206, %1204
  %1204 = builtin "uadd_with_overflow_Int8"(%1198 : $Builtin.Int8, %1203 : $Builtin.Int8, %872 : $Builtin.Int1) : $(Builtin.Int8, Builtin.Int1) // user: %1205
  %1205 = tuple_extract %1204 : $(Builtin.Int8, Builtin.Int1), 0 // user: %1206
  %1206 = builtin "lshr_Int8"(%1205 : $Builtin.Int8, %1203 : $Builtin.Int8) : $Builtin.Int8 // user: %1207
  %1207 = builtin "zextOrBitCast_Int8_Int32"(%1206 : $Builtin.Int8) : $Builtin.Int32 // user: %1209
  %1208 = integer_literal $Builtin.Int32, 31      // users: %1213, %1209
  %1209 = builtin "and_Int32"(%1207 : $Builtin.Int32, %1208 : $Builtin.Int32) : $Builtin.Int32 // user: %1210
  %1210 = builtin "shl_Int32"(%1202 : $Builtin.Int32, %1209 : $Builtin.Int32) : $Builtin.Int32 // user: %1214
  %1211 = builtin "lshr_Int8"(%1198 : $Builtin.Int8, %1203 : $Builtin.Int8) : $Builtin.Int8 // user: %1212
  %1212 = builtin "zextOrBitCast_Int8_Int32"(%1211 : $Builtin.Int8) : $Builtin.Int32 // user: %1213
  %1213 = builtin "and_Int32"(%1212 : $Builtin.Int32, %1208 : $Builtin.Int32) : $Builtin.Int32 // user: %1214
  %1214 = builtin "shl_Int32"(%1210 : $Builtin.Int32, %1213 : $Builtin.Int32) : $Builtin.Int32 // user: %1215
  %1215 = builtin "usub_with_overflow_Int32"(%865 : $Builtin.Int32, %1214 : $Builtin.Int32, %872 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // user: %1216
  %1216 = tuple_extract %1215 : $(Builtin.Int32, Builtin.Int1), 0 // user: %1218
  %1217 = integer_literal $Builtin.Int32, 1       // user: %1218
  %1218 = builtin "usub_with_overflow_Int32"(%1216 : $Builtin.Int32, %1217 : $Builtin.Int32, %872 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // user: %1219
  %1219 = tuple_extract %1218 : $(Builtin.Int32, Builtin.Int1), 0 // user: %1220
  %1220 = builtin "and_Int32"(%1201 : $Builtin.Int32, %1219 : $Builtin.Int32) : $Builtin.Int32 // user: %1250
  %1221 = builtin "zextOrBitCast_Int32_Int64"(%1116 : $Builtin.Int32) : $Builtin.Int64 // user: %1225
  %1222 = builtin "zextOrBitCast_Int8_Int64"(%1198 : $Builtin.Int8) : $Builtin.Int64 // user: %1224
  %1223 = integer_literal $Builtin.Int64, 63      // user: %1224
  %1224 = builtin "and_Int64"(%1222 : $Builtin.Int64, %1223 : $Builtin.Int64) : $Builtin.Int64 // user: %1225
  %1225 = builtin "lshr_Int64"(%1221 : $Builtin.Int64, %1224 : $Builtin.Int64) : $Builtin.Int64 // user: %1226
  %1226 = builtin "truncOrBitCast_Int64_Int32"(%1225 : $Builtin.Int64) : $Builtin.Int32 // user: %1227
  %1227 = struct $UInt32 (%1226 : $Builtin.Int32) // user: %1230
  %1228 = mark_dependence %873 : $*_UIntBuffer<UInt32, UInt8> on %864 : $*Unicode.UTF8.ForwardParser // users: %1235, %1229
  %1229 = struct_element_addr %1228 : $*_UIntBuffer<UInt32, UInt8>, #_UIntBuffer._storage // user: %1230
  store %1227 to %1229 : $*UInt32                 // id: %1230
  %1231 = load %875 : $*Builtin.Int8              // user: %1232
  %1232 = builtin "usub_with_overflow_Int8"(%1231 : $Builtin.Int8, %1198 : $Builtin.Int8, %872 : $Builtin.Int1) : $(Builtin.Int8, Builtin.Int1) // user: %1233
  %1233 = tuple_extract %1232 : $(Builtin.Int8, Builtin.Int1), 0 // user: %1234
  %1234 = struct $UInt8 (%1233 : $Builtin.Int8)   // user: %1236
  %1235 = struct_element_addr %1228 : $*_UIntBuffer<UInt32, UInt8>, #_UIntBuffer._bitCount // user: %1236
  store %1234 to %1235 : $*UInt8                  // id: %1236
  %1237 = builtin "int_expect_Int1"(%1197 : $Builtin.Int1, %876 : $Builtin.Int1) : $Builtin.Int1 // user: %1238
  cond_br %1237, bb149, bb148                     // id: %1238

bb148:                                            // Preds: bb147
  %1239 = init_enum_data_addr %880 : $*Unicode.ParseResult<_ValidUTF8Buffer<UInt32>>, #Unicode.ParseResult.error!enumelt.1 // user: %1240
  %1240 = tuple_element_addr %1239 : $*(length: Int), 0 // user: %1246
  %1241 = integer_literal $Builtin.Int8, 8        // user: %1242
  %1242 = builtin "udiv_Int8"(%1198 : $Builtin.Int8, %1241 : $Builtin.Int8) : $Builtin.Int8 // user: %1243
  %1243 = builtin "zextOrBitCast_Int8_Int64"(%1242 : $Builtin.Int8) : $Builtin.Int64 // user: %1244
  %1244 = struct $Int (%1243 : $Builtin.Int64)    // users: %1246, %1245
  %1245 = tuple $(length: Int) (%1244)
  store %1244 to %1240 : $*Int                    // id: %1246
  inject_enum_addr %880 : $*Unicode.ParseResult<_ValidUTF8Buffer<UInt32>>, #Unicode.ParseResult.error!enumelt.1 // id: %1247
  br bb154                                        // id: %1248

bb149:                                            // Preds: bb147
  %1249 = init_enum_data_addr %880 : $*Unicode.ParseResult<_ValidUTF8Buffer<UInt32>>, #Unicode.ParseResult.valid!enumelt.1 // user: %1252
  %1250 = struct $UInt32 (%1220 : $Builtin.Int32) // user: %1251
  %1251 = struct $_ValidUTF8Buffer<UInt32> (%1250 : $UInt32) // user: %1252
  store %1251 to %1249 : $*_ValidUTF8Buffer<UInt32> // id: %1252
  inject_enum_addr %880 : $*Unicode.ParseResult<_ValidUTF8Buffer<UInt32>>, #Unicode.ParseResult.valid!enumelt.1 // id: %1253
  br bb154                                        // id: %1254

bb150:                                            // Preds: bb130
  %1255 = enum $Unicode.ParseResult<_ValidUTF8Buffer<UInt32>>, #Unicode.ParseResult.emptyInput!enumelt // user: %1256
  store %1255 to %880 : $*Unicode.ParseResult<_ValidUTF8Buffer<UInt32>> // id: %1256
  br bb154                                        // id: %1257

bb151:                                            // Preds: bb116
  %1258 = string_literal utf8 "Fatal error"       // user: %1260
  %1259 = integer_literal $Builtin.Word, 11       // user: %1261
  %1260 = builtin "ptrtoint_Word"(%1258 : $Builtin.RawPointer) : $Builtin.Word // user: %1261
  %1261 = struct $StaticString (%1260 : $Builtin.Word, %1259 : $Builtin.Word, %960 : $Builtin.Int8) // user: %1263
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %1262 = function_ref @$Ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %1263
  %1263 = apply %1262(%1261, %961, %965, %967, %867) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %1264

bb152:                                            // Preds: bb114
  %1265 = init_enum_data_addr %880 : $*Unicode.ParseResult<_ValidUTF8Buffer<UInt32>>, #Unicode.ParseResult.valid!enumelt.1 // user: %1272
  %1266 = integer_literal $Builtin.Int8, 1        // user: %1267
  %1267 = builtin "uadd_with_overflow_Int8"(%942 : $Builtin.Int8, %1266 : $Builtin.Int8, %872 : $Builtin.Int1) : $(Builtin.Int8, Builtin.Int1) // user: %1268
  %1268 = tuple_extract %1267 : $(Builtin.Int8, Builtin.Int1), 0 // user: %1269
  %1269 = builtin "zextOrBitCast_Int8_Int32"(%1268 : $Builtin.Int8) : $Builtin.Int32 // user: %1270
  %1270 = struct $UInt32 (%1269 : $Builtin.Int32) // user: %1271
  %1271 = struct $_ValidUTF8Buffer<UInt32> (%1270 : $UInt32) // user: %1272
  store %1271 to %1265 : $*_ValidUTF8Buffer<UInt32> // id: %1272
  inject_enum_addr %880 : $*Unicode.ParseResult<_ValidUTF8Buffer<UInt32>>, #Unicode.ParseResult.valid!enumelt.1 // id: %1273
  br bb154                                        // id: %1274

bb153:                                            // Preds: bb113 bb110
  %1275 = enum $Unicode.ParseResult<_ValidUTF8Buffer<UInt32>>, #Unicode.ParseResult.emptyInput!enumelt // user: %1276
  store %1275 to %880 : $*Unicode.ParseResult<_ValidUTF8Buffer<UInt32>> // id: %1276
  br bb154                                        // id: %1277

bb154:                                            // Preds: bb153 bb152 bb150 bb149 bb148 bb105
  %1278 = load %880 : $*Unicode.ParseResult<_ValidUTF8Buffer<UInt32>> // users: %1309, %1280
  dealloc_stack %880 : $*Unicode.ParseResult<_ValidUTF8Buffer<UInt32>> // id: %1279
  switch_enum %1278 : $Unicode.ParseResult<_ValidUTF8Buffer<UInt32>>, case #Unicode.ParseResult.valid!enumelt.1: bb159, case #Unicode.ParseResult.emptyInput!enumelt: bb156, case #Unicode.ParseResult.error!enumelt.1: bb155 // id: %1280

bb155:                                            // Preds: bb154
  br bb157(%876 : $Builtin.Int1)                  // id: %1281

bb156:                                            // Preds: bb154
  br bb157(%878 : $Builtin.Int1)                  // id: %1282

// %1283                                          // user: %1303
bb157(%1283 : $Builtin.Int1):                     // Preds: bb156 bb155
  dealloc_stack %864 : $*Unicode.UTF8.ForwardParser // id: %1284
  dealloc_stack %862 : $*Optional<UnsafePointer<UInt8>> // id: %1285
  %1286 = init_existential_ref %843 : $_SwiftStringStorage<UInt8> : $_SwiftStringStorage<UInt8>, $AnyObject // users: %1293, %1287
  %1287 = unchecked_trivial_bit_cast %1286 : $AnyObject to $UInt // user: %1289
  %1288 = integer_literal $Builtin.Int64, 72057594037927935 // user: %1290
  %1289 = struct_extract %1287 : $UInt, #UInt._value // user: %1290
  %1290 = builtin "and_Int64"(%1289 : $Builtin.Int64, %1288 : $Builtin.Int64) : $Builtin.Int64 // user: %1291
  %1291 = struct $UInt (%1290 : $Builtin.Int64)   // user: %1292
  %1292 = unchecked_bitwise_cast %1291 : $UInt to $Builtin.BridgeObject // users: %1300, %1294
  fix_lifetime %1286 : $AnyObject                 // id: %1293
  %1294 = struct $_StringObject (%1292 : $Builtin.BridgeObject) // user: %1298
  %1295 = struct_element_addr %860 : $*Int, #Int._value // user: %1296
  %1296 = load %1295 : $*Builtin.Int64            // user: %1297
  %1297 = struct $UInt (%1296 : $Builtin.Int64)   // user: %1298
  %1298 = struct $_StringGuts (%1294 : $_StringObject, %1297 : $UInt) // user: %1299
  %1299 = struct $String (%1298 : $_StringGuts)   // user: %1302
  strong_retain %1292 : $Builtin.BridgeObject     // id: %1300
  strong_release %843 : $_SwiftStringStorage<UInt8> // id: %1301
  %1302 = enum $Optional<String>, #Optional.some!enumelt.1, %1299 : $String // user: %1303
  br bb158(%1302 : $Optional<String>, %1283 : $Builtin.Int1) // id: %1303

// %1304                                          // user: %1307
// %1305                                          // user: %1306
bb158(%1304 : $Optional<String>, %1305 : $Builtin.Int1): // Preds: bb157 bb66 bb1
  %1306 = struct $Bool (%1305 : $Builtin.Int1)    // user: %1307
  %1307 = tuple (%1304 : $Optional<String>, %1306 : $Bool) // user: %1308
  return %1307 : $(Optional<String>, Bool)        // id: %1308

bb159:                                            // Preds: bb154
  %1309 = unchecked_enum_data %1278 : $Unicode.ParseResult<_ValidUTF8Buffer<UInt32>>, #Unicode.ParseResult.valid!enumelt.1 // user: %1310
  %1310 = struct_extract %1309 : $_ValidUTF8Buffer<UInt32>, #_ValidUTF8Buffer._biasedBits // user: %1311
  %1311 = struct_extract %1310 : $UInt32, #UInt32._value // users: %1388, %1373, %1353, %1328, %1313
  %1312 = integer_literal $Builtin.Int64, 4       // user: %1317
  %1313 = builtin "int_ctlz_Int32"(%1311 : $Builtin.Int32, %872 : $Builtin.Int1) : $Builtin.Int32 // user: %1314
  %1314 = builtin "zextOrBitCast_Int32_Int64"(%1313 : $Builtin.Int32) : $Builtin.Int64 // user: %1316
  %1315 = integer_literal $Builtin.Int64, 3       // users: %1325, %1316
  %1316 = builtin "ashr_Int64"(%1314 : $Builtin.Int64, %1315 : $Builtin.Int64) : $Builtin.Int64 // user: %1317
  %1317 = builtin "ssub_with_overflow_Int64"(%1312 : $Builtin.Int64, %1316 : $Builtin.Int64, %872 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %1318
  %1318 = tuple_extract %1317 : $(Builtin.Int64, Builtin.Int1), 0 // users: %1325, %1323, %1320
  %1319 = integer_literal $Builtin.Int64, 1       // user: %1320
  %1320 = builtin "cmp_eq_Int64"(%1318 : $Builtin.Int64, %1319 : $Builtin.Int64) : $Builtin.Int1 // user: %1321
  cond_br %1320, bb165, bb160                     // id: %1321

bb160:                                            // Preds: bb159
  %1322 = integer_literal $Builtin.Int64, 2       // user: %1323
  %1323 = builtin "cmp_eq_Int64"(%1318 : $Builtin.Int64, %1322 : $Builtin.Int64) : $Builtin.Int1 // user: %1324
  cond_br %1323, bb164, bb161                     // id: %1324

bb161:                                            // Preds: bb160
  %1325 = builtin "cmp_eq_Int64"(%1318 : $Builtin.Int64, %1315 : $Builtin.Int64) : $Builtin.Int1 // user: %1326
  cond_br %1325, bb163, bb162                     // id: %1326

bb162:                                            // Preds: bb161
  %1327 = integer_literal $Builtin.Int32, 16843009 // user: %1328
  %1328 = builtin "usub_with_overflow_Int32"(%1311 : $Builtin.Int32, %1327 : $Builtin.Int32, %872 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // user: %1329
  %1329 = tuple_extract %1328 : $(Builtin.Int32, Builtin.Int1), 0 // users: %1345, %1340, %1335, %1331
  %1330 = integer_literal $Builtin.Int32, 1056964608 // user: %1331
  %1331 = builtin "and_Int32"(%1329 : $Builtin.Int32, %1330 : $Builtin.Int32) : $Builtin.Int32 // user: %1333
  %1332 = integer_literal $Builtin.Int32, 24      // user: %1333
  %1333 = builtin "lshr_Int32"(%1331 : $Builtin.Int32, %1332 : $Builtin.Int32) : $Builtin.Int32 // user: %1338
  %1334 = integer_literal $Builtin.Int32, 4128768 // user: %1335
  %1335 = builtin "and_Int32"(%1329 : $Builtin.Int32, %1334 : $Builtin.Int32) : $Builtin.Int32 // user: %1337
  %1336 = integer_literal $Builtin.Int32, 10      // user: %1337
  %1337 = builtin "lshr_Int32"(%1335 : $Builtin.Int32, %1336 : $Builtin.Int32) : $Builtin.Int32 // user: %1338
  %1338 = builtin "or_Int32"(%1333 : $Builtin.Int32, %1337 : $Builtin.Int32) : $Builtin.Int32 // user: %1343
  %1339 = integer_literal $Builtin.Int32, 16128   // user: %1340
  %1340 = builtin "and_Int32"(%1329 : $Builtin.Int32, %1339 : $Builtin.Int32) : $Builtin.Int32 // user: %1342
  %1341 = integer_literal $Builtin.Int32, 4       // user: %1342
  %1342 = builtin "shl_Int32"(%1340 : $Builtin.Int32, %1341 : $Builtin.Int32) : $Builtin.Int32 // user: %1343
  %1343 = builtin "or_Int32"(%1338 : $Builtin.Int32, %1342 : $Builtin.Int32) : $Builtin.Int32 // user: %1348
  %1344 = integer_literal $Builtin.Int32, 7       // user: %1345
  %1345 = builtin "and_Int32"(%1329 : $Builtin.Int32, %1344 : $Builtin.Int32) : $Builtin.Int32 // user: %1347
  %1346 = integer_literal $Builtin.Int32, 18      // user: %1347
  %1347 = builtin "shl_Int32"(%1345 : $Builtin.Int32, %1346 : $Builtin.Int32) : $Builtin.Int32 // user: %1348
  %1348 = builtin "or_Int32"(%1343 : $Builtin.Int32, %1347 : $Builtin.Int32) : $Builtin.Int32 // user: %1349
  %1349 = struct $UInt32 (%1348 : $Builtin.Int32) // user: %1350
  %1350 = struct $Unicode.Scalar (%1349 : $UInt32) // user: %1351
  br bb166(%1350 : $Unicode.Scalar)               // id: %1351

bb163:                                            // Preds: bb161
  %1352 = integer_literal $Builtin.Int32, 65793   // user: %1353
  %1353 = builtin "usub_with_overflow_Int32"(%1311 : $Builtin.Int32, %1352 : $Builtin.Int32, %872 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // user: %1354
  %1354 = tuple_extract %1353 : $(Builtin.Int32, Builtin.Int1), 0 // users: %1365, %1360, %1356
  %1355 = integer_literal $Builtin.Int32, 4128768 // user: %1356
  %1356 = builtin "and_Int32"(%1354 : $Builtin.Int32, %1355 : $Builtin.Int32) : $Builtin.Int32 // user: %1358
  %1357 = integer_literal $Builtin.Int32, 16      // user: %1358
  %1358 = builtin "lshr_Int32"(%1356 : $Builtin.Int32, %1357 : $Builtin.Int32) : $Builtin.Int32 // user: %1363
  %1359 = integer_literal $Builtin.Int32, 16128   // user: %1360
  %1360 = builtin "and_Int32"(%1354 : $Builtin.Int32, %1359 : $Builtin.Int32) : $Builtin.Int32 // user: %1362
  %1361 = integer_literal $Builtin.Int32, 2       // user: %1362
  %1362 = builtin "lshr_Int32"(%1360 : $Builtin.Int32, %1361 : $Builtin.Int32) : $Builtin.Int32 // user: %1363
  %1363 = builtin "or_Int32"(%1358 : $Builtin.Int32, %1362 : $Builtin.Int32) : $Builtin.Int32 // user: %1368
  %1364 = integer_literal $Builtin.Int32, 15      // user: %1365
  %1365 = builtin "and_Int32"(%1354 : $Builtin.Int32, %1364 : $Builtin.Int32) : $Builtin.Int32 // user: %1367
  %1366 = integer_literal $Builtin.Int32, 12      // user: %1367
  %1367 = builtin "shl_Int32"(%1365 : $Builtin.Int32, %1366 : $Builtin.Int32) : $Builtin.Int32 // user: %1368
  %1368 = builtin "or_Int32"(%1363 : $Builtin.Int32, %1367 : $Builtin.Int32) : $Builtin.Int32 // user: %1369
  %1369 = struct $UInt32 (%1368 : $Builtin.Int32) // user: %1370
  %1370 = struct $Unicode.Scalar (%1369 : $UInt32) // user: %1371
  br bb166(%1370 : $Unicode.Scalar)               // id: %1371

bb164:                                            // Preds: bb160
  %1372 = integer_literal $Builtin.Int32, 257     // user: %1373
  %1373 = builtin "usub_with_overflow_Int32"(%1311 : $Builtin.Int32, %1372 : $Builtin.Int32, %872 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // user: %1374
  %1374 = tuple_extract %1373 : $(Builtin.Int32, Builtin.Int1), 0 // users: %1380, %1376
  %1375 = integer_literal $Builtin.Int32, 16128   // user: %1376
  %1376 = builtin "and_Int32"(%1374 : $Builtin.Int32, %1375 : $Builtin.Int32) : $Builtin.Int32 // user: %1378
  %1377 = integer_literal $Builtin.Int32, 8       // user: %1378
  %1378 = builtin "lshr_Int32"(%1376 : $Builtin.Int32, %1377 : $Builtin.Int32) : $Builtin.Int32 // user: %1383
  %1379 = integer_literal $Builtin.Int32, 31      // user: %1380
  %1380 = builtin "and_Int32"(%1374 : $Builtin.Int32, %1379 : $Builtin.Int32) : $Builtin.Int32 // user: %1382
  %1381 = integer_literal $Builtin.Int32, 6       // user: %1382
  %1382 = builtin "shl_Int32"(%1380 : $Builtin.Int32, %1381 : $Builtin.Int32) : $Builtin.Int32 // user: %1383
  %1383 = builtin "or_Int32"(%1378 : $Builtin.Int32, %1382 : $Builtin.Int32) : $Builtin.Int32 // user: %1384
  %1384 = struct $UInt32 (%1383 : $Builtin.Int32) // user: %1385
  %1385 = struct $Unicode.Scalar (%1384 : $UInt32) // user: %1386
  br bb166(%1385 : $Unicode.Scalar)               // id: %1386

bb165:                                            // Preds: bb159
  %1387 = integer_literal $Builtin.Int32, 1       // user: %1388
  %1388 = builtin "usub_with_overflow_Int32"(%1311 : $Builtin.Int32, %1387 : $Builtin.Int32, %872 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // user: %1389
  %1389 = tuple_extract %1388 : $(Builtin.Int32, Builtin.Int1), 0 // user: %1390
  %1390 = struct $UInt32 (%1389 : $Builtin.Int32) // user: %1391
  %1391 = struct $Unicode.Scalar (%1390 : $UInt32) // user: %1392
  br bb166(%1391 : $Unicode.Scalar)               // id: %1392

// %1393                                          // user: %1394
bb166(%1393 : $Unicode.Scalar):                   // Preds: bb165 bb164 bb163 bb162
  %1394 = struct_extract %1393 : $Unicode.Scalar, #Unicode.Scalar._value // users: %1424, %1407
  %1395 = string_literal utf8 "Not enough bits to represent a signed value" // user: %1397
  %1396 = integer_literal $Builtin.Word, 43       // user: %1399
  %1397 = builtin "ptrtoint_Word"(%1395 : $Builtin.RawPointer) : $Builtin.Word // user: %1399
  %1398 = integer_literal $Builtin.Int8, 2        // users: %1420, %1403, %1399
  %1399 = struct $StaticString (%1397 : $Builtin.Word, %1396 : $Builtin.Word, %1398 : $Builtin.Int8) // user: %1422
  %1400 = string_literal utf8 "/Users/buildnode/jenkins/workspace/oss-swift-package-osx/build/buildbot_osx/swift-macosx-x86_64/stdlib/public/core/8/Integers.swift" // user: %1402
  %1401 = integer_literal $Builtin.Word, 131      // user: %1403
  %1402 = builtin "ptrtoint_Word"(%1400 : $Builtin.RawPointer) : $Builtin.Word // user: %1403
  %1403 = struct $StaticString (%1402 : $Builtin.Word, %1401 : $Builtin.Word, %1398 : $Builtin.Int8) // user: %1422
  %1404 = integer_literal $Builtin.Int64, 3445    // user: %1405
  %1405 = struct $UInt (%1404 : $Builtin.Int64)   // user: %1422
  br bb167                                        // id: %1406

bb167:                                            // Preds: bb166
  %1407 = struct_extract %1394 : $UInt32, #UInt32._value // users: %1414, %1411, %1408
  %1408 = builtin "zextOrBitCast_Int32_Int64"(%1407 : $Builtin.Int32) : $Builtin.Int64 // user: %1409
  %1409 = builtin "truncOrBitCast_Int64_Int8"(%1408 : $Builtin.Int64) : $Builtin.Int8 // user: %1410
  %1410 = builtin "zextOrBitCast_Int8_Int32"(%1409 : $Builtin.Int8) : $Builtin.Int32 // user: %1411
  %1411 = builtin "cmp_eq_Int32"(%1410 : $Builtin.Int32, %1407 : $Builtin.Int32) : $Builtin.Int1 // user: %1412
  cond_br %1411, bb170, bb168                     // id: %1412

bb168:                                            // Preds: bb167
  %1413 = integer_literal $Builtin.Int32, 255     // user: %1414
  %1414 = builtin "cmp_ult_Int32"(%1413 : $Builtin.Int32, %1407 : $Builtin.Int32) : $Builtin.Int1 // user: %1415
  %1415 = builtin "int_expect_Int1"(%1414 : $Builtin.Int1, %872 : $Builtin.Int1) : $Builtin.Int1 // user: %1416
  cond_br %1415, bb169, bb170                     // id: %1416

bb169:                                            // Preds: bb168
  %1417 = string_literal utf8 "Fatal error"       // user: %1419
  %1418 = integer_literal $Builtin.Word, 11       // user: %1420
  %1419 = builtin "ptrtoint_Word"(%1417 : $Builtin.RawPointer) : $Builtin.Word // user: %1420
  %1420 = struct $StaticString (%1419 : $Builtin.Word, %1418 : $Builtin.Word, %1398 : $Builtin.Int8) // user: %1422
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %1421 = function_ref @$Ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %1422
  %1422 = apply %1421(%1420, %1399, %1403, %1405, %867) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %1423

bb170:                                            // Preds: bb168 bb167
  %1424 = struct_extract %1394 : $UInt32, #UInt32._value // user: %1425
  %1425 = builtin "zextOrBitCast_Int32_Int64"(%1424 : $Builtin.Int32) : $Builtin.Int64 // user: %1426
  %1426 = builtin "truncOrBitCast_Int64_Int8"(%1425 : $Builtin.Int64) : $Builtin.Int8 // user: %1427
  %1427 = struct $UInt8 (%1426 : $Builtin.Int8)   // user: %1429
  %1428 = pointer_to_address %879 : $Builtin.RawPointer to [strict] $*UInt8 // users: %1431, %1429
  store %1427 to %1428 : $*UInt8                  // id: %1429
  %1430 = integer_literal $Builtin.Word, 1        // user: %1431
  %1431 = index_addr %1428 : $*UInt8, %1430 : $Builtin.Word // user: %1432
  %1432 = address_to_pointer %1431 : $*UInt8 to $Builtin.RawPointer // user: %1433
  br bb103(%878 : $Builtin.Int1, %1432 : $Builtin.RawPointer) // id: %1433
} // end sil function '$SSS14_fromCodeUnits_8encoding24repairIllFormedSequences15minimumCapacitySSSg_Sb8hadErrortx_q_mSbSits10CollectionRzs16_UnicodeEncodingR_0B4UnitQy_7ElementRtzr0_lFZSRys5UInt8VG_s0N0O4UTF8OTgq5'

// _fatalErrorMessage(_:_:file:line:flags:)
sil [noinline] [_semantics "arc.programtermination_point"] @$Ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never

// _emptyStringStorage.unsafeMutableAddressor
sil [global_init] @$Ss19_emptyStringStorages6UInt32Vvau : $@convention(thin) () -> Builtin.RawPointer

// specialized static Unicode.UTF16.transcodedLength<A, B>(of:decodedAs:repairingIllFormedSequences:)
sil shared_external [serializable] @$Ss7UnicodeO5UTF16O16transcodedLength2of9decodedAs27repairingIllFormedSequencesSi5count_Sb7isASCIItSgx_q_mSbts16IteratorProtocolRzs01_A8EncodingR_8CodeUnitQy_7ElementRtzr0_lFZSR0O0Vys5UInt8V_G_AB4UTF8OTgq5 : $@convention(method) (UnsafeBufferPointer<UInt8>.Iterator, @thick Unicode.UTF8.Type, Bool, @thin Unicode.UTF16.Type) -> Optional<(count: Int, isASCII: Bool)> {
// %0                                             // users: %8, %6
// %1                                             // user: %18
// %2                                             // user: %551
bb0(%0 : $UnsafeBufferPointer<UInt8>.Iterator, %1 : $@thick Unicode.UTF8.Type, %2 : $Bool, %3 : $@thin Unicode.UTF16.Type):
  %4 = integer_literal $Builtin.Int64, 0          // users: %795, %786, %771, %24, %23
  %5 = alloc_stack $Optional<UnsafePointer<UInt8>> // users: %913, %293, %258, %195, %160, %62, %27, %7
  %6 = struct_extract %0 : $UnsafeBufferPointer<UInt8>.Iterator, #UnsafeBufferPointer.Iterator._position // user: %7
  store %6 to %5 : $*Optional<UnsafePointer<UInt8>> // id: %7
  %8 = struct_extract %0 : $UnsafeBufferPointer<UInt8>.Iterator, #UnsafeBufferPointer.Iterator._end // users: %284, %282, %260, %186, %184, %162, %53, %51, %29
  %9 = alloc_stack $Unicode.UTF8.ForwardParser    // users: %912, %489, %368, %302, %208, %145, %124, %120, %17
  %10 = metatype $@thick Unicode.UTF8.ForwardParser.Type // users: %105, %104
  %11 = integer_literal $Builtin.Int32, 0         // users: %476, %443, %432, %13
  %12 = integer_literal $Builtin.Int8, 0          // users: %899, %884, %366, %206, %143, %133, %24, %14
  %13 = struct $UInt32 (%11 : $Builtin.Int32)     // users: %758, %726, %524, %416, %363, %278, %180, %114, %47, %15
  %14 = struct $UInt8 (%12 : $Builtin.Int8)       // users: %147, %15
  %15 = struct $_UIntBuffer<UInt32, UInt8> (%13 : $UInt32, %14 : $UInt8) // user: %16
  %16 = struct $Unicode.UTF8.ForwardParser (%15 : $_UIntBuffer<UInt32, UInt8>) // user: %17
  store %16 to %9 : $*Unicode.UTF8.ForwardParser  // id: %17
  %18 = init_existential_metatype %1 : $@thick Unicode.UTF8.Type, $@thick Any.Type // user: %21
  %19 = metatype $@thick Unicode.UTF8.Type        // users: %572, %568, %567, %20
  %20 = init_existential_metatype %19 : $@thick Unicode.UTF8.Type, $@thick Any.Type // user: %21
  %21 = builtin "is_same_metatype"(%18 : $@thick Any.Type, %20 : $@thick Any.Type) : $Builtin.Int1 // user: %22
  cond_br %21, bb2, bb1                           // id: %22

bb1:                                              // Preds: bb0
  br bb20(%4 : $Builtin.Int64)                    // id: %23

bb2:                                              // Preds: bb0
  br bb3(%4 : $Builtin.Int64, %12 : $Builtin.Int8) // id: %24

// %25                                            // users: %906, %121, %78
// %26                                            // user: %83
bb3(%25 : $Builtin.Int64, %26 : $Builtin.Int8):   // Preds: bb13 bb2
  %27 = load %5 : $*Optional<UnsafePointer<UInt8>> // users: %50, %28
  switch_enum %27 : $Optional<UnsafePointer<UInt8>>, case #Optional.some!enumelt.1: bb8, case #Optional.none!enumelt: bb4 // id: %28

bb4:                                              // Preds: bb3
  switch_enum %8 : $Optional<UnsafePointer<UInt8>>, case #Optional.none!enumelt: bb7, case #Optional.some!enumelt.1: bb5 // id: %29

bb5:                                              // Preds: bb4
  %30 = string_literal utf8 "/Users/buildnode/jenkins/workspace/oss-swift-package-osx/build/buildbot_osx/swift-macosx-x86_64/stdlib/public/core/8/UnsafeBufferPointer.swift" // user: %37
  %31 = integer_literal $Builtin.Word, 142        // user: %38
  %32 = string_literal utf8 "Unexpectedly found nil while unwrapping an Optional value" // user: %34
  %33 = integer_literal $Builtin.Word, 57         // user: %36
  %34 = builtin "ptrtoint_Word"(%32 : $Builtin.RawPointer) : $Builtin.Word // user: %36
  %35 = integer_literal $Builtin.Int8, 2          // users: %45, %38, %36
  %36 = struct $StaticString (%34 : $Builtin.Word, %33 : $Builtin.Word, %35 : $Builtin.Int8) // user: %47
  %37 = builtin "ptrtoint_Word"(%30 : $Builtin.RawPointer) : $Builtin.Word // user: %38
  %38 = struct $StaticString (%37 : $Builtin.Word, %31 : $Builtin.Word, %35 : $Builtin.Int8) // user: %47
  %39 = integer_literal $Builtin.Int64, 576       // user: %40
  %40 = struct $UInt (%39 : $Builtin.Int64)       // user: %47
  br bb6                                          // id: %41

bb6:                                              // Preds: bb5
  %42 = string_literal utf8 "Fatal error"         // user: %44
  %43 = integer_literal $Builtin.Word, 11         // user: %45
  %44 = builtin "ptrtoint_Word"(%42 : $Builtin.RawPointer) : $Builtin.Word // user: %45
  %45 = struct $StaticString (%44 : $Builtin.Word, %43 : $Builtin.Word, %35 : $Builtin.Int8) // user: %47
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %46 = function_ref @$Ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %47
  %47 = apply %46(%45, %36, %38, %40, %13) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %48

bb7:                                              // Preds: bb4
  br bb14                                         // id: %49

bb8:                                              // Preds: bb3
  %50 = unchecked_enum_data %27 : $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1 // users: %58, %54
  switch_enum %8 : $Optional<UnsafePointer<UInt8>>, case #Optional.some!enumelt.1: bb10, case #Optional.none!enumelt: bb9 // id: %51

bb9:                                              // Preds: bb8
  br bb11                                         // id: %52

bb10:                                             // Preds: bb8
  %53 = unchecked_enum_data %8 : $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1 // user: %55
  %54 = struct_extract %50 : $UnsafePointer<UInt8>, #UnsafePointer._rawValue // user: %56
  %55 = struct_extract %53 : $UnsafePointer<UInt8>, #UnsafePointer._rawValue // user: %56
  %56 = builtin "cmp_eq_RawPointer"(%54 : $Builtin.RawPointer, %55 : $Builtin.RawPointer) : $Builtin.Int1 // user: %57
  cond_br %56, bb14, bb11                         // id: %57

bb11:                                             // Preds: bb10 bb9
  %58 = struct_extract %50 : $UnsafePointer<UInt8>, #UnsafePointer._rawValue // user: %59
  %59 = pointer_to_address %58 : $Builtin.RawPointer to [strict] $*UInt8 // user: %60
  %60 = struct_element_addr %59 : $*UInt8, #UInt8._value // user: %61
  %61 = load %60 : $*Builtin.Int8                 // users: %82, %76, %72
  %62 = unchecked_take_enum_data_addr %5 : $*Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1 // users: %70, %63
  %63 = struct_element_addr %62 : $*UnsafePointer<UInt8>, #UnsafePointer._rawValue // user: %64
  %64 = load %63 : $*Builtin.RawPointer           // user: %66
  %65 = integer_literal $Builtin.Word, 1          // user: %67
  %66 = pointer_to_address %64 : $Builtin.RawPointer to [strict] $*UInt8 // user: %67
  %67 = index_addr %66 : $*UInt8, %65 : $Builtin.Word // user: %68
  %68 = address_to_pointer %67 : $*UInt8 to $Builtin.RawPointer // user: %69
  %69 = struct $UnsafePointer<UInt8> (%68 : $Builtin.RawPointer) // user: %70
  store %69 to %62 : $*UnsafePointer<UInt8>       // id: %70
  %71 = integer_literal $Builtin.Int8, -128       // user: %72
  %72 = builtin "cmp_ult_Int8"(%61 : $Builtin.Int8, %71 : $Builtin.Int8) : $Builtin.Int1 // user: %74
  %73 = integer_literal $Builtin.Int1, -1         // users: %78, %74
  %74 = builtin "int_expect_Int1"(%72 : $Builtin.Int1, %73 : $Builtin.Int1) : $Builtin.Int1 // user: %75
  cond_br %74, bb13, bb12                         // id: %75

bb12:                                             // Preds: bb11
  br bb15(%61 : $Builtin.Int8)                    // id: %76

bb13:                                             // Preds: bb11
  %77 = integer_literal $Builtin.Int64, 1         // user: %78
  %78 = builtin "sadd_with_overflow_Int64"(%25 : $Builtin.Int64, %77 : $Builtin.Int64, %73 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %80, %79
  %79 = tuple_extract %78 : $(Builtin.Int64, Builtin.Int1), 0 // user: %82
  %80 = tuple_extract %78 : $(Builtin.Int64, Builtin.Int1), 1 // user: %81
  cond_fail %80 : $Builtin.Int1                   // id: %81
  br bb3(%79 : $Builtin.Int64, %61 : $Builtin.Int8) // id: %82

bb14:                                             // Preds: bb10 bb7
  br bb15(%26 : $Builtin.Int8)                    // id: %83

// %84                                            // users: %90, %86
bb15(%84 : $Builtin.Int8):                        // Preds: bb14 bb12
  %85 = integer_literal $Builtin.Int8, -128       // user: %86
  %86 = builtin "cmp_ult_Int8"(%84 : $Builtin.Int8, %85 : $Builtin.Int8) : $Builtin.Int1 // user: %88
  %87 = integer_literal $Builtin.Int1, -1         // users: %907, %107, %88
  %88 = builtin "int_expect_Int1"(%86 : $Builtin.Int1, %87 : $Builtin.Int1) : $Builtin.Int1 // user: %89
  cond_br %88, bb115, bb16                        // id: %89

bb16:                                             // Preds: bb15
  %90 = builtin "zextOrBitCast_Int8_Int32"(%84 : $Builtin.Int8) : $Builtin.Int32 // user: %116
  %91 = integer_literal $Builtin.Int8, 8          // user: %117
  %92 = string_literal utf8 "_identityCast to wrong type" // user: %94
  %93 = integer_literal $Builtin.Word, 27         // user: %96
  %94 = builtin "ptrtoint_Word"(%92 : $Builtin.RawPointer) : $Builtin.Word // user: %96
  %95 = integer_literal $Builtin.Int8, 2          // users: %112, %100, %96
  %96 = struct $StaticString (%94 : $Builtin.Word, %93 : $Builtin.Word, %95 : $Builtin.Int8) // user: %114
  %97 = string_literal utf8 "/Users/buildnode/jenkins/workspace/oss-swift-package-osx/swift/stdlib/public/core/Builtin.swift" // user: %99
  %98 = integer_literal $Builtin.Word, 95         // user: %100
  %99 = builtin "ptrtoint_Word"(%97 : $Builtin.RawPointer) : $Builtin.Word // user: %100
  %100 = struct $StaticString (%99 : $Builtin.Word, %98 : $Builtin.Word, %95 : $Builtin.Int8) // user: %114
  %101 = integer_literal $Builtin.Int64, 101      // user: %102
  %102 = struct $UInt (%101 : $Builtin.Int64)     // user: %114
  br bb17                                         // id: %103

bb17:                                             // Preds: bb16
  %104 = init_existential_metatype %10 : $@thick Unicode.UTF8.ForwardParser.Type, $@thick Any.Type // user: %106
  %105 = init_existential_metatype %10 : $@thick Unicode.UTF8.ForwardParser.Type, $@thick Any.Type // user: %106
  %106 = builtin "is_same_metatype"(%104 : $@thick Any.Type, %105 : $@thick Any.Type) : $Builtin.Int1 // user: %107
  %107 = builtin "int_expect_Int1"(%106 : $Builtin.Int1, %87 : $Builtin.Int1) : $Builtin.Int1 // user: %108
  cond_br %107, bb19, bb18                        // id: %108

bb18:                                             // Preds: bb17
  %109 = string_literal utf8 "Fatal error"        // user: %111
  %110 = integer_literal $Builtin.Word, 11        // user: %112
  %111 = builtin "ptrtoint_Word"(%109 : $Builtin.RawPointer) : $Builtin.Word // user: %112
  %112 = struct $StaticString (%111 : $Builtin.Word, %110 : $Builtin.Word, %95 : $Builtin.Int8) // user: %114
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %113 = function_ref @$Ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %114
  %114 = apply %113(%112, %96, %100, %102, %13) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %115

bb19:                                             // Preds: bb17
  %116 = struct $UInt32 (%90 : $Builtin.Int32)    // user: %118
  %117 = struct $UInt8 (%91 : $Builtin.Int8)      // user: %118
  %118 = struct $_UIntBuffer<UInt32, UInt8> (%116 : $UInt32, %117 : $UInt8) // user: %119
  %119 = struct $Unicode.UTF8.ForwardParser (%118 : $_UIntBuffer<UInt32, UInt8>) // user: %120
  store %119 to %9 : $*Unicode.UTF8.ForwardParser // id: %120
  br bb20(%25 : $Builtin.Int64)                   // id: %121

// %122                                           // user: %128
bb20(%122 : $Builtin.Int64):                      // Preds: bb19 bb1
  %123 = integer_literal $Builtin.Int16, 0        // users: %420, %128
  %124 = struct_element_addr %9 : $*Unicode.UTF8.ForwardParser, #Unicode.UTF8.ForwardParser._buffer // users: %489, %302, %208, %145, %136, %125
  %125 = struct_element_addr %124 : $*_UIntBuffer<UInt32, UInt8>, #_UIntBuffer._bitCount // user: %126
  %126 = struct_element_addr %125 : $*UInt8, #UInt8._value // users: %492, %365, %351, %132
  %127 = integer_literal $Builtin.Int1, -1        // users: %878, %826, %816, %809, %807, %796, %787, %772, %751, %719, %684, %674, %667, %665, %576, %570, %557, %552, %498, %448, %440, %429, %322, %228, %134
  br bb21(%122 : $Builtin.Int64, %123 : $Builtin.Int16) // id: %128

// %129                                           // users: %878, %557, %544
// %130                                           // users: %903, %889, %562, %546
bb21(%129 : $Builtin.Int64, %130 : $Builtin.Int16): // Preds: bb114 bb77 bb20
  %131 = alloc_stack $Unicode.ParseResult<_ValidUTF8Buffer<UInt32>> // users: %541, %540, %538, %535, %526, %517, %514, %510, %508, %500, %158, %149
  %132 = load %126 : $*Builtin.Int8               // user: %133
  %133 = builtin "cmp_eq_Int8"(%132 : $Builtin.Int8, %12 : $Builtin.Int8) : $Builtin.Int1 // user: %134
  %134 = builtin "int_expect_Int1"(%133 : $Builtin.Int1, %127 : $Builtin.Int1) : $Builtin.Int1 // user: %135
  cond_br %134, bb24, bb22                        // id: %135

bb22:                                             // Preds: bb21
  %136 = struct_element_addr %124 : $*_UIntBuffer<UInt32, UInt8>, #_UIntBuffer._storage // user: %137
  %137 = struct_element_addr %136 : $*UInt32, #UInt32._value // user: %138
  %138 = load %137 : $*Builtin.Int32              // user: %139
  %139 = builtin "zextOrBitCast_Int32_Int64"(%138 : $Builtin.Int32) : $Builtin.Int64 // user: %140
  %140 = builtin "truncOrBitCast_Int64_Int8"(%139 : $Builtin.Int64) : $Builtin.Int8 // users: %152, %142
  %141 = integer_literal $Builtin.Int8, -128      // user: %142
  %142 = builtin "and_Int8"(%140 : $Builtin.Int8, %141 : $Builtin.Int8) : $Builtin.Int8 // user: %143
  %143 = builtin "cmp_eq_Int8"(%142 : $Builtin.Int8, %12 : $Builtin.Int8) : $Builtin.Int1 // user: %144
  cond_br %143, bb23, bb36                        // id: %144

bb23:                                             // Preds: bb22
  %145 = mark_dependence %124 : $*_UIntBuffer<UInt32, UInt8> on %9 : $*Unicode.UTF8.ForwardParser // user: %148
  // function_ref specialized RangeReplaceableCollection.remove(at:)
  %146 = function_ref @$Ss26RangeReplaceableCollectionPsE6remove2at7ElementQz5IndexQz_tFs11_UIntBufferVys6UInt32Vs5UInt8VG_Tgq5 : $@convention(method) (_UIntBuffer<UInt32, UInt8>.Index, @inout _UIntBuffer<UInt32, UInt8>) -> UInt8 // user: %148
  %147 = struct $_UIntBuffer<UInt32, UInt8>.Index (%14 : $UInt8) // user: %148
  %148 = apply %146(%147, %145) : $@convention(method) (_UIntBuffer<UInt32, UInt8>.Index, @inout _UIntBuffer<UInt32, UInt8>) -> UInt8
  %149 = init_enum_data_addr %131 : $*Unicode.ParseResult<_ValidUTF8Buffer<UInt32>>, #Unicode.ParseResult.valid!enumelt.1 // user: %157
  %150 = integer_literal $Builtin.Int1, 0         // user: %152
  %151 = integer_literal $Builtin.Int8, 1         // user: %152
  %152 = builtin "uadd_with_overflow_Int8"(%140 : $Builtin.Int8, %151 : $Builtin.Int8, %150 : $Builtin.Int1) : $(Builtin.Int8, Builtin.Int1) // user: %153
  %153 = tuple_extract %152 : $(Builtin.Int8, Builtin.Int1), 0 // user: %154
  %154 = builtin "zextOrBitCast_Int8_Int32"(%153 : $Builtin.Int8) : $Builtin.Int32 // user: %155
  %155 = struct $UInt32 (%154 : $Builtin.Int32)   // user: %156
  %156 = struct $_ValidUTF8Buffer<UInt32> (%155 : $UInt32) // user: %157
  store %156 to %149 : $*_ValidUTF8Buffer<UInt32> // id: %157
  inject_enum_addr %131 : $*Unicode.ParseResult<_ValidUTF8Buffer<UInt32>>, #Unicode.ParseResult.valid!enumelt.1 // id: %158
  br bb72                                         // id: %159

bb24:                                             // Preds: bb21
  %160 = load %5 : $*Optional<UnsafePointer<UInt8>> // users: %183, %161
  switch_enum %160 : $Optional<UnsafePointer<UInt8>>, case #Optional.some!enumelt.1: bb29, case #Optional.none!enumelt: bb25 // id: %161

bb25:                                             // Preds: bb24
  switch_enum %8 : $Optional<UnsafePointer<UInt8>>, case #Optional.none!enumelt: bb28, case #Optional.some!enumelt.1: bb26 // id: %162

bb26:                                             // Preds: bb25
  %163 = string_literal utf8 "/Users/buildnode/jenkins/workspace/oss-swift-package-osx/build/buildbot_osx/swift-macosx-x86_64/stdlib/public/core/8/UnsafeBufferPointer.swift" // user: %170
  %164 = integer_literal $Builtin.Word, 142       // user: %171
  %165 = string_literal utf8 "Unexpectedly found nil while unwrapping an Optional value" // user: %167
  %166 = integer_literal $Builtin.Word, 57        // user: %169
  %167 = builtin "ptrtoint_Word"(%165 : $Builtin.RawPointer) : $Builtin.Word // user: %169
  %168 = integer_literal $Builtin.Int8, 2         // users: %178, %171, %169
  %169 = struct $StaticString (%167 : $Builtin.Word, %166 : $Builtin.Word, %168 : $Builtin.Int8) // user: %180
  %170 = builtin "ptrtoint_Word"(%163 : $Builtin.RawPointer) : $Builtin.Word // user: %171
  %171 = struct $StaticString (%170 : $Builtin.Word, %164 : $Builtin.Word, %168 : $Builtin.Int8) // user: %180
  %172 = integer_literal $Builtin.Int64, 576      // user: %173
  %173 = struct $UInt (%172 : $Builtin.Int64)     // user: %180
  br bb27                                         // id: %174

bb27:                                             // Preds: bb26
  %175 = string_literal utf8 "Fatal error"        // user: %177
  %176 = integer_literal $Builtin.Word, 11        // user: %178
  %177 = builtin "ptrtoint_Word"(%175 : $Builtin.RawPointer) : $Builtin.Word // user: %178
  %178 = struct $StaticString (%177 : $Builtin.Word, %176 : $Builtin.Word, %168 : $Builtin.Int8) // user: %180
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %179 = function_ref @$Ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %180
  %180 = apply %179(%178, %169, %171, %173, %13) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %181

bb28:                                             // Preds: bb25
  br bb71                                         // id: %182

bb29:                                             // Preds: bb24
  %183 = unchecked_enum_data %160 : $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1 // users: %191, %187
  switch_enum %8 : $Optional<UnsafePointer<UInt8>>, case #Optional.some!enumelt.1: bb31, case #Optional.none!enumelt: bb30 // id: %184

bb30:                                             // Preds: bb29
  br bb32                                         // id: %185

bb31:                                             // Preds: bb29
  %186 = unchecked_enum_data %8 : $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1 // user: %188
  %187 = struct_extract %183 : $UnsafePointer<UInt8>, #UnsafePointer._rawValue // user: %189
  %188 = struct_extract %186 : $UnsafePointer<UInt8>, #UnsafePointer._rawValue // user: %189
  %189 = builtin "cmp_eq_RawPointer"(%187 : $Builtin.RawPointer, %188 : $Builtin.RawPointer) : $Builtin.Int1 // user: %190
  cond_br %189, bb71, bb32                        // id: %190

bb32:                                             // Preds: bb31 bb30
  %191 = struct_extract %183 : $UnsafePointer<UInt8>, #UnsafePointer._rawValue // user: %192
  %192 = pointer_to_address %191 : $Builtin.RawPointer to [strict] $*UInt8 // user: %193
  %193 = struct_element_addr %192 : $*UInt8, #UInt8._value // user: %194
  %194 = load %193 : $*Builtin.Int8               // users: %529, %237, %205
  %195 = unchecked_take_enum_data_addr %5 : $*Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1 // users: %203, %196
  %196 = struct_element_addr %195 : $*UnsafePointer<UInt8>, #UnsafePointer._rawValue // user: %197
  %197 = load %196 : $*Builtin.RawPointer         // user: %199
  %198 = integer_literal $Builtin.Word, 1         // user: %200
  %199 = pointer_to_address %197 : $Builtin.RawPointer to [strict] $*UInt8 // user: %200
  %200 = index_addr %199 : $*UInt8, %198 : $Builtin.Word // user: %201
  %201 = address_to_pointer %200 : $*UInt8 to $Builtin.RawPointer // user: %202
  %202 = struct $UnsafePointer<UInt8> (%201 : $Builtin.RawPointer) // user: %203
  store %202 to %195 : $*UnsafePointer<UInt8>     // id: %203
  %204 = integer_literal $Builtin.Int8, -128      // user: %205
  %205 = builtin "and_Int8"(%194 : $Builtin.Int8, %204 : $Builtin.Int8) : $Builtin.Int8 // user: %206
  %206 = builtin "cmp_eq_Int8"(%205 : $Builtin.Int8, %12 : $Builtin.Int8) : $Builtin.Int1 // user: %207
  cond_br %206, bb70, bb33                        // id: %207

bb33:                                             // Preds: bb32
  %208 = mark_dependence %124 : $*_UIntBuffer<UInt32, UInt8> on %9 : $*Unicode.UTF8.ForwardParser // users: %245, %238, %221
  %209 = string_literal utf8 ""                   // user: %211
  %210 = integer_literal $Builtin.Word, 0         // user: %213
  %211 = builtin "ptrtoint_Word"(%209 : $Builtin.RawPointer) : $Builtin.Word // user: %213
  %212 = integer_literal $Builtin.Int8, 2         // users: %522, %217, %213
  %213 = struct $StaticString (%211 : $Builtin.Word, %210 : $Builtin.Word, %212 : $Builtin.Int8) // user: %524
  %214 = string_literal utf8 "/Users/buildnode/jenkins/workspace/oss-swift-package-osx/swift/stdlib/public/core/UIntBuffer.swift" // user: %216
  %215 = integer_literal $Builtin.Word, 98        // user: %217
  %216 = builtin "ptrtoint_Word"(%214 : $Builtin.RawPointer) : $Builtin.Word // user: %217
  %217 = struct $StaticString (%216 : $Builtin.Word, %215 : $Builtin.Word, %212 : $Builtin.Int8) // user: %524
  %218 = integer_literal $Builtin.Int64, 194      // user: %219
  %219 = struct $UInt (%218 : $Builtin.Int64)     // user: %524
  br bb34                                         // id: %220

bb34:                                             // Preds: bb33
  %221 = struct_element_addr %208 : $*_UIntBuffer<UInt32, UInt8>, #_UIntBuffer._bitCount // user: %222
  %222 = struct_element_addr %221 : $*UInt8, #UInt8._value // user: %223
  %223 = load %222 : $*Builtin.Int8               // user: %224
  %224 = builtin "zextOrBitCast_Int8_Int64"(%223 : $Builtin.Int8) : $Builtin.Int64 // user: %226
  %225 = integer_literal $Builtin.Int64, 8        // user: %226
  %226 = builtin "sdiv_Int64"(%224 : $Builtin.Int64, %225 : $Builtin.Int64) : $Builtin.Int64 // user: %228
  %227 = integer_literal $Builtin.Int64, 1        // user: %228
  %228 = builtin "sadd_with_overflow_Int64"(%226 : $Builtin.Int64, %227 : $Builtin.Int64, %127 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %230, %229
  %229 = tuple_extract %228 : $(Builtin.Int64, Builtin.Int1), 0 // user: %233
  %230 = tuple_extract %228 : $(Builtin.Int64, Builtin.Int1), 1 // user: %231
  cond_fail %230 : $Builtin.Int1                  // id: %231
  %232 = integer_literal $Builtin.Int64, 4        // user: %233
  %233 = builtin "cmp_slt_Int64"(%232 : $Builtin.Int64, %229 : $Builtin.Int64) : $Builtin.Int1 // user: %235
  %234 = integer_literal $Builtin.Int1, 0         // user: %235
  %235 = builtin "int_expect_Int1"(%233 : $Builtin.Int1, %234 : $Builtin.Int1) : $Builtin.Int1 // user: %236
  cond_br %235, bb69, bb35                        // id: %236

bb35:                                             // Preds: bb34
  %237 = builtin "zextOrBitCast_Int8_Int32"(%194 : $Builtin.Int8) : $Builtin.Int32 // user: %244
  %238 = struct_element_addr %208 : $*_UIntBuffer<UInt32, UInt8>, #_UIntBuffer._bitCount // users: %256, %239
  %239 = struct_element_addr %238 : $*UInt8, #UInt8._value // user: %240
  %240 = load %239 : $*Builtin.Int8               // users: %253, %241
  %241 = builtin "zextOrBitCast_Int8_Int32"(%240 : $Builtin.Int8) : $Builtin.Int32 // user: %243
  %242 = integer_literal $Builtin.Int32, 31       // user: %243
  %243 = builtin "and_Int32"(%241 : $Builtin.Int32, %242 : $Builtin.Int32) : $Builtin.Int32 // user: %244
  %244 = builtin "shl_Int32"(%237 : $Builtin.Int32, %243 : $Builtin.Int32) : $Builtin.Int32 // user: %248
  %245 = struct_element_addr %208 : $*_UIntBuffer<UInt32, UInt8>, #_UIntBuffer._storage // users: %250, %246
  %246 = struct_element_addr %245 : $*UInt32, #UInt32._value // user: %247
  %247 = load %246 : $*Builtin.Int32              // user: %248
  %248 = builtin "or_Int32"(%247 : $Builtin.Int32, %244 : $Builtin.Int32) : $Builtin.Int32 // user: %249
  %249 = struct $UInt32 (%248 : $Builtin.Int32)   // user: %250
  store %249 to %245 : $*UInt32                   // id: %250
  %251 = integer_literal $Builtin.Int8, 8         // user: %253
  %252 = integer_literal $Builtin.Int1, 0         // user: %253
  %253 = builtin "uadd_with_overflow_Int8"(%240 : $Builtin.Int8, %251 : $Builtin.Int8, %252 : $Builtin.Int1) : $(Builtin.Int8, Builtin.Int1) // user: %254
  %254 = tuple_extract %253 : $(Builtin.Int8, Builtin.Int1), 0 // user: %255
  %255 = struct $UInt8 (%254 : $Builtin.Int8)     // user: %256
  store %255 to %238 : $*UInt8                    // id: %256
  br bb36                                         // id: %257

bb36:                                             // Preds: bb46 bb35 bb22
  %258 = load %5 : $*Optional<UnsafePointer<UInt8>> // users: %281, %259
  switch_enum %258 : $Optional<UnsafePointer<UInt8>>, case #Optional.some!enumelt.1: bb41, case #Optional.none!enumelt: bb37 // id: %259

bb37:                                             // Preds: bb36
  switch_enum %8 : $Optional<UnsafePointer<UInt8>>, case #Optional.none!enumelt: bb40, case #Optional.some!enumelt.1: bb38 // id: %260

bb38:                                             // Preds: bb37
  %261 = string_literal utf8 "/Users/buildnode/jenkins/workspace/oss-swift-package-osx/build/buildbot_osx/swift-macosx-x86_64/stdlib/public/core/8/UnsafeBufferPointer.swift" // user: %268
  %262 = integer_literal $Builtin.Word, 142       // user: %269
  %263 = string_literal utf8 "Unexpectedly found nil while unwrapping an Optional value" // user: %265
  %264 = integer_literal $Builtin.Word, 57        // user: %267
  %265 = builtin "ptrtoint_Word"(%263 : $Builtin.RawPointer) : $Builtin.Word // user: %267
  %266 = integer_literal $Builtin.Int8, 2         // users: %276, %269, %267
  %267 = struct $StaticString (%265 : $Builtin.Word, %264 : $Builtin.Word, %266 : $Builtin.Int8) // user: %278
  %268 = builtin "ptrtoint_Word"(%261 : $Builtin.RawPointer) : $Builtin.Word // user: %269
  %269 = struct $StaticString (%268 : $Builtin.Word, %262 : $Builtin.Word, %266 : $Builtin.Int8) // user: %278
  %270 = integer_literal $Builtin.Int64, 576      // user: %271
  %271 = struct $UInt (%270 : $Builtin.Int64)     // user: %278
  br bb39                                         // id: %272

bb39:                                             // Preds: bb38
  %273 = string_literal utf8 "Fatal error"        // user: %275
  %274 = integer_literal $Builtin.Word, 11        // user: %276
  %275 = builtin "ptrtoint_Word"(%273 : $Builtin.RawPointer) : $Builtin.Word // user: %276
  %276 = struct $StaticString (%275 : $Builtin.Word, %274 : $Builtin.Word, %266 : $Builtin.Int8) // user: %278
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %277 = function_ref @$Ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %278
  %278 = apply %277(%276, %267, %269, %271, %13) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %279

bb40:                                             // Preds: bb37
  br bb48                                         // id: %280

bb41:                                             // Preds: bb36
  %281 = unchecked_enum_data %258 : $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1 // users: %289, %285
  switch_enum %8 : $Optional<UnsafePointer<UInt8>>, case #Optional.some!enumelt.1: bb43, case #Optional.none!enumelt: bb42 // id: %282

bb42:                                             // Preds: bb41
  br bb44                                         // id: %283

bb43:                                             // Preds: bb41
  %284 = unchecked_enum_data %8 : $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1 // user: %286
  %285 = struct_extract %281 : $UnsafePointer<UInt8>, #UnsafePointer._rawValue // user: %287
  %286 = struct_extract %284 : $UnsafePointer<UInt8>, #UnsafePointer._rawValue // user: %287
  %287 = builtin "cmp_eq_RawPointer"(%285 : $Builtin.RawPointer, %286 : $Builtin.RawPointer) : $Builtin.Int1 // user: %288
  cond_br %287, bb48, bb44                        // id: %288

bb44:                                             // Preds: bb43 bb42
  %289 = struct_extract %281 : $UnsafePointer<UInt8>, #UnsafePointer._rawValue // user: %290
  %290 = pointer_to_address %289 : $Builtin.RawPointer to [strict] $*UInt8 // user: %291
  %291 = struct_element_addr %290 : $*UInt8, #UInt8._value // user: %292
  %292 = load %291 : $*Builtin.Int8               // user: %331
  %293 = unchecked_take_enum_data_addr %5 : $*Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt.1 // users: %301, %294
  %294 = struct_element_addr %293 : $*UnsafePointer<UInt8>, #UnsafePointer._rawValue // user: %295
  %295 = load %294 : $*Builtin.RawPointer         // user: %297
  %296 = integer_literal $Builtin.Word, 1         // user: %298
  %297 = pointer_to_address %295 : $Builtin.RawPointer to [strict] $*UInt8 // user: %298
  %298 = index_addr %297 : $*UInt8, %296 : $Builtin.Word // user: %299
  %299 = address_to_pointer %298 : $*UInt8 to $Builtin.RawPointer // user: %300
  %300 = struct $UnsafePointer<UInt8> (%299 : $Builtin.RawPointer) // user: %301
  store %300 to %293 : $*UnsafePointer<UInt8>     // id: %301
  %302 = mark_dependence %124 : $*_UIntBuffer<UInt32, UInt8> on %9 : $*Unicode.UTF8.ForwardParser // users: %339, %332, %315
  %303 = string_literal utf8 ""                   // user: %305
  %304 = integer_literal $Builtin.Word, 0         // user: %307
  %305 = builtin "ptrtoint_Word"(%303 : $Builtin.RawPointer) : $Builtin.Word // user: %307
  %306 = integer_literal $Builtin.Int8, 2         // users: %361, %311, %307
  %307 = struct $StaticString (%305 : $Builtin.Word, %304 : $Builtin.Word, %306 : $Builtin.Int8) // user: %363
  %308 = string_literal utf8 "/Users/buildnode/jenkins/workspace/oss-swift-package-osx/swift/stdlib/public/core/UIntBuffer.swift" // user: %310
  %309 = integer_literal $Builtin.Word, 98        // user: %311
  %310 = builtin "ptrtoint_Word"(%308 : $Builtin.RawPointer) : $Builtin.Word // user: %311
  %311 = struct $StaticString (%310 : $Builtin.Word, %309 : $Builtin.Word, %306 : $Builtin.Int8) // user: %363
  %312 = integer_literal $Builtin.Int64, 194      // user: %313
  %313 = struct $UInt (%312 : $Builtin.Int64)     // user: %363
  br bb45                                         // id: %314

bb45:                                             // Preds: bb44
  %315 = struct_element_addr %302 : $*_UIntBuffer<UInt32, UInt8>, #_UIntBuffer._bitCount // user: %316
  %316 = struct_element_addr %315 : $*UInt8, #UInt8._value // user: %317
  %317 = load %316 : $*Builtin.Int8               // user: %318
  %318 = builtin "zextOrBitCast_Int8_Int64"(%317 : $Builtin.Int8) : $Builtin.Int64 // user: %320
  %319 = integer_literal $Builtin.Int64, 8        // user: %320
  %320 = builtin "sdiv_Int64"(%318 : $Builtin.Int64, %319 : $Builtin.Int64) : $Builtin.Int64 // user: %322
  %321 = integer_literal $Builtin.Int64, 1        // user: %322
  %322 = builtin "sadd_with_overflow_Int64"(%320 : $Builtin.Int64, %321 : $Builtin.Int64, %127 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %324, %323
  %323 = tuple_extract %322 : $(Builtin.Int64, Builtin.Int1), 0 // user: %327
  %324 = tuple_extract %322 : $(Builtin.Int64, Builtin.Int1), 1 // user: %325
  cond_fail %324 : $Builtin.Int1                  // id: %325
  %326 = integer_literal $Builtin.Int64, 4        // user: %327
  %327 = builtin "cmp_slt_Int64"(%326 : $Builtin.Int64, %323 : $Builtin.Int64) : $Builtin.Int1 // user: %329
  %328 = integer_literal $Builtin.Int1, 0         // user: %329
  %329 = builtin "int_expect_Int1"(%327 : $Builtin.Int1, %328 : $Builtin.Int1) : $Builtin.Int1 // user: %330
  cond_br %329, bb47, bb46                        // id: %330

bb46:                                             // Preds: bb45
  %331 = builtin "zextOrBitCast_Int8_Int32"(%292 : $Builtin.Int8) : $Builtin.Int32 // user: %338
  %332 = struct_element_addr %302 : $*_UIntBuffer<UInt32, UInt8>, #_UIntBuffer._bitCount // users: %350, %333
  %333 = struct_element_addr %332 : $*UInt8, #UInt8._value // user: %334
  %334 = load %333 : $*Builtin.Int8               // users: %347, %335
  %335 = builtin "zextOrBitCast_Int8_Int32"(%334 : $Builtin.Int8) : $Builtin.Int32 // user: %337
  %336 = integer_literal $Builtin.Int32, 31       // user: %337
  %337 = builtin "and_Int32"(%335 : $Builtin.Int32, %336 : $Builtin.Int32) : $Builtin.Int32 // user: %338
  %338 = builtin "shl_Int32"(%331 : $Builtin.Int32, %337 : $Builtin.Int32) : $Builtin.Int32 // user: %342
  %339 = struct_element_addr %302 : $*_UIntBuffer<UInt32, UInt8>, #_UIntBuffer._storage // users: %344, %340
  %340 = struct_element_addr %339 : $*UInt32, #UInt32._value // user: %341
  %341 = load %340 : $*Builtin.Int32              // user: %342
  %342 = builtin "or_Int32"(%341 : $Builtin.Int32, %338 : $Builtin.Int32) : $Builtin.Int32 // user: %343
  %343 = struct $UInt32 (%342 : $Builtin.Int32)   // user: %344
  store %343 to %339 : $*UInt32                   // id: %344
  %345 = integer_literal $Builtin.Int8, 8         // user: %347
  %346 = integer_literal $Builtin.Int1, 0         // user: %347
  %347 = builtin "uadd_with_overflow_Int8"(%334 : $Builtin.Int8, %345 : $Builtin.Int8, %346 : $Builtin.Int1) : $(Builtin.Int8, Builtin.Int1) // user: %348
  %348 = tuple_extract %347 : $(Builtin.Int8, Builtin.Int1), 0 // user: %349
  %349 = struct $UInt8 (%348 : $Builtin.Int8)     // user: %350
  store %349 to %332 : $*UInt8                    // id: %350
  %351 = load %126 : $*Builtin.Int8               // user: %352
  %352 = builtin "zextOrBitCast_Int8_Int64"(%351 : $Builtin.Int8) : $Builtin.Int64 // user: %354
  %353 = integer_literal $Builtin.Int64, 8        // user: %354
  %354 = builtin "sdiv_Int64"(%352 : $Builtin.Int64, %353 : $Builtin.Int64) : $Builtin.Int64 // user: %356
  %355 = integer_literal $Builtin.Int64, 4        // user: %356
  %356 = builtin "cmp_slt_Int64"(%354 : $Builtin.Int64, %355 : $Builtin.Int64) : $Builtin.Int1 // user: %357
  cond_br %356, bb36, bb49                        // id: %357

bb47:                                             // Preds: bb45
  %358 = string_literal utf8 "Fatal error"        // user: %360
  %359 = integer_literal $Builtin.Word, 11        // user: %361
  %360 = builtin "ptrtoint_Word"(%358 : $Builtin.RawPointer) : $Builtin.Word // user: %361
  %361 = struct $StaticString (%360 : $Builtin.Word, %359 : $Builtin.Word, %306 : $Builtin.Int8) // user: %363
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %362 = function_ref @$Ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %363
  %363 = apply %362(%361, %307, %311, %313, %13) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %364

bb48:                                             // Preds: bb43 bb40
  %365 = load %126 : $*Builtin.Int8               // user: %366
  %366 = builtin "cmp_eq_Int8"(%365 : $Builtin.Int8, %12 : $Builtin.Int8) : $Builtin.Int1 // user: %367
  cond_br %366, bb68, bb49                        // id: %367

bb49:                                             // Preds: bb48 bb46
  %368 = load %9 : $*Unicode.UTF8.ForwardParser   // users: %451, %369
  %369 = struct_extract %368 : $Unicode.UTF8.ForwardParser, #Unicode.UTF8.ForwardParser._buffer // user: %370
  %370 = struct_extract %369 : $_UIntBuffer<UInt32, UInt8>, #_UIntBuffer._storage // user: %372
  %371 = integer_literal $Builtin.Int32, 49376    // user: %373
  %372 = struct_extract %370 : $UInt32, #UInt32._value // users: %482, %461, %442, %431, %388, %383, %378, %373
  %373 = builtin "and_Int32"(%372 : $Builtin.Int32, %371 : $Builtin.Int32) : $Builtin.Int32 // user: %375
  %374 = integer_literal $Builtin.Int32, 32960    // user: %375
  %375 = builtin "cmp_eq_Int32"(%373 : $Builtin.Int32, %374 : $Builtin.Int32) : $Builtin.Int1 // user: %376
  cond_br %375, bb62, bb50                        // id: %376

bb50:                                             // Preds: bb49
  %377 = integer_literal $Builtin.Int32, 12632304 // user: %378
  %378 = builtin "and_Int32"(%372 : $Builtin.Int32, %377 : $Builtin.Int32) : $Builtin.Int32 // user: %380
  %379 = integer_literal $Builtin.Int32, 8421600  // user: %380
  %380 = builtin "cmp_eq_Int32"(%378 : $Builtin.Int32, %379 : $Builtin.Int32) : $Builtin.Int1 // user: %381
  cond_br %380, bb59, bb51                        // id: %381

bb51:                                             // Preds: bb50
  %382 = integer_literal $Builtin.Int32, -1061109512 // user: %383
  %383 = builtin "and_Int32"(%372 : $Builtin.Int32, %382 : $Builtin.Int32) : $Builtin.Int32 // user: %385
  %384 = integer_literal $Builtin.Int32, -2139062032 // user: %385
  %385 = builtin "cmp_eq_Int32"(%383 : $Builtin.Int32, %384 : $Builtin.Int32) : $Builtin.Int1 // user: %386
  cond_br %385, bb52, bb64                        // id: %386

bb52:                                             // Preds: bb51
  %387 = integer_literal $Builtin.Int32, 12295    // user: %388
  %388 = builtin "and_Int32"(%372 : $Builtin.Int32, %387 : $Builtin.Int32) : $Builtin.Int32 // users: %418, %407, %404, %401
  %389 = string_literal utf8 "Not enough bits to represent a signed value" // user: %391
  %390 = integer_literal $Builtin.Word, 43        // user: %393
  %391 = builtin "ptrtoint_Word"(%389 : $Builtin.RawPointer) : $Builtin.Word // user: %393
  %392 = integer_literal $Builtin.Int8, 2         // users: %414, %397, %393
  %393 = struct $StaticString (%391 : $Builtin.Word, %390 : $Builtin.Word, %392 : $Builtin.Int8) // user: %416
  %394 = string_literal utf8 "/Users/buildnode/jenkins/workspace/oss-swift-package-osx/build/buildbot_osx/swift-macosx-x86_64/stdlib/public/core/8/Integers.swift" // user: %396
  %395 = integer_literal $Builtin.Word, 131       // user: %397
  %396 = builtin "ptrtoint_Word"(%394 : $Builtin.RawPointer) : $Builtin.Word // user: %397
  %397 = struct $StaticString (%396 : $Builtin.Word, %395 : $Builtin.Word, %392 : $Builtin.Int8) // user: %416
  %398 = integer_literal $Builtin.Int64, 3445     // user: %399
  %399 = struct $UInt (%398 : $Builtin.Int64)     // user: %416
  br bb53                                         // id: %400

bb53:                                             // Preds: bb52
  %401 = builtin "zextOrBitCast_Int32_Int64"(%388 : $Builtin.Int32) : $Builtin.Int64 // user: %402
  %402 = builtin "truncOrBitCast_Int64_Int16"(%401 : $Builtin.Int64) : $Builtin.Int16 // user: %403
  %403 = builtin "zextOrBitCast_Int16_Int32"(%402 : $Builtin.Int16) : $Builtin.Int32 // user: %404
  %404 = builtin "cmp_eq_Int32"(%403 : $Builtin.Int32, %388 : $Builtin.Int32) : $Builtin.Int1 // user: %405
  cond_br %404, bb56, bb54                        // id: %405

bb54:                                             // Preds: bb53
  %406 = integer_literal $Builtin.Int32, 65535    // user: %407
  %407 = builtin "cmp_ult_Int32"(%406 : $Builtin.Int32, %388 : $Builtin.Int32) : $Builtin.Int1 // user: %409
  %408 = integer_literal $Builtin.Int1, 0         // user: %409
  %409 = builtin "int_expect_Int1"(%407 : $Builtin.Int1, %408 : $Builtin.Int1) : $Builtin.Int1 // user: %410
  cond_br %409, bb55, bb56                        // id: %410

bb55:                                             // Preds: bb54
  %411 = string_literal utf8 "Fatal error"        // user: %413
  %412 = integer_literal $Builtin.Word, 11        // user: %414
  %413 = builtin "ptrtoint_Word"(%411 : $Builtin.RawPointer) : $Builtin.Word // user: %414
  %414 = struct $StaticString (%413 : $Builtin.Word, %412 : $Builtin.Word, %392 : $Builtin.Int8) // user: %416
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %415 = function_ref @$Ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %416
  %416 = apply %415(%414, %393, %397, %399, %13) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %417

bb56:                                             // Preds: bb54 bb53
  %418 = builtin "zextOrBitCast_Int32_Int64"(%388 : $Builtin.Int32) : $Builtin.Int64 // user: %419
  %419 = builtin "truncOrBitCast_Int64_Int16"(%418 : $Builtin.Int64) : $Builtin.Int16 // users: %422, %420
  %420 = builtin "cmp_eq_Int16"(%419 : $Builtin.Int16, %123 : $Builtin.Int16) : $Builtin.Int1 // user: %421
  cond_br %420, bb64, bb57                        // id: %421

bb57:                                             // Preds: bb56
  %422 = builtin "int_bswap_Int16"(%419 : $Builtin.Int16) : $Builtin.Int16 // user: %424
  %423 = integer_literal $Builtin.Int16, 1024     // user: %424
  %424 = builtin "cmp_ult_Int16"(%423 : $Builtin.Int16, %422 : $Builtin.Int16) : $Builtin.Int1 // user: %426
  %425 = integer_literal $Builtin.Int1, 0         // user: %426
  %426 = builtin "int_expect_Int1"(%424 : $Builtin.Int1, %425 : $Builtin.Int1) : $Builtin.Int1 // user: %427
  cond_br %426, bb64, bb58                        // id: %427

bb58:                                             // Preds: bb57
  %428 = integer_literal $Builtin.Int8, 32        // user: %429
  br bb65(%127 : $Builtin.Int1, %428 : $Builtin.Int8) // id: %429

bb59:                                             // Preds: bb50
  %430 = integer_literal $Builtin.Int32, 8207     // user: %431
  %431 = builtin "and_Int32"(%372 : $Builtin.Int32, %430 : $Builtin.Int32) : $Builtin.Int32 // users: %435, %432
  %432 = builtin "cmp_eq_Int32"(%431 : $Builtin.Int32, %11 : $Builtin.Int32) : $Builtin.Int1 // user: %433
  cond_br %432, bb64, bb60                        // id: %433

bb60:                                             // Preds: bb59
  %434 = integer_literal $Builtin.Int32, 8205     // user: %435
  %435 = builtin "cmp_eq_Int32"(%431 : $Builtin.Int32, %434 : $Builtin.Int32) : $Builtin.Int1 // user: %437
  %436 = integer_literal $Builtin.Int1, 0         // user: %437
  %437 = builtin "int_expect_Int1"(%435 : $Builtin.Int1, %436 : $Builtin.Int1) : $Builtin.Int1 // user: %438
  cond_br %437, bb64, bb61                        // id: %438

bb61:                                             // Preds: bb60
  %439 = integer_literal $Builtin.Int8, 24        // user: %440
  br bb65(%127 : $Builtin.Int1, %439 : $Builtin.Int8) // id: %440

bb62:                                             // Preds: bb49
  %441 = integer_literal $Builtin.Int32, 30       // user: %442
  %442 = builtin "and_Int32"(%372 : $Builtin.Int32, %441 : $Builtin.Int32) : $Builtin.Int32 // user: %443
  %443 = builtin "cmp_eq_Int32"(%442 : $Builtin.Int32, %11 : $Builtin.Int32) : $Builtin.Int1 // user: %445
  %444 = integer_literal $Builtin.Int1, 0         // user: %445
  %445 = builtin "int_expect_Int1"(%443 : $Builtin.Int1, %444 : $Builtin.Int1) : $Builtin.Int1 // user: %446
  cond_br %445, bb64, bb63                        // id: %446

bb63:                                             // Preds: bb62
  %447 = integer_literal $Builtin.Int8, 16        // user: %448
  br bb65(%127 : $Builtin.Int1, %447 : $Builtin.Int8) // id: %448

bb64:                                             // Preds: bb62 bb60 bb59 bb57 bb56 bb51
  %449 = integer_literal $Builtin.Int1, 0         // users: %456, %454
  // function_ref Unicode.UTF8.ForwardParser._invalidLength()
  %450 = function_ref @$Ss7UnicodeO4UTF8O13ForwardParserV14_invalidLengths5UInt8VyF : $@convention(method) (Unicode.UTF8.ForwardParser) -> UInt8 // user: %451
  %451 = apply %450(%368) : $@convention(method) (Unicode.UTF8.ForwardParser) -> UInt8 // user: %453
  %452 = integer_literal $Builtin.Int8, 8         // user: %454
  %453 = struct_extract %451 : $UInt8, #UInt8._value // user: %454
  %454 = builtin "umul_with_overflow_Int8"(%453 : $Builtin.Int8, %452 : $Builtin.Int8, %449 : $Builtin.Int1) : $(Builtin.Int8, Builtin.Int1) // user: %455
  %455 = tuple_extract %454 : $(Builtin.Int8, Builtin.Int1), 0 // user: %456
  br bb65(%449 : $Builtin.Int1, %455 : $Builtin.Int8) // id: %456

// %457                                           // user: %498
// %458                                           // users: %503, %493, %483, %472, %465
bb65(%457 : $Builtin.Int1, %458 : $Builtin.Int8): // Preds: bb64 bb63 bb61 bb58
  %459 = integer_literal $Builtin.Int32, 16843009 // user: %461
  %460 = integer_literal $Builtin.Int1, 0         // users: %493, %479, %476, %465, %461
  %461 = builtin "uadd_with_overflow_Int32"(%372 : $Builtin.Int32, %459 : $Builtin.Int32, %460 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // user: %462
  %462 = tuple_extract %461 : $(Builtin.Int32, Builtin.Int1), 0 // user: %481
  %463 = integer_literal $Builtin.Int32, -1       // user: %471
  %464 = integer_literal $Builtin.Int8, 1         // users: %472, %467, %465
  %465 = builtin "uadd_with_overflow_Int8"(%458 : $Builtin.Int8, %464 : $Builtin.Int8, %460 : $Builtin.Int1) : $(Builtin.Int8, Builtin.Int1) // user: %466
  %466 = tuple_extract %465 : $(Builtin.Int8, Builtin.Int1), 0 // user: %467
  %467 = builtin "lshr_Int8"(%466 : $Builtin.Int8, %464 : $Builtin.Int8) : $Builtin.Int8 // user: %468
  %468 = builtin "zextOrBitCast_Int8_Int32"(%467 : $Builtin.Int8) : $Builtin.Int32 // user: %470
  %469 = integer_literal $Builtin.Int32, 31       // users: %474, %470
  %470 = builtin "and_Int32"(%468 : $Builtin.Int32, %469 : $Builtin.Int32) : $Builtin.Int32 // user: %471
  %471 = builtin "shl_Int32"(%463 : $Builtin.Int32, %470 : $Builtin.Int32) : $Builtin.Int32 // user: %475
  %472 = builtin "lshr_Int8"(%458 : $Builtin.Int8, %464 : $Builtin.Int8) : $Builtin.Int8 // user: %473
  %473 = builtin "zextOrBitCast_Int8_Int32"(%472 : $Builtin.Int8) : $Builtin.Int32 // user: %474
  %474 = builtin "and_Int32"(%473 : $Builtin.Int32, %469 : $Builtin.Int32) : $Builtin.Int32 // user: %475
  %475 = builtin "shl_Int32"(%471 : $Builtin.Int32, %474 : $Builtin.Int32) : $Builtin.Int32 // user: %476
  %476 = builtin "usub_with_overflow_Int32"(%11 : $Builtin.Int32, %475 : $Builtin.Int32, %460 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // user: %477
  %477 = tuple_extract %476 : $(Builtin.Int32, Builtin.Int1), 0 // user: %479
  %478 = integer_literal $Builtin.Int32, 1        // user: %479
  %479 = builtin "usub_with_overflow_Int32"(%477 : $Builtin.Int32, %478 : $Builtin.Int32, %460 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // user: %480
  %480 = tuple_extract %479 : $(Builtin.Int32, Builtin.Int1), 0 // user: %481
  %481 = builtin "and_Int32"(%462 : $Builtin.Int32, %480 : $Builtin.Int32) : $Builtin.Int32 // user: %511
  %482 = builtin "zextOrBitCast_Int32_Int64"(%372 : $Builtin.Int32) : $Builtin.Int64 // user: %486
  %483 = builtin "zextOrBitCast_Int8_Int64"(%458 : $Builtin.Int8) : $Builtin.Int64 // user: %485
  %484 = integer_literal $Builtin.Int64, 63       // user: %485
  %485 = builtin "and_Int64"(%483 : $Builtin.Int64, %484 : $Builtin.Int64) : $Builtin.Int64 // user: %486
  %486 = builtin "lshr_Int64"(%482 : $Builtin.Int64, %485 : $Builtin.Int64) : $Builtin.Int64 // user: %487
  %487 = builtin "truncOrBitCast_Int64_Int32"(%486 : $Builtin.Int64) : $Builtin.Int32 // user: %488
  %488 = struct $UInt32 (%487 : $Builtin.Int32)   // user: %491
  %489 = mark_dependence %124 : $*_UIntBuffer<UInt32, UInt8> on %9 : $*Unicode.UTF8.ForwardParser // users: %496, %490
  %490 = struct_element_addr %489 : $*_UIntBuffer<UInt32, UInt8>, #_UIntBuffer._storage // user: %491
  store %488 to %490 : $*UInt32                   // id: %491
  %492 = load %126 : $*Builtin.Int8               // user: %493
  %493 = builtin "usub_with_overflow_Int8"(%492 : $Builtin.Int8, %458 : $Builtin.Int8, %460 : $Builtin.Int1) : $(Builtin.Int8, Builtin.Int1) // user: %494
  %494 = tuple_extract %493 : $(Builtin.Int8, Builtin.Int1), 0 // user: %495
  %495 = struct $UInt8 (%494 : $Builtin.Int8)     // user: %497
  %496 = struct_element_addr %489 : $*_UIntBuffer<UInt32, UInt8>, #_UIntBuffer._bitCount // user: %497
  store %495 to %496 : $*UInt8                    // id: %497
  %498 = builtin "int_expect_Int1"(%457 : $Builtin.Int1, %127 : $Builtin.Int1) : $Builtin.Int1 // user: %499
  cond_br %498, bb67, bb66                        // id: %499

bb66:                                             // Preds: bb65
  %500 = init_enum_data_addr %131 : $*Unicode.ParseResult<_ValidUTF8Buffer<UInt32>>, #Unicode.ParseResult.error!enumelt.1 // user: %501
  %501 = tuple_element_addr %500 : $*(length: Int), 0 // user: %507
  %502 = integer_literal $Builtin.Int8, 8         // user: %503
  %503 = builtin "udiv_Int8"(%458 : $Builtin.Int8, %502 : $Builtin.Int8) : $Builtin.Int8 // user: %504
  %504 = builtin "zextOrBitCast_Int8_Int64"(%503 : $Builtin.Int8) : $Builtin.Int64 // user: %505
  %505 = struct $Int (%504 : $Builtin.Int64)      // users: %507, %506
  %506 = tuple $(length: Int) (%505)
  store %505 to %501 : $*Int                      // id: %507
  inject_enum_addr %131 : $*Unicode.ParseResult<_ValidUTF8Buffer<UInt32>>, #Unicode.ParseResult.error!enumelt.1 // id: %508
  br bb72                                         // id: %509

bb67:                                             // Preds: bb65
  %510 = init_enum_data_addr %131 : $*Unicode.ParseResult<_ValidUTF8Buffer<UInt32>>, #Unicode.ParseResult.valid!enumelt.1 // user: %513
  %511 = struct $UInt32 (%481 : $Builtin.Int32)   // user: %512
  %512 = struct $_ValidUTF8Buffer<UInt32> (%511 : $UInt32) // user: %513
  store %512 to %510 : $*_ValidUTF8Buffer<UInt32> // id: %513
  inject_enum_addr %131 : $*Unicode.ParseResult<_ValidUTF8Buffer<UInt32>>, #Unicode.ParseResult.valid!enumelt.1 // id: %514
  br bb72                                         // id: %515

bb68:                                             // Preds: bb48
  %516 = enum $Unicode.ParseResult<_ValidUTF8Buffer<UInt32>>, #Unicode.ParseResult.emptyInput!enumelt // user: %517
  store %516 to %131 : $*Unicode.ParseResult<_ValidUTF8Buffer<UInt32>> // id: %517
  br bb72                                         // id: %518

bb69:                                             // Preds: bb34
  %519 = string_literal utf8 "Fatal error"        // user: %521
  %520 = integer_literal $Builtin.Word, 11        // user: %522
  %521 = builtin "ptrtoint_Word"(%519 : $Builtin.RawPointer) : $Builtin.Word // user: %522
  %522 = struct $StaticString (%521 : $Builtin.Word, %520 : $Builtin.Word, %212 : $Builtin.Int8) // user: %524
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %523 = function_ref @$Ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %524
  %524 = apply %523(%522, %213, %217, %219, %13) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %525

bb70:                                             // Preds: bb32
  %526 = init_enum_data_addr %131 : $*Unicode.ParseResult<_ValidUTF8Buffer<UInt32>>, #Unicode.ParseResult.valid!enumelt.1 // user: %534
  %527 = integer_literal $Builtin.Int1, 0         // user: %529
  %528 = integer_literal $Builtin.Int8, 1         // user: %529
  %529 = builtin "uadd_with_overflow_Int8"(%194 : $Builtin.Int8, %528 : $Builtin.Int8, %527 : $Builtin.Int1) : $(Builtin.Int8, Builtin.Int1) // user: %530
  %530 = tuple_extract %529 : $(Builtin.Int8, Builtin.Int1), 0 // user: %531
  %531 = builtin "zextOrBitCast_Int8_Int32"(%530 : $Builtin.Int8) : $Builtin.Int32 // user: %532
  %532 = struct $UInt32 (%531 : $Builtin.Int32)   // user: %533
  %533 = struct $_ValidUTF8Buffer<UInt32> (%532 : $UInt32) // user: %534
  store %533 to %526 : $*_ValidUTF8Buffer<UInt32> // id: %534
  inject_enum_addr %131 : $*Unicode.ParseResult<_ValidUTF8Buffer<UInt32>>, #Unicode.ParseResult.valid!enumelt.1 // id: %535
  br bb72                                         // id: %536

bb71:                                             // Preds: bb31 bb28
  %537 = enum $Unicode.ParseResult<_ValidUTF8Buffer<UInt32>>, #Unicode.ParseResult.emptyInput!enumelt // user: %538
  store %537 to %131 : $*Unicode.ParseResult<_ValidUTF8Buffer<UInt32>> // id: %538
  br bb72                                         // id: %539

bb72:                                             // Preds: bb71 bb70 bb68 bb67 bb66 bb23
  %540 = load %131 : $*Unicode.ParseResult<_ValidUTF8Buffer<UInt32>> // users: %564, %543, %542
  dealloc_stack %131 : $*Unicode.ParseResult<_ValidUTF8Buffer<UInt32>> // id: %541
  switch_enum %540 : $Unicode.ParseResult<_ValidUTF8Buffer<UInt32>>, case #Unicode.ParseResult.valid!enumelt.1: bb78, default bb73 // id: %542

bb73:                                             // Preds: bb72
  switch_enum %540 : $Unicode.ParseResult<_ValidUTF8Buffer<UInt32>>, case #Unicode.ParseResult.error!enumelt.1: bb75, default bb74 // id: %543

bb74:                                             // Preds: bb73
  %544 = struct $Int (%129 : $Builtin.Int64)      // user: %548
  %545 = integer_literal $Builtin.Int16, 128      // user: %546
  %546 = builtin "cmp_ult_Int16"(%130 : $Builtin.Int16, %545 : $Builtin.Int16) : $Builtin.Int1 // user: %547
  %547 = struct $Bool (%546 : $Builtin.Int1)      // user: %548
  %548 = tuple $(count: Int, isASCII: Bool) (%544, %547) // user: %549
  %549 = enum $Optional<(count: Int, isASCII: Bool)>, #Optional.some!enumelt.1, %548 : $(count: Int, isASCII: Bool) // user: %550
  br bb116(%549 : $Optional<(count: Int, isASCII: Bool)>) // id: %550

bb75:                                             // Preds: bb73
  %551 = struct_extract %2 : $Bool, #Bool._value  // user: %552
  %552 = builtin "int_expect_Int1"(%551 : $Builtin.Int1, %127 : $Builtin.Int1) : $Builtin.Int1 // user: %553
  cond_br %552, bb77, bb76                        // id: %553

bb76:                                             // Preds: bb75
  %554 = enum $Optional<(count: Int, isASCII: Bool)>, #Optional.none!enumelt // user: %555
  br bb116(%554 : $Optional<(count: Int, isASCII: Bool)>) // id: %555

bb77:                                             // Preds: bb75
  %556 = integer_literal $Builtin.Int64, 1        // user: %557
  %557 = builtin "sadd_with_overflow_Int64"(%129 : $Builtin.Int64, %556 : $Builtin.Int64, %127 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %559, %558
  %558 = tuple_extract %557 : $(Builtin.Int64, Builtin.Int1), 0 // user: %563
  %559 = tuple_extract %557 : $(Builtin.Int64, Builtin.Int1), 1 // user: %560
  cond_fail %559 : $Builtin.Int1                  // id: %560
  %561 = integer_literal $Builtin.Int16, -3       // user: %562
  %562 = builtin "or_Int16"(%130 : $Builtin.Int16, %561 : $Builtin.Int16) : $Builtin.Int16 // user: %563
  br bb21(%558 : $Builtin.Int64, %562 : $Builtin.Int16) // id: %563

bb78:                                             // Preds: bb72
  %564 = unchecked_enum_data %540 : $Unicode.ParseResult<_ValidUTF8Buffer<UInt32>>, #Unicode.ParseResult.valid!enumelt.1 // users: %729, %565
  %565 = struct_extract %564 : $_ValidUTF8Buffer<UInt32>, #_ValidUTF8Buffer._biasedBits // user: %566
  %566 = struct_extract %565 : $UInt32, #UInt32._value // users: %861, %775, %762, %655, %640, %620, %595, %580
  %567 = init_existential_metatype %19 : $@thick Unicode.UTF8.Type, $@thick Any.Type // user: %569
  %568 = init_existential_metatype %19 : $@thick Unicode.UTF8.Type, $@thick Any.Type // user: %569
  %569 = builtin "is_same_metatype"(%567 : $@thick Any.Type, %568 : $@thick Any.Type) : $Builtin.Int1 // user: %570
  %570 = builtin "int_expect_Int1"(%569 : $Builtin.Int1, %127 : $Builtin.Int1) : $Builtin.Int1 // user: %571
  cond_br %570, bb95, bb79                        // id: %571

bb79:                                             // Preds: bb78
  %572 = init_existential_metatype %19 : $@thick Unicode.UTF8.Type, $@thick Any.Type // user: %575
  %573 = metatype $@thick Unicode.UTF16.Type      // user: %574
  %574 = init_existential_metatype %573 : $@thick Unicode.UTF16.Type, $@thick Any.Type // user: %575
  %575 = builtin "is_same_metatype"(%572 : $@thick Any.Type, %574 : $@thick Any.Type) : $Builtin.Int1 // user: %576
  %576 = builtin "int_expect_Int1"(%575 : $Builtin.Int1, %127 : $Builtin.Int1) : $Builtin.Int1 // user: %577
  cond_br %576, bb91, bb80                        // id: %577

bb80:                                             // Preds: bb79
  %578 = integer_literal $Builtin.Int64, 4        // user: %584
  %579 = integer_literal $Builtin.Int1, 0         // users: %655, %640, %620, %595, %584, %580
  %580 = builtin "int_ctlz_Int32"(%566 : $Builtin.Int32, %579 : $Builtin.Int1) : $Builtin.Int32 // user: %581
  %581 = builtin "zextOrBitCast_Int32_Int64"(%580 : $Builtin.Int32) : $Builtin.Int64 // user: %583
  %582 = integer_literal $Builtin.Int64, 3        // users: %592, %583
  %583 = builtin "ashr_Int64"(%581 : $Builtin.Int64, %582 : $Builtin.Int64) : $Builtin.Int64 // user: %584
  %584 = builtin "ssub_with_overflow_Int64"(%578 : $Builtin.Int64, %583 : $Builtin.Int64, %579 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %585
  %585 = tuple_extract %584 : $(Builtin.Int64, Builtin.Int1), 0 // users: %592, %590, %587
  %586 = integer_literal $Builtin.Int64, 1        // user: %587
  %587 = builtin "cmp_eq_Int64"(%585 : $Builtin.Int64, %586 : $Builtin.Int64) : $Builtin.Int1 // user: %588
  cond_br %587, bb86, bb81                        // id: %588

bb81:                                             // Preds: bb80
  %589 = integer_literal $Builtin.Int64, 2        // user: %590
  %590 = builtin "cmp_eq_Int64"(%585 : $Builtin.Int64, %589 : $Builtin.Int64) : $Builtin.Int1 // user: %591
  cond_br %590, bb85, bb82                        // id: %591

bb82:                                             // Preds: bb81
  %592 = builtin "cmp_eq_Int64"(%585 : $Builtin.Int64, %582 : $Builtin.Int64) : $Builtin.Int1 // user: %593
  cond_br %592, bb84, bb83                        // id: %593

bb83:                                             // Preds: bb82
  %594 = integer_literal $Builtin.Int32, 16843009 // user: %595
  %595 = builtin "usub_with_overflow_Int32"(%566 : $Builtin.Int32, %594 : $Builtin.Int32, %579 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // user: %596
  %596 = tuple_extract %595 : $(Builtin.Int32, Builtin.Int1), 0 // users: %612, %607, %602, %598
  %597 = integer_literal $Builtin.Int32, 1056964608 // user: %598
  %598 = builtin "and_Int32"(%596 : $Builtin.Int32, %597 : $Builtin.Int32) : $Builtin.Int32 // user: %600
  %599 = integer_literal $Builtin.Int32, 24       // user: %600
  %600 = builtin "lshr_Int32"(%598 : $Builtin.Int32, %599 : $Builtin.Int32) : $Builtin.Int32 // user: %605
  %601 = integer_literal $Builtin.Int32, 4128768  // user: %602
  %602 = builtin "and_Int32"(%596 : $Builtin.Int32, %601 : $Builtin.Int32) : $Builtin.Int32 // user: %604
  %603 = integer_literal $Builtin.Int32, 10       // user: %604
  %604 = builtin "lshr_Int32"(%602 : $Builtin.Int32, %603 : $Builtin.Int32) : $Builtin.Int32 // user: %605
  %605 = builtin "or_Int32"(%600 : $Builtin.Int32, %604 : $Builtin.Int32) : $Builtin.Int32 // user: %610
  %606 = integer_literal $Builtin.Int32, 16128    // user: %607
  %607 = builtin "and_Int32"(%596 : $Builtin.Int32, %606 : $Builtin.Int32) : $Builtin.Int32 // user: %609
  %608 = integer_literal $Builtin.Int32, 4        // user: %609
  %609 = builtin "shl_Int32"(%607 : $Builtin.Int32, %608 : $Builtin.Int32) : $Builtin.Int32 // user: %610
  %610 = builtin "or_Int32"(%605 : $Builtin.Int32, %609 : $Builtin.Int32) : $Builtin.Int32 // user: %615
  %611 = integer_literal $Builtin.Int32, 7        // user: %612
  %612 = builtin "and_Int32"(%596 : $Builtin.Int32, %611 : $Builtin.Int32) : $Builtin.Int32 // user: %614
  %613 = integer_literal $Builtin.Int32, 18       // user: %614
  %614 = builtin "shl_Int32"(%612 : $Builtin.Int32, %613 : $Builtin.Int32) : $Builtin.Int32 // user: %615
  %615 = builtin "or_Int32"(%610 : $Builtin.Int32, %614 : $Builtin.Int32) : $Builtin.Int32 // user: %616
  %616 = struct $UInt32 (%615 : $Builtin.Int32)   // user: %617
  %617 = struct $Unicode.Scalar (%616 : $UInt32)  // user: %618
  br bb87(%617 : $Unicode.Scalar)                 // id: %618

bb84:                                             // Preds: bb82
  %619 = integer_literal $Builtin.Int32, 65793    // user: %620
  %620 = builtin "usub_with_overflow_Int32"(%566 : $Builtin.Int32, %619 : $Builtin.Int32, %579 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // user: %621
  %621 = tuple_extract %620 : $(Builtin.Int32, Builtin.Int1), 0 // users: %632, %627, %623
  %622 = integer_literal $Builtin.Int32, 4128768  // user: %623
  %623 = builtin "and_Int32"(%621 : $Builtin.Int32, %622 : $Builtin.Int32) : $Builtin.Int32 // user: %625
  %624 = integer_literal $Builtin.Int32, 16       // user: %625
  %625 = builtin "lshr_Int32"(%623 : $Builtin.Int32, %624 : $Builtin.Int32) : $Builtin.Int32 // user: %630
  %626 = integer_literal $Builtin.Int32, 16128    // user: %627
  %627 = builtin "and_Int32"(%621 : $Builtin.Int32, %626 : $Builtin.Int32) : $Builtin.Int32 // user: %629
  %628 = integer_literal $Builtin.Int32, 2        // user: %629
  %629 = builtin "lshr_Int32"(%627 : $Builtin.Int32, %628 : $Builtin.Int32) : $Builtin.Int32 // user: %630
  %630 = builtin "or_Int32"(%625 : $Builtin.Int32, %629 : $Builtin.Int32) : $Builtin.Int32 // user: %635
  %631 = integer_literal $Builtin.Int32, 15       // user: %632
  %632 = builtin "and_Int32"(%621 : $Builtin.Int32, %631 : $Builtin.Int32) : $Builtin.Int32 // user: %634
  %633 = integer_literal $Builtin.Int32, 12       // user: %634
  %634 = builtin "shl_Int32"(%632 : $Builtin.Int32, %633 : $Builtin.Int32) : $Builtin.Int32 // user: %635
  %635 = builtin "or_Int32"(%630 : $Builtin.Int32, %634 : $Builtin.Int32) : $Builtin.Int32 // user: %636
  %636 = struct $UInt32 (%635 : $Builtin.Int32)   // user: %637
  %637 = struct $Unicode.Scalar (%636 : $UInt32)  // user: %638
  br bb87(%637 : $Unicode.Scalar)                 // id: %638

bb85:                                             // Preds: bb81
  %639 = integer_literal $Builtin.Int32, 257      // user: %640
  %640 = builtin "usub_with_overflow_Int32"(%566 : $Builtin.Int32, %639 : $Builtin.Int32, %579 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // user: %641
  %641 = tuple_extract %640 : $(Builtin.Int32, Builtin.Int1), 0 // users: %647, %643
  %642 = integer_literal $Builtin.Int32, 16128    // user: %643
  %643 = builtin "and_Int32"(%641 : $Builtin.Int32, %642 : $Builtin.Int32) : $Builtin.Int32 // user: %645
  %644 = integer_literal $Builtin.Int32, 8        // user: %645
  %645 = builtin "lshr_Int32"(%643 : $Builtin.Int32, %644 : $Builtin.Int32) : $Builtin.Int32 // user: %650
  %646 = integer_literal $Builtin.Int32, 31       // user: %647
  %647 = builtin "and_Int32"(%641 : $Builtin.Int32, %646 : $Builtin.Int32) : $Builtin.Int32 // user: %649
  %648 = integer_literal $Builtin.Int32, 6        // user: %649
  %649 = builtin "shl_Int32"(%647 : $Builtin.Int32, %648 : $Builtin.Int32) : $Builtin.Int32 // user: %650
  %650 = builtin "or_Int32"(%645 : $Builtin.Int32, %649 : $Builtin.Int32) : $Builtin.Int32 // user: %651
  %651 = struct $UInt32 (%650 : $Builtin.Int32)   // user: %652
  %652 = struct $Unicode.Scalar (%651 : $UInt32)  // user: %653
  br bb87(%652 : $Unicode.Scalar)                 // id: %653

bb86:                                             // Preds: bb80
  %654 = integer_literal $Builtin.Int32, 1        // user: %655
  %655 = builtin "usub_with_overflow_Int32"(%566 : $Builtin.Int32, %654 : $Builtin.Int32, %579 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // user: %656
  %656 = tuple_extract %655 : $(Builtin.Int32, Builtin.Int1), 0 // user: %657
  %657 = struct $UInt32 (%656 : $Builtin.Int32)   // user: %658
  %658 = struct $Unicode.Scalar (%657 : $UInt32)  // user: %659
  br bb87(%658 : $Unicode.Scalar)                 // id: %659

// %660                                           // user: %661
bb87(%660 : $Unicode.Scalar):                     // Preds: bb86 bb85 bb84 bb83
  %661 = struct_extract %660 : $Unicode.Scalar, #Unicode.Scalar._value // users: %697, %663
  %662 = integer_literal $Builtin.Int32, 65536    // users: %667, %664
  %663 = struct_extract %661 : $UInt32, #UInt32._value // users: %667, %664
  %664 = builtin "cmp_ult_Int32"(%663 : $Builtin.Int32, %662 : $Builtin.Int32) : $Builtin.Int1 // user: %665
  %665 = builtin "int_expect_Int1"(%664 : $Builtin.Int1, %127 : $Builtin.Int1) : $Builtin.Int1 // user: %666
  cond_br %665, bb89, bb88                        // id: %666

bb88:                                             // Preds: bb87
  %667 = builtin "usub_with_overflow_Int32"(%663 : $Builtin.Int32, %662 : $Builtin.Int32, %127 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // users: %669, %668
  %668 = tuple_extract %667 : $(Builtin.Int32, Builtin.Int1), 0 // users: %682, %673
  %669 = tuple_extract %667 : $(Builtin.Int32, Builtin.Int1), 1 // user: %670
  cond_fail %669 : $Builtin.Int1                  // id: %670
  %671 = integer_literal $Builtin.Int32, 56320    // user: %674
  %672 = integer_literal $Builtin.Int32, 1023     // users: %683, %673
  %673 = builtin "and_Int32"(%668 : $Builtin.Int32, %672 : $Builtin.Int32) : $Builtin.Int32 // user: %674
  %674 = builtin "uadd_with_overflow_Int32"(%671 : $Builtin.Int32, %673 : $Builtin.Int32, %127 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // users: %676, %675
  %675 = tuple_extract %674 : $(Builtin.Int32, Builtin.Int1), 0 // user: %679
  %676 = tuple_extract %674 : $(Builtin.Int32, Builtin.Int1), 1 // user: %677
  cond_fail %676 : $Builtin.Int1                  // id: %677
  %678 = integer_literal $Builtin.Int32, 16       // user: %679
  %679 = builtin "shl_Int32"(%675 : $Builtin.Int32, %678 : $Builtin.Int32) : $Builtin.Int32 // user: %688
  %680 = integer_literal $Builtin.Int32, 55296    // user: %684
  %681 = integer_literal $Builtin.Int32, 10       // user: %682
  %682 = builtin "lshr_Int32"(%668 : $Builtin.Int32, %681 : $Builtin.Int32) : $Builtin.Int32 // user: %683
  %683 = builtin "and_Int32"(%682 : $Builtin.Int32, %672 : $Builtin.Int32) : $Builtin.Int32 // user: %684
  %684 = builtin "uadd_with_overflow_Int32"(%680 : $Builtin.Int32, %683 : $Builtin.Int32, %127 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // users: %686, %685
  %685 = tuple_extract %684 : $(Builtin.Int32, Builtin.Int1), 0 // user: %688
  %686 = tuple_extract %684 : $(Builtin.Int32, Builtin.Int1), 1 // user: %687
  cond_fail %686 : $Builtin.Int1                  // id: %687
  %688 = builtin "or_Int32"(%679 : $Builtin.Int32, %685 : $Builtin.Int32) : $Builtin.Int32 // user: %690
  %689 = integer_literal $Builtin.Int8, 32        // user: %691
  %690 = struct $UInt32 (%688 : $Builtin.Int32)   // user: %692
  %691 = struct $UInt8 (%689 : $Builtin.Int8)     // user: %692
  %692 = struct $_UIntBuffer<UInt32, UInt16> (%690 : $UInt32, %691 : $UInt8) // user: %693
  %693 = enum $Optional<_UIntBuffer<UInt32, UInt16>>, #Optional.some!enumelt.1, %692 : $_UIntBuffer<UInt32, UInt16> // user: %694
  br bb90(%693 : $Optional<_UIntBuffer<UInt32, UInt16>>) // id: %694

bb89:                                             // Preds: bb87
  %695 = integer_literal $Builtin.Int8, 16        // user: %696
  %696 = struct $UInt8 (%695 : $Builtin.Int8)     // user: %697
  %697 = struct $_UIntBuffer<UInt32, UInt16> (%661 : $UInt32, %696 : $UInt8) // user: %698
  %698 = enum $Optional<_UIntBuffer<UInt32, UInt16>>, #Optional.some!enumelt.1, %697 : $_UIntBuffer<UInt32, UInt16> // user: %699
  br bb90(%698 : $Optional<_UIntBuffer<UInt32, UInt16>>) // id: %699

// %700                                           // user: %701
bb90(%700 : $Optional<_UIntBuffer<UInt32, UInt16>>): // Preds: bb89 bb88
  br bb108(%700 : $Optional<_UIntBuffer<UInt32, UInt16>>) // id: %701

bb91:                                             // Preds: bb79
  %702 = string_literal utf8 "Can't unsafeBitCast between types of different sizes" // user: %704
  %703 = integer_literal $Builtin.Word, 52        // user: %706
  %704 = builtin "ptrtoint_Word"(%702 : $Builtin.RawPointer) : $Builtin.Word // user: %706
  %705 = integer_literal $Builtin.Int8, 2         // users: %724, %710, %706
  %706 = struct $StaticString (%704 : $Builtin.Word, %703 : $Builtin.Word, %705 : $Builtin.Int8) // user: %726
  %707 = string_literal utf8 "/Users/buildnode/jenkins/workspace/oss-swift-package-osx/swift/stdlib/public/core/Builtin.swift" // user: %709
  %708 = integer_literal $Builtin.Word, 95        // user: %710
  %709 = builtin "ptrtoint_Word"(%707 : $Builtin.RawPointer) : $Builtin.Word // user: %710
  %710 = struct $StaticString (%709 : $Builtin.Word, %708 : $Builtin.Word, %705 : $Builtin.Int8) // user: %726
  %711 = integer_literal $Builtin.Int64, 87       // user: %712
  %712 = struct $UInt (%711 : $Builtin.Int64)     // user: %726
  br bb92                                         // id: %713

bb92:                                             // Preds: bb91
  %714 = metatype $@thick _ValidUTF8Buffer<UInt32>.Type // user: %715
  %715 = builtin "sizeof"<_ValidUTF8Buffer<UInt32>>(%714 : $@thick _ValidUTF8Buffer<UInt32>.Type) : $Builtin.Word // user: %718
  %716 = metatype $@thick _UIntBuffer<UInt32, UInt16>.Type // user: %717
  %717 = builtin "sizeof"<_UIntBuffer<UInt32, UInt16>>(%716 : $@thick _UIntBuffer<UInt32, UInt16>.Type) : $Builtin.Word // user: %718
  %718 = builtin "cmp_eq_Word"(%715 : $Builtin.Word, %717 : $Builtin.Word) : $Builtin.Int1 // user: %719
  %719 = builtin "int_expect_Int1"(%718 : $Builtin.Int1, %127 : $Builtin.Int1) : $Builtin.Int1 // user: %720
  cond_br %719, bb94, bb93                        // id: %720

bb93:                                             // Preds: bb92
  %721 = string_literal utf8 "Fatal error"        // user: %723
  %722 = integer_literal $Builtin.Word, 11        // user: %724
  %723 = builtin "ptrtoint_Word"(%721 : $Builtin.RawPointer) : $Builtin.Word // user: %724
  %724 = struct $StaticString (%723 : $Builtin.Word, %722 : $Builtin.Word, %705 : $Builtin.Int8) // user: %726
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %725 = function_ref @$Ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %726
  %726 = apply %725(%724, %706, %710, %712, %13) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %727

bb94:                                             // Preds: bb92
  %728 = alloc_stack $_ValidUTF8Buffer<UInt32>    // users: %732, %730, %729
  store %564 to %728 : $*_ValidUTF8Buffer<UInt32> // id: %729
  %730 = unchecked_addr_cast %728 : $*_ValidUTF8Buffer<UInt32> to $*_UIntBuffer<UInt32, UInt16> // user: %731
  %731 = load %730 : $*_UIntBuffer<UInt32, UInt16> // user: %733
  dealloc_stack %728 : $*_ValidUTF8Buffer<UInt32> // id: %732
  %733 = enum $Optional<_UIntBuffer<UInt32, UInt16>>, #Optional.some!enumelt.1, %731 : $_UIntBuffer<UInt32, UInt16> // user: %734
  br bb108(%733 : $Optional<_UIntBuffer<UInt32, UInt16>>) // id: %734

bb95:                                             // Preds: bb78
  %735 = metatype $@thick _ValidUTF8Buffer<UInt32>.Type // users: %749, %748
  %736 = string_literal utf8 "_identityCast to wrong type" // user: %738
  %737 = integer_literal $Builtin.Word, 27        // user: %740
  %738 = builtin "ptrtoint_Word"(%736 : $Builtin.RawPointer) : $Builtin.Word // user: %740
  %739 = integer_literal $Builtin.Int8, 2         // users: %756, %744, %740
  %740 = struct $StaticString (%738 : $Builtin.Word, %737 : $Builtin.Word, %739 : $Builtin.Int8) // user: %758
  %741 = string_literal utf8 "/Users/buildnode/jenkins/workspace/oss-swift-package-osx/swift/stdlib/public/core/Builtin.swift" // user: %743
  %742 = integer_literal $Builtin.Word, 95        // user: %744
  %743 = builtin "ptrtoint_Word"(%741 : $Builtin.RawPointer) : $Builtin.Word // user: %744
  %744 = struct $StaticString (%743 : $Builtin.Word, %742 : $Builtin.Word, %739 : $Builtin.Int8) // user: %758
  %745 = integer_literal $Builtin.Int64, 101      // user: %746
  %746 = struct $UInt (%745 : $Builtin.Int64)     // user: %758
  br bb96                                         // id: %747

bb96:                                             // Preds: bb95
  %748 = init_existential_metatype %735 : $@thick _ValidUTF8Buffer<UInt32>.Type, $@thick Any.Type // user: %750
  %749 = init_existential_metatype %735 : $@thick _ValidUTF8Buffer<UInt32>.Type, $@thick Any.Type // user: %750
  %750 = builtin "is_same_metatype"(%748 : $@thick Any.Type, %749 : $@thick Any.Type) : $Builtin.Int1 // user: %751
  %751 = builtin "int_expect_Int1"(%750 : $Builtin.Int1, %127 : $Builtin.Int1) : $Builtin.Int1 // user: %752
  cond_br %751, bb98, bb97                        // id: %752

bb97:                                             // Preds: bb96
  %753 = string_literal utf8 "Fatal error"        // user: %755
  %754 = integer_literal $Builtin.Word, 11        // user: %756
  %755 = builtin "ptrtoint_Word"(%753 : $Builtin.RawPointer) : $Builtin.Word // user: %756
  %756 = struct $StaticString (%755 : $Builtin.Word, %754 : $Builtin.Word, %739 : $Builtin.Int8) // user: %758
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %757 = function_ref @$Ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %758
  %758 = apply %757(%756, %740, %744, %746, %13) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %759

bb98:                                             // Preds: bb96
  %760 = integer_literal $Builtin.Int64, 4        // user: %766
  %761 = integer_literal $Builtin.Int1, 0         // users: %861, %793, %784, %775, %769, %766, %762
  %762 = builtin "int_ctlz_Int32"(%566 : $Builtin.Int32, %761 : $Builtin.Int1) : $Builtin.Int32 // user: %763
  %763 = builtin "zextOrBitCast_Int32_Int64"(%762 : $Builtin.Int32) : $Builtin.Int64 // user: %765
  %764 = integer_literal $Builtin.Int64, 3        // user: %765
  %765 = builtin "ashr_Int64"(%763 : $Builtin.Int64, %764 : $Builtin.Int64) : $Builtin.Int64 // user: %766
  %766 = builtin "ssub_with_overflow_Int64"(%760 : $Builtin.Int64, %765 : $Builtin.Int64, %761 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %767
  %767 = tuple_extract %766 : $(Builtin.Int64, Builtin.Int1), 0 // user: %769
  %768 = integer_literal $Builtin.Int64, 1        // users: %793, %784, %769
  %769 = builtin "ssub_with_overflow_Int64"(%767 : $Builtin.Int64, %768 : $Builtin.Int64, %761 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %770
  %770 = tuple_extract %769 : $(Builtin.Int64, Builtin.Int1), 0 // users: %784, %771
  %771 = builtin "cmp_eq_Int64"(%770 : $Builtin.Int64, %4 : $Builtin.Int64) : $Builtin.Int1 // user: %772
  %772 = builtin "int_expect_Int1"(%771 : $Builtin.Int1, %127 : $Builtin.Int1) : $Builtin.Int1 // user: %773
  cond_br %772, bb107, bb99                       // id: %773

bb99:                                             // Preds: bb98
  %774 = integer_literal $Builtin.Int32, 16843009 // user: %775
  %775 = builtin "usub_with_overflow_Int32"(%566 : $Builtin.Int32, %774 : $Builtin.Int32, %761 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // user: %776
  %776 = tuple_extract %775 : $(Builtin.Int32, Builtin.Int1), 0 // users: %780, %778
  %777 = integer_literal $Builtin.Int32, 6        // users: %798, %789, %778
  %778 = builtin "shl_Int32"(%776 : $Builtin.Int32, %777 : $Builtin.Int32) : $Builtin.Int32 // user: %783
  %779 = integer_literal $Builtin.Int32, 8        // users: %799, %790, %780
  %780 = builtin "lshr_Int32"(%776 : $Builtin.Int32, %779 : $Builtin.Int32) : $Builtin.Int32 // users: %790, %782
  %781 = integer_literal $Builtin.Int32, 63       // users: %800, %791, %782
  %782 = builtin "and_Int32"(%780 : $Builtin.Int32, %781 : $Builtin.Int32) : $Builtin.Int32 // user: %783
  %783 = builtin "or_Int32"(%778 : $Builtin.Int32, %782 : $Builtin.Int32) : $Builtin.Int32 // users: %853, %789
  %784 = builtin "ssub_with_overflow_Int64"(%770 : $Builtin.Int64, %768 : $Builtin.Int64, %761 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %785
  %785 = tuple_extract %784 : $(Builtin.Int64, Builtin.Int1), 0 // users: %793, %786
  %786 = builtin "cmp_eq_Int64"(%785 : $Builtin.Int64, %4 : $Builtin.Int64) : $Builtin.Int1 // user: %787
  %787 = builtin "int_expect_Int1"(%786 : $Builtin.Int1, %127 : $Builtin.Int1) : $Builtin.Int1 // user: %788
  cond_br %787, bb106, bb100                      // id: %788

bb100:                                            // Preds: bb99
  %789 = builtin "shl_Int32"(%783 : $Builtin.Int32, %777 : $Builtin.Int32) : $Builtin.Int32 // user: %792
  %790 = builtin "lshr_Int32"(%780 : $Builtin.Int32, %779 : $Builtin.Int32) : $Builtin.Int32 // users: %799, %791
  %791 = builtin "and_Int32"(%790 : $Builtin.Int32, %781 : $Builtin.Int32) : $Builtin.Int32 // user: %792
  %792 = builtin "or_Int32"(%789 : $Builtin.Int32, %791 : $Builtin.Int32) : $Builtin.Int32 // users: %845, %798
  %793 = builtin "ssub_with_overflow_Int64"(%785 : $Builtin.Int64, %768 : $Builtin.Int64, %761 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %794
  %794 = tuple_extract %793 : $(Builtin.Int64, Builtin.Int1), 0 // user: %795
  %795 = builtin "cmp_eq_Int64"(%794 : $Builtin.Int64, %4 : $Builtin.Int64) : $Builtin.Int1 // user: %796
  %796 = builtin "int_expect_Int1"(%795 : $Builtin.Int1, %127 : $Builtin.Int1) : $Builtin.Int1 // user: %797
  cond_br %796, bb105, bb101                      // id: %797

bb101:                                            // Preds: bb100
  %798 = builtin "shl_Int32"(%792 : $Builtin.Int32, %777 : $Builtin.Int32) : $Builtin.Int32 // user: %801
  %799 = builtin "lshr_Int32"(%790 : $Builtin.Int32, %779 : $Builtin.Int32) : $Builtin.Int32 // user: %800
  %800 = builtin "and_Int32"(%799 : $Builtin.Int32, %781 : $Builtin.Int32) : $Builtin.Int32 // user: %801
  %801 = builtin "or_Int32"(%798 : $Builtin.Int32, %800 : $Builtin.Int32) : $Builtin.Int32 // user: %803
  %802 = integer_literal $Builtin.Int32, 2097151  // user: %803
  %803 = builtin "and_Int32"(%801 : $Builtin.Int32, %802 : $Builtin.Int32) : $Builtin.Int32 // users: %809, %806, %804
  %804 = struct $UInt32 (%803 : $Builtin.Int32)   // user: %839
  %805 = integer_literal $Builtin.Int32, 65536    // users: %809, %806
  %806 = builtin "cmp_ult_Int32"(%803 : $Builtin.Int32, %805 : $Builtin.Int32) : $Builtin.Int1 // user: %807
  %807 = builtin "int_expect_Int1"(%806 : $Builtin.Int1, %127 : $Builtin.Int1) : $Builtin.Int1 // user: %808
  cond_br %807, bb103, bb102                      // id: %808

bb102:                                            // Preds: bb101
  %809 = builtin "usub_with_overflow_Int32"(%803 : $Builtin.Int32, %805 : $Builtin.Int32, %127 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // users: %811, %810
  %810 = tuple_extract %809 : $(Builtin.Int32, Builtin.Int1), 0 // users: %824, %815
  %811 = tuple_extract %809 : $(Builtin.Int32, Builtin.Int1), 1 // user: %812
  cond_fail %811 : $Builtin.Int1                  // id: %812
  %813 = integer_literal $Builtin.Int32, 56320    // user: %816
  %814 = integer_literal $Builtin.Int32, 1023     // users: %825, %815
  %815 = builtin "and_Int32"(%810 : $Builtin.Int32, %814 : $Builtin.Int32) : $Builtin.Int32 // user: %816
  %816 = builtin "uadd_with_overflow_Int32"(%813 : $Builtin.Int32, %815 : $Builtin.Int32, %127 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // users: %818, %817
  %817 = tuple_extract %816 : $(Builtin.Int32, Builtin.Int1), 0 // user: %821
  %818 = tuple_extract %816 : $(Builtin.Int32, Builtin.Int1), 1 // user: %819
  cond_fail %818 : $Builtin.Int1                  // id: %819
  %820 = integer_literal $Builtin.Int32, 16       // user: %821
  %821 = builtin "shl_Int32"(%817 : $Builtin.Int32, %820 : $Builtin.Int32) : $Builtin.Int32 // user: %830
  %822 = integer_literal $Builtin.Int32, 55296    // user: %826
  %823 = integer_literal $Builtin.Int32, 10       // user: %824
  %824 = builtin "lshr_Int32"(%810 : $Builtin.Int32, %823 : $Builtin.Int32) : $Builtin.Int32 // user: %825
  %825 = builtin "and_Int32"(%824 : $Builtin.Int32, %814 : $Builtin.Int32) : $Builtin.Int32 // user: %826
  %826 = builtin "uadd_with_overflow_Int32"(%822 : $Builtin.Int32, %825 : $Builtin.Int32, %127 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // users: %828, %827
  %827 = tuple_extract %826 : $(Builtin.Int32, Builtin.Int1), 0 // user: %830
  %828 = tuple_extract %826 : $(Builtin.Int32, Builtin.Int1), 1 // user: %829
  cond_fail %828 : $Builtin.Int1                  // id: %829
  %830 = builtin "or_Int32"(%821 : $Builtin.Int32, %827 : $Builtin.Int32) : $Builtin.Int32 // user: %832
  %831 = integer_literal $Builtin.Int8, 32        // user: %833
  %832 = struct $UInt32 (%830 : $Builtin.Int32)   // user: %834
  %833 = struct $UInt8 (%831 : $Builtin.Int8)     // user: %834
  %834 = struct $_UIntBuffer<UInt32, UInt16> (%832 : $UInt32, %833 : $UInt8) // user: %835
  %835 = enum $Optional<_UIntBuffer<UInt32, UInt16>>, #Optional.some!enumelt.1, %834 : $_UIntBuffer<UInt32, UInt16> // user: %836
  br bb104(%835 : $Optional<_UIntBuffer<UInt32, UInt16>>) // id: %836

bb103:                                            // Preds: bb101
  %837 = integer_literal $Builtin.Int8, 16        // user: %838
  %838 = struct $UInt8 (%837 : $Builtin.Int8)     // user: %839
  %839 = struct $_UIntBuffer<UInt32, UInt16> (%804 : $UInt32, %838 : $UInt8) // user: %840
  %840 = enum $Optional<_UIntBuffer<UInt32, UInt16>>, #Optional.some!enumelt.1, %839 : $_UIntBuffer<UInt32, UInt16> // user: %841
  br bb104(%840 : $Optional<_UIntBuffer<UInt32, UInt16>>) // id: %841

// %842                                           // user: %843
bb104(%842 : $Optional<_UIntBuffer<UInt32, UInt16>>): // Preds: bb103 bb102
  br bb108(%842 : $Optional<_UIntBuffer<UInt32, UInt16>>) // id: %843

bb105:                                            // Preds: bb100
  %844 = integer_literal $Builtin.Int32, 65535    // user: %845
  %845 = builtin "and_Int32"(%792 : $Builtin.Int32, %844 : $Builtin.Int32) : $Builtin.Int32 // user: %847
  %846 = integer_literal $Builtin.Int8, 16        // user: %848
  %847 = struct $UInt32 (%845 : $Builtin.Int32)   // user: %849
  %848 = struct $UInt8 (%846 : $Builtin.Int8)     // user: %849
  %849 = struct $_UIntBuffer<UInt32, UInt16> (%847 : $UInt32, %848 : $UInt8) // user: %850
  %850 = enum $Optional<_UIntBuffer<UInt32, UInt16>>, #Optional.some!enumelt.1, %849 : $_UIntBuffer<UInt32, UInt16> // user: %851
  br bb108(%850 : $Optional<_UIntBuffer<UInt32, UInt16>>) // id: %851

bb106:                                            // Preds: bb99
  %852 = integer_literal $Builtin.Int32, 2047     // user: %853
  %853 = builtin "and_Int32"(%783 : $Builtin.Int32, %852 : $Builtin.Int32) : $Builtin.Int32 // user: %855
  %854 = integer_literal $Builtin.Int8, 16        // user: %856
  %855 = struct $UInt32 (%853 : $Builtin.Int32)   // user: %857
  %856 = struct $UInt8 (%854 : $Builtin.Int8)     // user: %857
  %857 = struct $_UIntBuffer<UInt32, UInt16> (%855 : $UInt32, %856 : $UInt8) // user: %858
  %858 = enum $Optional<_UIntBuffer<UInt32, UInt16>>, #Optional.some!enumelt.1, %857 : $_UIntBuffer<UInt32, UInt16> // user: %859
  br bb108(%858 : $Optional<_UIntBuffer<UInt32, UInt16>>) // id: %859

bb107:                                            // Preds: bb98
  %860 = integer_literal $Builtin.Int32, 1        // user: %861
  %861 = builtin "usub_with_overflow_Int32"(%566 : $Builtin.Int32, %860 : $Builtin.Int32, %761 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // user: %862
  %862 = tuple_extract %861 : $(Builtin.Int32, Builtin.Int1), 0 // user: %864
  %863 = integer_literal $Builtin.Int32, 127      // user: %864
  %864 = builtin "and_Int32"(%862 : $Builtin.Int32, %863 : $Builtin.Int32) : $Builtin.Int32 // user: %866
  %865 = integer_literal $Builtin.Int8, 16        // user: %867
  %866 = struct $UInt32 (%864 : $Builtin.Int32)   // user: %868
  %867 = struct $UInt8 (%865 : $Builtin.Int8)     // user: %868
  %868 = struct $_UIntBuffer<UInt32, UInt16> (%866 : $UInt32, %867 : $UInt8) // user: %869
  %869 = enum $Optional<_UIntBuffer<UInt32, UInt16>>, #Optional.some!enumelt.1, %868 : $_UIntBuffer<UInt32, UInt16> // user: %870
  br bb108(%869 : $Optional<_UIntBuffer<UInt32, UInt16>>) // id: %870

// %871                                           // user: %872
bb108(%871 : $Optional<_UIntBuffer<UInt32, UInt16>>): // Preds: bb107 bb106 bb105 bb104 bb94 bb90
  %872 = unchecked_enum_data %871 : $Optional<_UIntBuffer<UInt32, UInt16>>, #Optional.some!enumelt.1 // users: %882, %873
  %873 = struct_extract %872 : $_UIntBuffer<UInt32, UInt16>, #_UIntBuffer._bitCount // user: %874
  %874 = struct_extract %873 : $UInt8, #UInt8._value // users: %889, %884, %875
  %875 = builtin "zextOrBitCast_Int8_Int64"(%874 : $Builtin.Int8) : $Builtin.Int64 // user: %877
  %876 = integer_literal $Builtin.Int64, 16       // user: %877
  %877 = builtin "sdiv_Int64"(%875 : $Builtin.Int64, %876 : $Builtin.Int64) : $Builtin.Int64 // user: %878
  %878 = builtin "sadd_with_overflow_Int64"(%129 : $Builtin.Int64, %877 : $Builtin.Int64, %127 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %880, %879
  %879 = tuple_extract %878 : $(Builtin.Int64, Builtin.Int1), 0 // user: %905
  %880 = tuple_extract %878 : $(Builtin.Int64, Builtin.Int1), 1 // user: %881
  cond_fail %880 : $Builtin.Int1                  // id: %881
  %882 = struct_extract %872 : $_UIntBuffer<UInt32, UInt16>, #_UIntBuffer._storage // user: %883
  %883 = struct_extract %882 : $UInt32, #UInt32._value // user: %889
  %884 = builtin "cmp_eq_Int8"(%874 : $Builtin.Int8, %12 : $Builtin.Int8) : $Builtin.Int1 // user: %885
  cond_br %884, bb113, bb109                      // id: %885

bb109:                                            // Preds: bb108
  %886 = integer_literal $Builtin.Int32, 16       // user: %895
  %887 = integer_literal $Builtin.Int8, 16        // user: %896
  %888 = integer_literal $Builtin.Int1, 0         // user: %896
  br bb110(%130 : $Builtin.Int16, %883 : $Builtin.Int32, %874 : $Builtin.Int8) // id: %889

// %890                                           // user: %898
// %891                                           // users: %895, %893
// %892                                           // user: %896
bb110(%890 : $Builtin.Int16, %891 : $Builtin.Int32, %892 : $Builtin.Int8): // Preds: bb111 bb109
  %893 = builtin "zextOrBitCast_Int32_Int64"(%891 : $Builtin.Int32) : $Builtin.Int64 // user: %894
  %894 = builtin "truncOrBitCast_Int64_Int16"(%893 : $Builtin.Int64) : $Builtin.Int16 // user: %898
  %895 = builtin "lshr_Int32"(%891 : $Builtin.Int32, %886 : $Builtin.Int32) : $Builtin.Int32 // user: %901
  %896 = builtin "usub_with_overflow_Int8"(%892 : $Builtin.Int8, %887 : $Builtin.Int8, %888 : $Builtin.Int1) : $(Builtin.Int8, Builtin.Int1) // user: %897
  %897 = tuple_extract %896 : $(Builtin.Int8, Builtin.Int1), 0 // users: %901, %899
  %898 = builtin "or_Int16"(%890 : $Builtin.Int16, %894 : $Builtin.Int16) : $Builtin.Int16 // users: %902, %901
  %899 = builtin "cmp_eq_Int8"(%897 : $Builtin.Int8, %12 : $Builtin.Int8) : $Builtin.Int1 // user: %900
  cond_br %899, bb112, bb111                      // id: %900

bb111:                                            // Preds: bb110
  br bb110(%898 : $Builtin.Int16, %895 : $Builtin.Int32, %897 : $Builtin.Int8) // id: %901

bb112:                                            // Preds: bb110
  br bb114(%898 : $Builtin.Int16)                 // id: %902

bb113:                                            // Preds: bb108
  br bb114(%130 : $Builtin.Int16)                 // id: %903

// %904                                           // user: %905
bb114(%904 : $Builtin.Int16):                     // Preds: bb113 bb112
  br bb21(%879 : $Builtin.Int64, %904 : $Builtin.Int16) // id: %905

bb115:                                            // Preds: bb15
  %906 = struct $Int (%25 : $Builtin.Int64)       // user: %908
  %907 = struct $Bool (%87 : $Builtin.Int1)       // user: %908
  %908 = tuple $(count: Int, isASCII: Bool) (%906, %907) // user: %909
  %909 = enum $Optional<(count: Int, isASCII: Bool)>, #Optional.some!enumelt.1, %908 : $(count: Int, isASCII: Bool) // user: %910
  br bb116(%909 : $Optional<(count: Int, isASCII: Bool)>) // id: %910

// %911                                           // user: %914
bb116(%911 : $Optional<(count: Int, isASCII: Bool)>): // Preds: bb115 bb76 bb74
  dealloc_stack %9 : $*Unicode.UTF8.ForwardParser // id: %912
  dealloc_stack %5 : $*Optional<UnsafePointer<UInt8>> // id: %913
  return %911 : $Optional<(count: Int, isASCII: Bool)> // id: %914
} // end sil function '$Ss7UnicodeO5UTF16O16transcodedLength2of9decodedAs27repairingIllFormedSequencesSi5count_Sb7isASCIItSgx_q_mSbts16IteratorProtocolRzs01_A8EncodingR_8CodeUnitQy_7ElementRtzr0_lFZSR0O0Vys5UInt8V_G_AB4UTF8OTgq5'

// _stdlib_malloc_size
sil [readnone] [clang _stdlib_malloc_size] @_stdlib_malloc_size : $@convention(c) (UnsafeRawPointer) -> Int

// specialized UnsafeMutablePointer.distance(to:)
sil shared_external [serializable] @$SSp8distance2toSiSpyxG_tFs6UInt16V_Tgq5 : $@convention(method) (UnsafeMutablePointer<UInt16>, UnsafeMutablePointer<UInt16>) -> Int {
// %0                                             // user: %2
// %1                                             // user: %4
bb0(%0 : $UnsafeMutablePointer<UInt16>, %1 : $UnsafeMutablePointer<UInt16>):
  %2 = struct_extract %0 : $UnsafeMutablePointer<UInt16>, #UnsafeMutablePointer._rawValue // user: %3
  %3 = builtin "ptrtoint_Word"(%2 : $Builtin.RawPointer) : $Builtin.Word // user: %6
  %4 = struct_extract %1 : $UnsafeMutablePointer<UInt16>, #UnsafeMutablePointer._rawValue // user: %5
  %5 = builtin "ptrtoint_Word"(%4 : $Builtin.RawPointer) : $Builtin.Word // user: %6
  %6 = builtin "sub_Word"(%3 : $Builtin.Word, %5 : $Builtin.Word) : $Builtin.Word // user: %7
  %7 = builtin "zextOrBitCast_Word_Int64"(%6 : $Builtin.Word) : $Builtin.Int64 // users: %23, %17
  %8 = metatype $@thick UInt16.Type               // user: %9
  %9 = builtin "strideof"<UInt16>(%8 : $@thick UInt16.Type) : $Builtin.Word // user: %10
  %10 = builtin "zextOrBitCast_Word_Int64"(%9 : $Builtin.Word) : $Builtin.Int64 // users: %23, %20, %12
  %11 = integer_literal $Builtin.Int64, 0         // user: %12
  %12 = builtin "cmp_eq_Int64"(%10 : $Builtin.Int64, %11 : $Builtin.Int64) : $Builtin.Int1 // user: %14
  %13 = integer_literal $Builtin.Int1, 0          // users: %21, %14
  %14 = builtin "int_expect_Int1"(%12 : $Builtin.Int1, %13 : $Builtin.Int1) : $Builtin.Int1 // user: %15
  cond_br %14, bb6, bb1                           // id: %15

bb1:                                              // Preds: bb0
  %16 = integer_literal $Builtin.Int64, -9223372036854775808 // user: %17
  %17 = builtin "cmp_eq_Int64"(%7 : $Builtin.Int64, %16 : $Builtin.Int64) : $Builtin.Int1 // user: %18
  cond_br %17, bb2, bb3                           // id: %18

bb2:                                              // Preds: bb1
  %19 = integer_literal $Builtin.Int64, -1        // user: %20
  %20 = builtin "cmp_eq_Int64"(%10 : $Builtin.Int64, %19 : $Builtin.Int64) : $Builtin.Int1 // user: %21
  %21 = builtin "int_expect_Int1"(%20 : $Builtin.Int1, %13 : $Builtin.Int1) : $Builtin.Int1 // user: %22
  cond_br %21, bb4, bb3                           // id: %22

bb3:                                              // Preds: bb2 bb1
  %23 = builtin "sdiv_Int64"(%7 : $Builtin.Int64, %10 : $Builtin.Int64) : $Builtin.Int64 // user: %24
  %24 = struct $Int (%23 : $Builtin.Int64)        // user: %25
  return %24 : $Int                               // id: %25

bb4:                                              // Preds: bb2
  %26 = string_literal utf8 "Division results in an overflow" // user: %28
  %27 = integer_literal $Builtin.Word, 31         // user: %30
  %28 = builtin "ptrtoint_Word"(%26 : $Builtin.RawPointer) : $Builtin.Word // user: %30
  %29 = integer_literal $Builtin.Int8, 2          // users: %42, %34, %30
  %30 = struct $StaticString (%28 : $Builtin.Word, %27 : $Builtin.Word, %29 : $Builtin.Int8) // user: %45
  %31 = string_literal utf8 "/Users/buildnode/jenkins/workspace/oss-swift-package-osx/build/buildbot_osx/swift-macosx-x86_64/stdlib/public/core/8/Integers.swift" // user: %33
  %32 = integer_literal $Builtin.Word, 131        // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %29 : $Builtin.Int8) // user: %45
  %35 = integer_literal $Builtin.Int64, 19252     // user: %36
  %36 = struct $UInt (%35 : $Builtin.Int64)       // user: %45
  %37 = integer_literal $Builtin.Int32, 0         // user: %43
  br bb5                                          // id: %38

bb5:                                              // Preds: bb4
  %39 = string_literal utf8 "Fatal error"         // user: %41
  %40 = integer_literal $Builtin.Word, 11         // user: %42
  %41 = builtin "ptrtoint_Word"(%39 : $Builtin.RawPointer) : $Builtin.Word // user: %42
  %42 = struct $StaticString (%41 : $Builtin.Word, %40 : $Builtin.Word, %29 : $Builtin.Int8) // user: %45
  %43 = struct $UInt32 (%37 : $Builtin.Int32)     // user: %45
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %44 = function_ref @$Ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %45
  %45 = apply %44(%42, %30, %34, %36, %43) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %46

bb6:                                              // Preds: bb0
  %47 = string_literal utf8 "Division by zero"    // user: %49
  %48 = integer_literal $Builtin.Word, 16         // user: %51
  %49 = builtin "ptrtoint_Word"(%47 : $Builtin.RawPointer) : $Builtin.Word // user: %51
  %50 = integer_literal $Builtin.Int8, 2          // users: %63, %55, %51
  %51 = struct $StaticString (%49 : $Builtin.Word, %48 : $Builtin.Word, %50 : $Builtin.Int8) // user: %66
  %52 = string_literal utf8 "/Users/buildnode/jenkins/workspace/oss-swift-package-osx/build/buildbot_osx/swift-macosx-x86_64/stdlib/public/core/8/Integers.swift" // user: %54
  %53 = integer_literal $Builtin.Word, 131        // user: %55
  %54 = builtin "ptrtoint_Word"(%52 : $Builtin.RawPointer) : $Builtin.Word // user: %55
  %55 = struct $StaticString (%54 : $Builtin.Word, %53 : $Builtin.Word, %50 : $Builtin.Int8) // user: %66
  %56 = integer_literal $Builtin.Int64, 19245     // user: %57
  %57 = struct $UInt (%56 : $Builtin.Int64)       // user: %66
  %58 = integer_literal $Builtin.Int32, 0         // user: %64
  br bb7                                          // id: %59

bb7:                                              // Preds: bb6
  %60 = string_literal utf8 "Fatal error"         // user: %62
  %61 = integer_literal $Builtin.Word, 11         // user: %63
  %62 = builtin "ptrtoint_Word"(%60 : $Builtin.RawPointer) : $Builtin.Word // user: %63
  %63 = struct $StaticString (%62 : $Builtin.Word, %61 : $Builtin.Word, %50 : $Builtin.Int8) // user: %66
  %64 = struct $UInt32 (%58 : $Builtin.Int32)     // user: %66
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %65 = function_ref @$Ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %66
  %66 = apply %65(%63, %51, %55, %57, %64) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %67
} // end sil function '$SSp8distance2toSiSpyxG_tFs6UInt16V_Tgq5'

// specialized RangeReplaceableCollection.remove(at:)
sil shared_external [serializable] @$Ss26RangeReplaceableCollectionPsE6remove2at7ElementQz5IndexQz_tFs11_UIntBufferVys6UInt32Vs5UInt8VG_Tgq5 : $@convention(method) (_UIntBuffer<UInt32, UInt8>.Index, @inout _UIntBuffer<UInt32, UInt8>) -> UInt8 {
// %0                                             // user: %26
// %1                                             // users: %171, %105, %63, %23, %15
bb0(%0 : $_UIntBuffer<UInt32, UInt8>.Index, %1 : $*_UIntBuffer<UInt32, UInt8>):
  %2 = string_literal utf8 "Can't remove from an empty collection" // user: %4
  %3 = integer_literal $Builtin.Word, 37          // user: %6
  %4 = builtin "ptrtoint_Word"(%2 : $Builtin.RawPointer) : $Builtin.Word // user: %6
  %5 = integer_literal $Builtin.Int8, 2           // users: %211, %203, %195, %187, %88, %59, %55, %45, %41, %10, %6
  %6 = struct $StaticString (%4 : $Builtin.Word, %3 : $Builtin.Word, %5 : $Builtin.Int8) // user: %214
  %7 = string_literal utf8 "/Users/buildnode/jenkins/workspace/oss-swift-package-osx/swift/stdlib/public/core/RangeReplaceableCollection.swift" // user: %9
  %8 = integer_literal $Builtin.Word, 114         // user: %10
  %9 = builtin "ptrtoint_Word"(%7 : $Builtin.RawPointer) : $Builtin.Word // user: %10
  %10 = struct $StaticString (%9 : $Builtin.Word, %8 : $Builtin.Word, %5 : $Builtin.Int8) // user: %214
  %11 = integer_literal $Builtin.Int64, 538       // user: %12
  %12 = struct $UInt (%11 : $Builtin.Int64)       // user: %214
  %13 = integer_literal $Builtin.Int32, 0         // users: %212, %204, %196, %188, %157, %135, %89
  br bb1                                          // id: %14

bb1:                                              // Preds: bb0
  %15 = struct_element_addr %1 : $*_UIntBuffer<UInt32, UInt8>, #_UIntBuffer._bitCount // user: %16
  %16 = struct_element_addr %15 : $*UInt8, #UInt8._value // user: %17
  %17 = load %16 : $*Builtin.Int8                 // user: %19
  %18 = integer_literal $Builtin.Int8, 0          // user: %19
  %19 = builtin "cmp_eq_Int8"(%17 : $Builtin.Int8, %18 : $Builtin.Int8) : $Builtin.Int1 // user: %21
  %20 = integer_literal $Builtin.Int1, 0          // user: %21
  %21 = builtin "int_expect_Int1"(%19 : $Builtin.Int1, %20 : $Builtin.Int1) : $Builtin.Int1 // user: %22
  cond_br %21, bb21, bb2                          // id: %22

bb2:                                              // Preds: bb1
  %23 = struct_element_addr %1 : $*_UIntBuffer<UInt32, UInt8>, #_UIntBuffer._storage // users: %170, %160, %154, %24
  %24 = struct_element_addr %23 : $*UInt32, #UInt32._value // user: %25
  %25 = load %24 : $*Builtin.Int32                // users: %148, %140, %31
  %26 = struct_extract %0 : $_UIntBuffer<UInt32, UInt8>.Index, #_UIntBuffer.Index.bitOffset // user: %27
  %27 = struct_extract %26 : $UInt8, #UInt8._value // users: %94, %79, %71, %69, %66, %49, %36, %28
  %28 = builtin "zextOrBitCast_Int8_Int32"(%27 : $Builtin.Int8) : $Builtin.Int32 // user: %30
  %29 = integer_literal $Builtin.Int32, 31        // users: %166, %156, %151, %147, %133, %129, %30
  %30 = builtin "and_Int32"(%28 : $Builtin.Int32, %29 : $Builtin.Int32) : $Builtin.Int32 // user: %31
  %31 = builtin "lshr_Int32"(%25 : $Builtin.Int32, %30 : $Builtin.Int32) : $Builtin.Int32 // user: %32
  %32 = builtin "zextOrBitCast_Int32_Int64"(%31 : $Builtin.Int32) : $Builtin.Int64 // user: %33
  %33 = builtin "truncOrBitCast_Int64_Int8"(%32 : $Builtin.Int64) : $Builtin.Int8 // user: %182
  %34 = integer_literal $Builtin.Int8, 8          // user: %36
  %35 = integer_literal $Builtin.Int1, 0          // users: %177, %175, %163, %161, %143, %141, %138, %135, %125, %121, %117, %100, %95, %67, %50, %36
  %36 = builtin "uadd_with_overflow_Int8"(%27 : $Builtin.Int8, %34 : $Builtin.Int8, %35 : $Builtin.Int1) : $(Builtin.Int8, Builtin.Int1) // user: %37
  %37 = tuple_extract %36 : $(Builtin.Int8, Builtin.Int1), 0 // users: %93, %81, %76, %74, %66, %49
  %38 = string_literal utf8 "Can't form Range with upperBound < lowerBound" // user: %40
  %39 = integer_literal $Builtin.Word, 45         // user: %41
  %40 = builtin "ptrtoint_Word"(%38 : $Builtin.RawPointer) : $Builtin.Word // user: %41
  %41 = struct $StaticString (%40 : $Builtin.Word, %39 : $Builtin.Word, %5 : $Builtin.Int8) // users: %206, %198
  %42 = string_literal utf8 "/Users/buildnode/jenkins/workspace/oss-swift-package-osx/swift/stdlib/public/core/Range.swift" // user: %44
  %43 = integer_literal $Builtin.Word, 93         // user: %45
  %44 = builtin "ptrtoint_Word"(%42 : $Builtin.RawPointer) : $Builtin.Word // user: %45
  %45 = struct $StaticString (%44 : $Builtin.Word, %43 : $Builtin.Word, %5 : $Builtin.Int8) // users: %206, %198
  %46 = integer_literal $Builtin.Int64, 632       // user: %47
  %47 = struct $UInt (%46 : $Builtin.Int64)       // users: %206, %198
  br bb3                                          // id: %48

bb3:                                              // Preds: bb2
  %49 = builtin "cmp_ult_Int8"(%37 : $Builtin.Int8, %27 : $Builtin.Int8) : $Builtin.Int1 // user: %50
  %50 = builtin "int_expect_Int1"(%49 : $Builtin.Int1, %35 : $Builtin.Int1) : $Builtin.Int1 // user: %51
  cond_br %50, bb20, bb4                          // id: %51

bb4:                                              // Preds: bb3
  %52 = string_literal utf8 ""                    // user: %54
  %53 = integer_literal $Builtin.Word, 0          // user: %55
  %54 = builtin "ptrtoint_Word"(%52 : $Builtin.RawPointer) : $Builtin.Word // user: %55
  %55 = struct $StaticString (%54 : $Builtin.Word, %53 : $Builtin.Word, %5 : $Builtin.Int8) // users: %190, %91
  %56 = string_literal utf8 "/Users/buildnode/jenkins/workspace/oss-swift-package-osx/swift/stdlib/public/core/UIntBuffer.swift" // user: %58
  %57 = integer_literal $Builtin.Word, 98         // user: %59
  %58 = builtin "ptrtoint_Word"(%56 : $Builtin.RawPointer) : $Builtin.Word // user: %59
  %59 = struct $StaticString (%58 : $Builtin.Word, %57 : $Builtin.Word, %5 : $Builtin.Int8) // users: %190, %91
  %60 = integer_literal $Builtin.Int64, 216       // user: %61
  %61 = struct $UInt (%60 : $Builtin.Int64)       // user: %91
  br bb5                                          // id: %62

bb5:                                              // Preds: bb4
  %63 = struct_element_addr %1 : $*_UIntBuffer<UInt32, UInt8>, #_UIntBuffer._bitCount // user: %64
  %64 = struct_element_addr %63 : $*UInt8, #UInt8._value // user: %65
  %65 = load %64 : $*Builtin.Int8                 // users: %77, %74, %72, %69
  %66 = builtin "cmp_ult_Int8"(%37 : $Builtin.Int8, %27 : $Builtin.Int8) : $Builtin.Int1 // user: %67
  %67 = builtin "int_expect_Int1"(%66 : $Builtin.Int1, %35 : $Builtin.Int1) : $Builtin.Int1 // user: %68
  cond_br %67, bb19, bb6                          // id: %68

bb6:                                              // Preds: bb5
  %69 = builtin "cmp_ult_Int8"(%65 : $Builtin.Int8, %27 : $Builtin.Int8) : $Builtin.Int1 // user: %70
  cond_br %69, bb8, bb7                           // id: %70

bb7:                                              // Preds: bb6
  br bb9(%27 : $Builtin.Int8)                     // id: %71

bb8:                                              // Preds: bb6
  br bb9(%65 : $Builtin.Int8)                     // id: %72

// %73                                            // user: %79
bb9(%73 : $Builtin.Int8):                         // Preds: bb8 bb7
  %74 = builtin "cmp_ult_Int8"(%65 : $Builtin.Int8, %37 : $Builtin.Int8) : $Builtin.Int1 // user: %75
  cond_br %74, bb11, bb10                         // id: %75

bb10:                                             // Preds: bb9
  br bb12(%37 : $Builtin.Int8)                    // id: %76

bb11:                                             // Preds: bb9
  br bb12(%65 : $Builtin.Int8)                    // id: %77

// %78                                            // user: %81
bb12(%78 : $Builtin.Int8):                        // Preds: bb11 bb10
  %79 = builtin "cmp_eq_Int8"(%73 : $Builtin.Int8, %27 : $Builtin.Int8) : $Builtin.Int1 // user: %80
  cond_br %79, bb13, bb14                         // id: %80

bb13:                                             // Preds: bb12
  %81 = builtin "cmp_eq_Int8"(%78 : $Builtin.Int8, %37 : $Builtin.Int8) : $Builtin.Int1 // user: %83
  %82 = integer_literal $Builtin.Int1, -1         // user: %83
  %83 = builtin "int_expect_Int1"(%81 : $Builtin.Int1, %82 : $Builtin.Int1) : $Builtin.Int1 // user: %84
  cond_br %83, bb15, bb14                         // id: %84

bb14:                                             // Preds: bb13 bb12
  %85 = string_literal utf8 "Fatal error"         // user: %87
  %86 = integer_literal $Builtin.Word, 11         // user: %88
  %87 = builtin "ptrtoint_Word"(%85 : $Builtin.RawPointer) : $Builtin.Word // user: %88
  %88 = struct $StaticString (%87 : $Builtin.Word, %86 : $Builtin.Word, %5 : $Builtin.Int8) // user: %91
  %89 = struct $UInt32 (%13 : $Builtin.Int32)     // user: %91
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %90 = function_ref @$Ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %91
  %91 = apply %90(%88, %55, %59, %61, %89) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %92

bb15:                                             // Preds: bb13
  %93 = builtin "zextOrBitCast_Int8_Int64"(%37 : $Builtin.Int8) : $Builtin.Int64 // users: %120, %95
  %94 = builtin "zextOrBitCast_Int8_Int64"(%27 : $Builtin.Int8) : $Builtin.Int64 // users: %119, %95
  %95 = builtin "ssub_with_overflow_Int64"(%93 : $Builtin.Int64, %94 : $Builtin.Int64, %35 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %96
  %96 = tuple_extract %95 : $(Builtin.Int64, Builtin.Int1), 0 // user: %98
  %97 = integer_literal $Builtin.Int64, 8         // users: %175, %163, %141, %121, %120, %119, %109, %98
  %98 = builtin "sdiv_Int64"(%96 : $Builtin.Int64, %97 : $Builtin.Int64) : $Builtin.Int64 // user: %100
  %99 = integer_literal $Builtin.Int64, 0         // user: %100
  %100 = builtin "ssub_with_overflow_Int64"(%99 : $Builtin.Int64, %98 : $Builtin.Int64, %35 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %101
  %101 = tuple_extract %100 : $(Builtin.Int64, Builtin.Int1), 0 // users: %175, %161, %111
  %102 = integer_literal $Builtin.Int64, 224      // user: %103
  %103 = struct $UInt (%102 : $Builtin.Int64)     // user: %190
  br bb16                                         // id: %104

bb16:                                             // Preds: bb15
  %105 = struct_element_addr %1 : $*_UIntBuffer<UInt32, UInt8>, #_UIntBuffer._bitCount // user: %106
  %106 = struct_element_addr %105 : $*UInt8, #UInt8._value // user: %107
  %107 = load %106 : $*Builtin.Int8               // user: %108
  %108 = builtin "zextOrBitCast_Int8_Int64"(%107 : $Builtin.Int8) : $Builtin.Int64 // user: %109
  %109 = builtin "sdiv_Int64"(%108 : $Builtin.Int64, %97 : $Builtin.Int64) : $Builtin.Int64 // user: %111
  %110 = integer_literal $Builtin.Int1, -1        // user: %111
  %111 = builtin "sadd_with_overflow_Int64"(%109 : $Builtin.Int64, %101 : $Builtin.Int64, %110 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %113, %112
  %112 = tuple_extract %111 : $(Builtin.Int64, Builtin.Int1), 0 // user: %116
  %113 = tuple_extract %111 : $(Builtin.Int64, Builtin.Int1), 1 // user: %114
  cond_fail %113 : $Builtin.Int1                  // id: %114
  %115 = integer_literal $Builtin.Int64, 4        // user: %116
  %116 = builtin "cmp_slt_Int64"(%115 : $Builtin.Int64, %112 : $Builtin.Int64) : $Builtin.Int1 // user: %117
  %117 = builtin "int_expect_Int1"(%116 : $Builtin.Int1, %35 : $Builtin.Int1) : $Builtin.Int1 // user: %118
  cond_br %117, bb18, bb17                        // id: %118

bb17:                                             // Preds: bb16
  %119 = builtin "sdiv_Int64"(%94 : $Builtin.Int64, %97 : $Builtin.Int64) : $Builtin.Int64 // user: %121
  %120 = builtin "sdiv_Int64"(%93 : $Builtin.Int64, %97 : $Builtin.Int64) : $Builtin.Int64 // users: %161, %141
  %121 = builtin "smul_with_overflow_Int64"(%119 : $Builtin.Int64, %97 : $Builtin.Int64, %35 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %122
  %122 = tuple_extract %121 : $(Builtin.Int64, Builtin.Int1), 0 // users: %155, %131, %125
  %123 = integer_literal $Builtin.Int32, -1       // user: %130
  %124 = integer_literal $Builtin.Int64, 1        // users: %149, %145, %143, %131, %127, %125
  %125 = builtin "sadd_with_overflow_Int64"(%122 : $Builtin.Int64, %124 : $Builtin.Int64, %35 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %126
  %126 = tuple_extract %125 : $(Builtin.Int64, Builtin.Int1), 0 // user: %127
  %127 = builtin "ashr_Int64"(%126 : $Builtin.Int64, %124 : $Builtin.Int64) : $Builtin.Int64 // user: %128
  %128 = builtin "truncOrBitCast_Int64_Int32"(%127 : $Builtin.Int64) : $Builtin.Int32 // user: %129
  %129 = builtin "and_Int32"(%128 : $Builtin.Int32, %29 : $Builtin.Int32) : $Builtin.Int32 // user: %130
  %130 = builtin "shl_Int32"(%123 : $Builtin.Int32, %129 : $Builtin.Int32) : $Builtin.Int32 // user: %134
  %131 = builtin "ashr_Int64"(%122 : $Builtin.Int64, %124 : $Builtin.Int64) : $Builtin.Int64 // user: %132
  %132 = builtin "truncOrBitCast_Int64_Int32"(%131 : $Builtin.Int64) : $Builtin.Int32 // user: %133
  %133 = builtin "and_Int32"(%132 : $Builtin.Int32, %29 : $Builtin.Int32) : $Builtin.Int32 // user: %134
  %134 = builtin "shl_Int32"(%130 : $Builtin.Int32, %133 : $Builtin.Int32) : $Builtin.Int32 // user: %135
  %135 = builtin "usub_with_overflow_Int32"(%13 : $Builtin.Int32, %134 : $Builtin.Int32, %35 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // user: %136
  %136 = tuple_extract %135 : $(Builtin.Int32, Builtin.Int1), 0 // user: %138
  %137 = integer_literal $Builtin.Int32, 1        // user: %138
  %138 = builtin "usub_with_overflow_Int32"(%136 : $Builtin.Int32, %137 : $Builtin.Int32, %35 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // user: %139
  %139 = tuple_extract %138 : $(Builtin.Int32, Builtin.Int1), 0 // user: %140
  %140 = builtin "and_Int32"(%25 : $Builtin.Int32, %139 : $Builtin.Int32) : $Builtin.Int32 // users: %158, %153
  %141 = builtin "smul_with_overflow_Int64"(%120 : $Builtin.Int64, %97 : $Builtin.Int64, %35 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %142
  %142 = tuple_extract %141 : $(Builtin.Int64, Builtin.Int1), 0 // users: %149, %143
  %143 = builtin "sadd_with_overflow_Int64"(%142 : $Builtin.Int64, %124 : $Builtin.Int64, %35 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %144
  %144 = tuple_extract %143 : $(Builtin.Int64, Builtin.Int1), 0 // user: %145
  %145 = builtin "ashr_Int64"(%144 : $Builtin.Int64, %124 : $Builtin.Int64) : $Builtin.Int64 // user: %146
  %146 = builtin "truncOrBitCast_Int64_Int32"(%145 : $Builtin.Int64) : $Builtin.Int32 // user: %147
  %147 = builtin "and_Int32"(%146 : $Builtin.Int32, %29 : $Builtin.Int32) : $Builtin.Int32 // user: %148
  %148 = builtin "lshr_Int32"(%25 : $Builtin.Int32, %147 : $Builtin.Int32) : $Builtin.Int32 // user: %152
  %149 = builtin "ashr_Int64"(%142 : $Builtin.Int64, %124 : $Builtin.Int64) : $Builtin.Int64 // user: %150
  %150 = builtin "truncOrBitCast_Int64_Int32"(%149 : $Builtin.Int64) : $Builtin.Int32 // user: %151
  %151 = builtin "and_Int32"(%150 : $Builtin.Int32, %29 : $Builtin.Int32) : $Builtin.Int32 // user: %152
  %152 = builtin "lshr_Int32"(%148 : $Builtin.Int32, %151 : $Builtin.Int32) : $Builtin.Int32 // user: %167
  %153 = struct $UInt32 (%140 : $Builtin.Int32)   // user: %154
  store %153 to %23 : $*UInt32                    // id: %154
  %155 = builtin "truncOrBitCast_Int64_Int32"(%122 : $Builtin.Int64) : $Builtin.Int32 // user: %156
  %156 = builtin "and_Int32"(%155 : $Builtin.Int32, %29 : $Builtin.Int32) : $Builtin.Int32 // user: %157
  %157 = builtin "shl_Int32"(%13 : $Builtin.Int32, %156 : $Builtin.Int32) : $Builtin.Int32 // user: %158
  %158 = builtin "or_Int32"(%140 : $Builtin.Int32, %157 : $Builtin.Int32) : $Builtin.Int32 // users: %168, %159
  %159 = struct $UInt32 (%158 : $Builtin.Int32)   // user: %160
  store %159 to %23 : $*UInt32                    // id: %160
  %161 = builtin "sadd_with_overflow_Int64"(%120 : $Builtin.Int64, %101 : $Builtin.Int64, %35 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %162
  %162 = tuple_extract %161 : $(Builtin.Int64, Builtin.Int1), 0 // user: %163
  %163 = builtin "smul_with_overflow_Int64"(%162 : $Builtin.Int64, %97 : $Builtin.Int64, %35 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %164
  %164 = tuple_extract %163 : $(Builtin.Int64, Builtin.Int1), 0 // user: %165
  %165 = builtin "truncOrBitCast_Int64_Int32"(%164 : $Builtin.Int64) : $Builtin.Int32 // user: %166
  %166 = builtin "and_Int32"(%165 : $Builtin.Int32, %29 : $Builtin.Int32) : $Builtin.Int32 // user: %167
  %167 = builtin "shl_Int32"(%152 : $Builtin.Int32, %166 : $Builtin.Int32) : $Builtin.Int32 // user: %168
  %168 = builtin "or_Int32"(%158 : $Builtin.Int32, %167 : $Builtin.Int32) : $Builtin.Int32 // user: %169
  %169 = struct $UInt32 (%168 : $Builtin.Int32)   // user: %170
  store %169 to %23 : $*UInt32                    // id: %170
  %171 = struct_element_addr %1 : $*_UIntBuffer<UInt32, UInt8>, #_UIntBuffer._bitCount // users: %181, %172
  %172 = struct_element_addr %171 : $*UInt8, #UInt8._value // user: %173
  %173 = load %172 : $*Builtin.Int8               // user: %174
  %174 = builtin "zextOrBitCast_Int8_Int64"(%173 : $Builtin.Int8) : $Builtin.Int64 // user: %177
  %175 = builtin "smul_with_overflow_Int64"(%101 : $Builtin.Int64, %97 : $Builtin.Int64, %35 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %176
  %176 = tuple_extract %175 : $(Builtin.Int64, Builtin.Int1), 0 // user: %177
  %177 = builtin "sadd_with_overflow_Int64"(%174 : $Builtin.Int64, %176 : $Builtin.Int64, %35 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %178
  %178 = tuple_extract %177 : $(Builtin.Int64, Builtin.Int1), 0 // user: %179
  %179 = builtin "truncOrBitCast_Int64_Int8"(%178 : $Builtin.Int64) : $Builtin.Int8 // user: %180
  %180 = struct $UInt8 (%179 : $Builtin.Int8)     // user: %181
  store %180 to %171 : $*UInt8                    // id: %181
  %182 = struct $UInt8 (%33 : $Builtin.Int8)      // user: %183
  return %182 : $UInt8                            // id: %183

bb18:                                             // Preds: bb16
  %184 = string_literal utf8 "Fatal error"        // user: %186
  %185 = integer_literal $Builtin.Word, 11        // user: %187
  %186 = builtin "ptrtoint_Word"(%184 : $Builtin.RawPointer) : $Builtin.Word // user: %187
  %187 = struct $StaticString (%186 : $Builtin.Word, %185 : $Builtin.Word, %5 : $Builtin.Int8) // user: %190
  %188 = struct $UInt32 (%13 : $Builtin.Int32)    // user: %190
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %189 = function_ref @$Ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %190
  %190 = apply %189(%187, %55, %59, %103, %188) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %191

bb19:                                             // Preds: bb5
  %192 = string_literal utf8 "Fatal error"        // user: %194
  %193 = integer_literal $Builtin.Word, 11        // user: %195
  %194 = builtin "ptrtoint_Word"(%192 : $Builtin.RawPointer) : $Builtin.Word // user: %195
  %195 = struct $StaticString (%194 : $Builtin.Word, %193 : $Builtin.Word, %5 : $Builtin.Int8) // user: %198
  %196 = struct $UInt32 (%13 : $Builtin.Int32)    // user: %198
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %197 = function_ref @$Ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %198
  %198 = apply %197(%195, %41, %45, %47, %196) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %199

bb20:                                             // Preds: bb3
  %200 = string_literal utf8 "Fatal error"        // user: %202
  %201 = integer_literal $Builtin.Word, 11        // user: %203
  %202 = builtin "ptrtoint_Word"(%200 : $Builtin.RawPointer) : $Builtin.Word // user: %203
  %203 = struct $StaticString (%202 : $Builtin.Word, %201 : $Builtin.Word, %5 : $Builtin.Int8) // user: %206
  %204 = struct $UInt32 (%13 : $Builtin.Int32)    // user: %206
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %205 = function_ref @$Ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %206
  %206 = apply %205(%203, %41, %45, %47, %204) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %207

bb21:                                             // Preds: bb1
  %208 = string_literal utf8 "Fatal error"        // user: %210
  %209 = integer_literal $Builtin.Word, 11        // user: %211
  %210 = builtin "ptrtoint_Word"(%208 : $Builtin.RawPointer) : $Builtin.Word // user: %211
  %211 = struct $StaticString (%210 : $Builtin.Word, %209 : $Builtin.Word, %5 : $Builtin.Int8) // user: %214
  %212 = struct $UInt32 (%13 : $Builtin.Int32)    // user: %214
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %213 = function_ref @$Ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %214
  %214 = apply %213(%211, %6, %10, %12, %212) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %215
} // end sil function '$Ss26RangeReplaceableCollectionPsE6remove2at7ElementQz5IndexQz_tFs11_UIntBufferVys6UInt32Vs5UInt8VG_Tgq5'

// Unicode.UTF8.ForwardParser._invalidLength()
sil public_external [serialized] [noinline] @$Ss7UnicodeO4UTF8O13ForwardParserV14_invalidLengths5UInt8VyF : $@convention(method) (Unicode.UTF8.ForwardParser) -> UInt8 {
// %0                                             // user: %1
bb0(%0 : $Unicode.UTF8.ForwardParser):
  %1 = struct_extract %0 : $Unicode.UTF8.ForwardParser, #Unicode.UTF8.ForwardParser._buffer // user: %2
  %2 = struct_extract %1 : $_UIntBuffer<UInt32, UInt8>, #_UIntBuffer._storage // user: %4
  %3 = integer_literal $Builtin.Int32, 49392      // user: %5
  %4 = struct_extract %2 : $UInt32, #UInt32._value // users: %65, %57, %15, %10, %5
  %5 = builtin "and_Int32"(%4 : $Builtin.Int32, %3 : $Builtin.Int32) : $Builtin.Int32 // user: %7
  %6 = integer_literal $Builtin.Int32, 32992      // user: %7
  %7 = builtin "cmp_eq_Int32"(%5 : $Builtin.Int32, %6 : $Builtin.Int32) : $Builtin.Int1 // user: %8
  cond_br %7, bb11, bb1                           // id: %8

bb1:                                              // Preds: bb0
  %9 = integer_literal $Builtin.Int32, 49400      // user: %10
  %10 = builtin "and_Int32"(%4 : $Builtin.Int32, %9 : $Builtin.Int32) : $Builtin.Int32 // user: %12
  %11 = integer_literal $Builtin.Int32, 33008     // user: %12
  %12 = builtin "cmp_eq_Int32"(%10 : $Builtin.Int32, %11 : $Builtin.Int32) : $Builtin.Int1 // user: %13
  cond_br %12, bb2, bb14                          // id: %13

bb2:                                              // Preds: bb1
  %14 = integer_literal $Builtin.Int32, 12295     // user: %15
  %15 = builtin "and_Int32"(%4 : $Builtin.Int32, %14 : $Builtin.Int32) : $Builtin.Int32 // users: %47, %35, %32, %29
  %16 = string_literal utf8 "Not enough bits to represent a signed value" // user: %18
  %17 = integer_literal $Builtin.Word, 43         // user: %20
  %18 = builtin "ptrtoint_Word"(%16 : $Builtin.RawPointer) : $Builtin.Word // user: %20
  %19 = integer_literal $Builtin.Int8, 2          // users: %61, %42, %24, %20
  %20 = struct $StaticString (%18 : $Builtin.Word, %17 : $Builtin.Word, %19 : $Builtin.Int8) // user: %45
  %21 = string_literal utf8 "/Users/buildnode/jenkins/workspace/oss-swift-package-osx/build/buildbot_osx/swift-macosx-x86_64/stdlib/public/core/8/Integers.swift" // user: %23
  %22 = integer_literal $Builtin.Word, 131        // user: %24
  %23 = builtin "ptrtoint_Word"(%21 : $Builtin.RawPointer) : $Builtin.Word // user: %24
  %24 = struct $StaticString (%23 : $Builtin.Word, %22 : $Builtin.Word, %19 : $Builtin.Int8) // user: %45
  %25 = integer_literal $Builtin.Int64, 3445      // user: %26
  %26 = struct $UInt (%25 : $Builtin.Int64)       // user: %45
  %27 = integer_literal $Builtin.Int32, 0         // user: %43
  br bb3                                          // id: %28

bb3:                                              // Preds: bb2
  %29 = builtin "zextOrBitCast_Int32_Int64"(%15 : $Builtin.Int32) : $Builtin.Int64 // user: %30
  %30 = builtin "truncOrBitCast_Int64_Int16"(%29 : $Builtin.Int64) : $Builtin.Int16 // user: %31
  %31 = builtin "zextOrBitCast_Int16_Int32"(%30 : $Builtin.Int16) : $Builtin.Int32 // user: %32
  %32 = builtin "cmp_eq_Int32"(%31 : $Builtin.Int32, %15 : $Builtin.Int32) : $Builtin.Int1 // user: %33
  cond_br %32, bb6, bb4                           // id: %33

bb4:                                              // Preds: bb3
  %34 = integer_literal $Builtin.Int32, 65535     // user: %35
  %35 = builtin "cmp_ult_Int32"(%34 : $Builtin.Int32, %15 : $Builtin.Int32) : $Builtin.Int1 // user: %37
  %36 = integer_literal $Builtin.Int1, 0          // user: %37
  %37 = builtin "int_expect_Int1"(%35 : $Builtin.Int1, %36 : $Builtin.Int1) : $Builtin.Int1 // user: %38
  cond_br %37, bb5, bb6                           // id: %38

bb5:                                              // Preds: bb4
  %39 = string_literal utf8 "Fatal error"         // user: %41
  %40 = integer_literal $Builtin.Word, 11         // user: %42
  %41 = builtin "ptrtoint_Word"(%39 : $Builtin.RawPointer) : $Builtin.Word // user: %42
  %42 = struct $StaticString (%41 : $Builtin.Word, %40 : $Builtin.Word, %19 : $Builtin.Int8) // user: %45
  %43 = struct $UInt32 (%27 : $Builtin.Int32)     // user: %45
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %44 = function_ref @$Ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %45
  %45 = apply %44(%42, %20, %24, %26, %43) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %46

bb6:                                              // Preds: bb4 bb3
  %47 = builtin "zextOrBitCast_Int32_Int64"(%15 : $Builtin.Int32) : $Builtin.Int64 // user: %48
  %48 = builtin "truncOrBitCast_Int64_Int16"(%47 : $Builtin.Int64) : $Builtin.Int16 // users: %52, %50
  %49 = integer_literal $Builtin.Int16, 0         // user: %50
  %50 = builtin "cmp_eq_Int16"(%48 : $Builtin.Int16, %49 : $Builtin.Int16) : $Builtin.Int1 // user: %51
  cond_br %50, bb14, bb7                          // id: %51

bb7:                                              // Preds: bb6
  %52 = builtin "int_bswap_Int16"(%48 : $Builtin.Int16) : $Builtin.Int16 // user: %54
  %53 = integer_literal $Builtin.Int16, 1024      // user: %54
  %54 = builtin "cmp_ult_Int16"(%53 : $Builtin.Int16, %52 : $Builtin.Int16) : $Builtin.Int1 // user: %55
  cond_br %54, bb14, bb8                          // id: %55

bb8:                                              // Preds: bb7
  %56 = integer_literal $Builtin.Int32, 12582912  // user: %57
  %57 = builtin "and_Int32"(%4 : $Builtin.Int32, %56 : $Builtin.Int32) : $Builtin.Int32 // user: %59
  %58 = integer_literal $Builtin.Int32, 8388608   // user: %59
  %59 = builtin "cmp_eq_Int32"(%57 : $Builtin.Int32, %58 : $Builtin.Int32) : $Builtin.Int1 // user: %60
  cond_br %59, bb10, bb9                          // id: %60

bb9:                                              // Preds: bb8
  br bb15(%19 : $Builtin.Int8)                    // id: %61

bb10:                                             // Preds: bb8
  %62 = integer_literal $Builtin.Int8, 3          // user: %63
  br bb15(%62 : $Builtin.Int8)                    // id: %63

bb11:                                             // Preds: bb0
  %64 = integer_literal $Builtin.Int32, 8207      // user: %65
  %65 = builtin "and_Int32"(%4 : $Builtin.Int32, %64 : $Builtin.Int32) : $Builtin.Int32 // users: %70, %67
  %66 = integer_literal $Builtin.Int32, 0         // user: %67
  %67 = builtin "cmp_eq_Int32"(%65 : $Builtin.Int32, %66 : $Builtin.Int32) : $Builtin.Int1 // user: %68
  cond_br %67, bb14, bb12                         // id: %68

bb12:                                             // Preds: bb11
  %69 = integer_literal $Builtin.Int32, 8205      // user: %70
  %70 = builtin "cmp_eq_Int32"(%65 : $Builtin.Int32, %69 : $Builtin.Int32) : $Builtin.Int1 // user: %71
  cond_br %70, bb14, bb13                         // id: %71

bb13:                                             // Preds: bb12
  %72 = integer_literal $Builtin.Int8, 2          // user: %73
  br bb15(%72 : $Builtin.Int8)                    // id: %73

bb14:                                             // Preds: bb12 bb11 bb7 bb6 bb1
  %74 = integer_literal $Builtin.Int8, 1          // user: %75
  br bb15(%74 : $Builtin.Int8)                    // id: %75

// %76                                            // user: %77
bb15(%76 : $Builtin.Int8):                        // Preds: bb14 bb13 bb10 bb9
  %77 = struct $UInt8 (%76 : $Builtin.Int8)       // user: %78
  return %77 : $UInt8                             // id: %78
} // end sil function '$Ss7UnicodeO4UTF8O13ForwardParserV14_invalidLengths5UInt8VyF'

// specialized UnsafeMutablePointer.distance(to:)
sil shared_external [serializable] @$SSp8distance2toSiSpyxG_tFs5UInt8V_Tgq5 : $@convention(method) (UnsafeMutablePointer<UInt8>, UnsafeMutablePointer<UInt8>) -> Int {
// %0                                             // user: %2
// %1                                             // user: %4
bb0(%0 : $UnsafeMutablePointer<UInt8>, %1 : $UnsafeMutablePointer<UInt8>):
  %2 = struct_extract %0 : $UnsafeMutablePointer<UInt8>, #UnsafeMutablePointer._rawValue // user: %3
  %3 = builtin "ptrtoint_Word"(%2 : $Builtin.RawPointer) : $Builtin.Word // user: %6
  %4 = struct_extract %1 : $UnsafeMutablePointer<UInt8>, #UnsafeMutablePointer._rawValue // user: %5
  %5 = builtin "ptrtoint_Word"(%4 : $Builtin.RawPointer) : $Builtin.Word // user: %6
  %6 = builtin "sub_Word"(%3 : $Builtin.Word, %5 : $Builtin.Word) : $Builtin.Word // user: %7
  %7 = builtin "zextOrBitCast_Word_Int64"(%6 : $Builtin.Word) : $Builtin.Int64 // users: %23, %17
  %8 = metatype $@thick UInt8.Type                // user: %9
  %9 = builtin "strideof"<UInt8>(%8 : $@thick UInt8.Type) : $Builtin.Word // user: %10
  %10 = builtin "zextOrBitCast_Word_Int64"(%9 : $Builtin.Word) : $Builtin.Int64 // users: %23, %20, %12
  %11 = integer_literal $Builtin.Int64, 0         // user: %12
  %12 = builtin "cmp_eq_Int64"(%10 : $Builtin.Int64, %11 : $Builtin.Int64) : $Builtin.Int1 // user: %14
  %13 = integer_literal $Builtin.Int1, 0          // users: %21, %14
  %14 = builtin "int_expect_Int1"(%12 : $Builtin.Int1, %13 : $Builtin.Int1) : $Builtin.Int1 // user: %15
  cond_br %14, bb6, bb1                           // id: %15

bb1:                                              // Preds: bb0
  %16 = integer_literal $Builtin.Int64, -9223372036854775808 // user: %17
  %17 = builtin "cmp_eq_Int64"(%7 : $Builtin.Int64, %16 : $Builtin.Int64) : $Builtin.Int1 // user: %18
  cond_br %17, bb2, bb3                           // id: %18

bb2:                                              // Preds: bb1
  %19 = integer_literal $Builtin.Int64, -1        // user: %20
  %20 = builtin "cmp_eq_Int64"(%10 : $Builtin.Int64, %19 : $Builtin.Int64) : $Builtin.Int1 // user: %21
  %21 = builtin "int_expect_Int1"(%20 : $Builtin.Int1, %13 : $Builtin.Int1) : $Builtin.Int1 // user: %22
  cond_br %21, bb4, bb3                           // id: %22

bb3:                                              // Preds: bb2 bb1
  %23 = builtin "sdiv_Int64"(%7 : $Builtin.Int64, %10 : $Builtin.Int64) : $Builtin.Int64 // user: %24
  %24 = struct $Int (%23 : $Builtin.Int64)        // user: %25
  return %24 : $Int                               // id: %25

bb4:                                              // Preds: bb2
  %26 = string_literal utf8 "Division results in an overflow" // user: %28
  %27 = integer_literal $Builtin.Word, 31         // user: %30
  %28 = builtin "ptrtoint_Word"(%26 : $Builtin.RawPointer) : $Builtin.Word // user: %30
  %29 = integer_literal $Builtin.Int8, 2          // users: %42, %34, %30
  %30 = struct $StaticString (%28 : $Builtin.Word, %27 : $Builtin.Word, %29 : $Builtin.Int8) // user: %45
  %31 = string_literal utf8 "/Users/buildnode/jenkins/workspace/oss-swift-package-osx/build/buildbot_osx/swift-macosx-x86_64/stdlib/public/core/8/Integers.swift" // user: %33
  %32 = integer_literal $Builtin.Word, 131        // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %29 : $Builtin.Int8) // user: %45
  %35 = integer_literal $Builtin.Int64, 19252     // user: %36
  %36 = struct $UInt (%35 : $Builtin.Int64)       // user: %45
  %37 = integer_literal $Builtin.Int32, 0         // user: %43
  br bb5                                          // id: %38

bb5:                                              // Preds: bb4
  %39 = string_literal utf8 "Fatal error"         // user: %41
  %40 = integer_literal $Builtin.Word, 11         // user: %42
  %41 = builtin "ptrtoint_Word"(%39 : $Builtin.RawPointer) : $Builtin.Word // user: %42
  %42 = struct $StaticString (%41 : $Builtin.Word, %40 : $Builtin.Word, %29 : $Builtin.Int8) // user: %45
  %43 = struct $UInt32 (%37 : $Builtin.Int32)     // user: %45
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %44 = function_ref @$Ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %45
  %45 = apply %44(%42, %30, %34, %36, %43) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %46

bb6:                                              // Preds: bb0
  %47 = string_literal utf8 "Division by zero"    // user: %49
  %48 = integer_literal $Builtin.Word, 16         // user: %51
  %49 = builtin "ptrtoint_Word"(%47 : $Builtin.RawPointer) : $Builtin.Word // user: %51
  %50 = integer_literal $Builtin.Int8, 2          // users: %63, %55, %51
  %51 = struct $StaticString (%49 : $Builtin.Word, %48 : $Builtin.Word, %50 : $Builtin.Int8) // user: %66
  %52 = string_literal utf8 "/Users/buildnode/jenkins/workspace/oss-swift-package-osx/build/buildbot_osx/swift-macosx-x86_64/stdlib/public/core/8/Integers.swift" // user: %54
  %53 = integer_literal $Builtin.Word, 131        // user: %55
  %54 = builtin "ptrtoint_Word"(%52 : $Builtin.RawPointer) : $Builtin.Word // user: %55
  %55 = struct $StaticString (%54 : $Builtin.Word, %53 : $Builtin.Word, %50 : $Builtin.Int8) // user: %66
  %56 = integer_literal $Builtin.Int64, 19245     // user: %57
  %57 = struct $UInt (%56 : $Builtin.Int64)       // user: %66
  %58 = integer_literal $Builtin.Int32, 0         // user: %64
  br bb7                                          // id: %59

bb7:                                              // Preds: bb6
  %60 = string_literal utf8 "Fatal error"         // user: %62
  %61 = integer_literal $Builtin.Word, 11         // user: %63
  %62 = builtin "ptrtoint_Word"(%60 : $Builtin.RawPointer) : $Builtin.Word // user: %63
  %63 = struct $StaticString (%62 : $Builtin.Word, %61 : $Builtin.Word, %50 : $Builtin.Int8) // user: %66
  %64 = struct $UInt32 (%58 : $Builtin.Int32)     // user: %66
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %65 = function_ref @$Ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %66
  %66 = apply %65(%63, %51, %55, %57, %64) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %67
} // end sil function '$SSp8distance2toSiSpyxG_tFs5UInt8V_Tgq5'

// _SwiftRawStringStorage.init()
sil @$Ss22_SwiftRawStringStorageCABycfc : $@convention(method) (@owned _SwiftRawStringStorage) -> @owned _SwiftRawStringStorage

// _SwiftStringStorage.rawStart.getter
sil public_external [serialized] @$Ss19_SwiftStringStorageC8rawStartSvvg : $@convention(method) <CodeUnit where CodeUnit : FixedWidthInteger, CodeUnit : UnsignedInteger> (@guaranteed _SwiftStringStorage<CodeUnit>) -> UnsafeMutableRawPointer {
// %0                                             // user: %1
bb0(%0 : $_SwiftStringStorage<CodeUnit>):
  %1 = ref_tail_addr %0 : $_SwiftStringStorage<CodeUnit>, $CodeUnit // user: %2
  %2 = address_to_pointer %1 : $*CodeUnit to $Builtin.RawPointer // user: %3
  %3 = struct $UnsafeMutableRawPointer (%2 : $Builtin.RawPointer) // user: %4
  return %3 : $UnsafeMutableRawPointer            // id: %4
} // end sil function '$Ss19_SwiftStringStorageC8rawStartSvvg'

// _SwiftStringStorage.init(coder:)
sil @$Ss19_SwiftStringStorageC5coderAByxGyXl_tcfc : $@convention(method) <τ_0_0 where τ_0_0 : FixedWidthInteger, τ_0_0 : UnsignedInteger> (@owned AnyObject, @owned _SwiftStringStorage<τ_0_0>) -> @owned _SwiftStringStorage<τ_0_0>

// _SwiftStringStorage.__deallocating_deinit
sil @$Ss19_SwiftStringStorageCfD : $@convention(method) <τ_0_0 where τ_0_0 : FixedWidthInteger, τ_0_0 : UnsignedInteger> (@owned _SwiftStringStorage<τ_0_0>) -> ()

sil_vtable [serialized] _SwiftStringStorage {
  #_SwiftNativeNSString.init!initializer.1: (_SwiftNativeNSString.Type) -> () -> _SwiftNativeNSString : @$Ss22_SwiftRawStringStorageCABycfc [inherited] // _SwiftRawStringStorage.init()
  #_SwiftRawStringStorage.rawStart!getter.1: (_SwiftRawStringStorage) -> () -> UnsafeMutableRawPointer : @$Ss19_SwiftStringStorageC8rawStartSvvg [override] // _SwiftStringStorage.rawStart.getter
  #_SwiftStringStorage.init!initializer.1: <CodeUnit where CodeUnit : FixedWidthInteger, CodeUnit : UnsignedInteger> (_SwiftStringStorage<CodeUnit>.Type) -> (AnyObject) -> _SwiftStringStorage<CodeUnit> : @$Ss19_SwiftStringStorageC5coderAByxGyXl_tcfc // _SwiftStringStorage.init(coder:)
  #_SwiftStringStorage.deinit!deallocator: @$Ss19_SwiftStringStorageCfD // _SwiftStringStorage.__deallocating_deinit
}



