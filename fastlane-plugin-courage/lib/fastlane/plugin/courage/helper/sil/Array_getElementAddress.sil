// Array._getElementAddress(_:)
sil public_external [serialized] [_semantics "array.get_element_address"] @$SSa18_getElementAddressySpyxGSiF : $@convention(method) <Element> (Int, @guaranteed Array<Element>) -> UnsafeMutablePointer<Element> {
// %0                                             // user: %36
// %1                                             // user: %2
bb0(%0 : $Int, %1 : $Array<Element>):
  %2 = struct_extract %1 : $Array<Element>, #Array._buffer // user: %3
  %3 = struct_extract %2 : $_ArrayBuffer<Element>, #_ArrayBuffer._storage // user: %4
  %4 = struct_extract %3 : $_BridgeStorage<_ContiguousArrayStorageBase, _NSArrayCore>, #_BridgeStorage.rawValue // users: %32, %31, %29, %28, %23, %19, %14
  %5 = metatype $@thick Element.Type              // users: %15, %6
  %6 = builtin "canBeClass"<Element>(%5 : $@thick Element.Type) : $Builtin.Int8 // users: %11, %8
  %7 = integer_literal $Builtin.Int8, 0           // user: %8
  %8 = builtin "cmp_eq_Int8"(%6 : $Builtin.Int8, %7 : $Builtin.Int8) : $Builtin.Int1 // user: %9
  cond_br %8, bb4, bb1                            // id: %9

bb1:                                              // Preds: bb0
  %10 = integer_literal $Builtin.Int8, 1          // user: %11
  %11 = builtin "cmp_eq_Int8"(%6 : $Builtin.Int8, %10 : $Builtin.Int8) : $Builtin.Int1 // user: %12
  cond_br %11, bb3, bb2                           // id: %12

bb2:                                              // Preds: bb1
  // function_ref _swift_isClassOrObjCExistentialType
  %13 = function_ref @_swift_isClassOrObjCExistentialType : $@convention(thin) <τ_0_0> (@thick τ_0_0.Type) -> Bool // user: %15
  strong_retain %4 : $Builtin.BridgeObject        // id: %14
  %15 = apply %13<Element>(%5) : $@convention(thin) <τ_0_0> (@thick τ_0_0.Type) -> Bool // user: %16
  br bb5(%15 : $Bool)                             // id: %16

bb3:                                              // Preds: bb1
  %17 = integer_literal $Builtin.Int1, -1         // user: %18
  %18 = struct $Bool (%17 : $Builtin.Int1)        // user: %20
  strong_retain %4 : $Builtin.BridgeObject        // id: %19
  br bb5(%18 : $Bool)                             // id: %20

bb4:                                              // Preds: bb0
  %21 = integer_literal $Builtin.Int1, 0          // user: %22
  %22 = struct $Bool (%21 : $Builtin.Int1)        // user: %24
  strong_retain %4 : $Builtin.BridgeObject        // id: %23
  br bb5(%22 : $Bool)                             // id: %24

// %25                                            // user: %26
bb5(%25 : $Bool):                                 // Preds: bb4 bb3 bb2
  %26 = struct_extract %25 : $Bool, #Bool._value  // user: %27
  cond_br %26, bb7, bb6                           // id: %27

bb6:                                              // Preds: bb5
  strong_release %4 : $Builtin.BridgeObject       // id: %28
  %29 = unchecked_ref_cast %4 : $Builtin.BridgeObject to $_ContiguousArrayStorageBase // user: %30
  br bb8(%29 : $_ContiguousArrayStorageBase)      // id: %30

bb7:                                              // Preds: bb5
  %31 = bridge_object_to_ref %4 : $Builtin.BridgeObject to $_ContiguousArrayStorageBase // user: %33
  strong_release %4 : $Builtin.BridgeObject       // id: %32
  br bb8(%31 : $_ContiguousArrayStorageBase)      // id: %33

// %34                                            // user: %35
bb8(%34 : $_ContiguousArrayStorageBase):          // Preds: bb7 bb6
  %35 = ref_tail_addr %34 : $_ContiguousArrayStorageBase, $Element // user: %38
  %36 = struct_extract %0 : $Int, #Int._value     // user: %37
  %37 = builtin "truncOrBitCast_Int64_Word"(%36 : $Builtin.Int64) : $Builtin.Word // user: %38
  %38 = index_addr %35 : $*Element, %37 : $Builtin.Word // user: %39
  %39 = address_to_pointer %38 : $*Element to $Builtin.RawPointer // user: %40
  %40 = struct $UnsafeMutablePointer<Element> (%39 : $Builtin.RawPointer) // user: %41
  return %40 : $UnsafeMutablePointer<Element>     // id: %41
} // end sil function '$SSa18_getElementAddressySpyxGSiF'

